// ===============================================================================================================
// Submit a Maya job to the deadline system.
// Install this in the Deadline Repository.
//
// Copyright (c) Thinkbox Software Inc
// All rights reserved.
// ===============================================================================================================

// ===============================================================================================================
// Adds Thinkbox shelf and button to Maya UI if necessary.
// ===============================================================================================================

// ===============================================================================================================
// NIM
//
// Andrew Sinagra
// 02.12.13
// SubmitMayaToDeadline_nim_v09.mel
// Deadline v5.2.0.49424R
// requires n_nimTools.py
/*
	3.29.13	Add Task Details to Assets
	4.03.13 Add user and file to Draft submission
	6.04.13 Updated for Deadline6
	6.05.14	Updated for Deadline 6.2
	09.08.14    v6.2.1      Added sRGB encoding option for Draft
	11.24.14    v6.2.2	Upated user lookup to read global first then fallback to OS ENV
*/
// ===============================================================================================================


// Only update the Maya UI if we're not in batch mode.
int $batchMode = `about -batch`;
if( !$batchMode )
{
	string $newName = "Deadline";
	string $newButtonName = "DeadlineButton";
	string $fileName = ( `internalVar -userShelfDir` + "shelf_" + $newName + ".mel" );

	int $addShelf = true;
	if( `file -q -exists $fileName` )
		$addShelf = false;
	else
	{
		// Check for existing shelves in optionVars.
		string $shelfName;
		int $shelfCount = `optionVar -q numShelves`;
		for( $i = 1; $i <= $shelfCount; $i++ )
		{
			$varName = "shelfName" + $i;
			$shelfName = `optionVar -q $varName`;
			if( $shelfName == $newName )
			{
				$addShelf = false;
				break;
			}
		}
		
		// Add the shelf if necessary.
		if( $addShelf )
			addNewShelfTab $newName;
	}

	int $addButton = true;
	string $buttonArray[] = `shelfLayout -q -childArray $newName`;
	for( $cnt = 0; $cnt < size( $buttonArray ); $cnt++ )
	{
		$buttonAnnotation = `shelfButton -q -annotation $buttonArray[$cnt]`;
		if( $buttonAnnotation == "Submit To Deadline" )
		{
			$addButton = false;
			break;
		}
	}

	if( $addButton )
	{
		//string $imagePath = "commandButton.xpm";
		string $imagePath = CheckSlashes( $root + "/submission/Maya/Main/Submit.png" );
		shelfButton -parent $newName -annotation "Submit To Deadline" -image1 $imagePath -command ("SubmitJobToDeadline") $newButtonName;
	}
}

// ===============================================================================================================
// Globals
// ===============================================================================================================

global string $DeadlineSubmitterWindow;
global string $ProjectPathGrp;
global string $ImageOutputPathGrp;
global string $StartupScriptPathGrp;
global string $MentalRayFilenameGrp;
global string $VRayFilenameGrp;
global string $LimitGroupGrp;
global string $DependenciesGrp;
global string $MachineListGrp;
global string $JobNameGrp;

global string $MayaRenderOptionsRollout;
global string $MayaRenderOptionsArnoldRollout;
global string $MayaRenderOptionsMentalRayRollout;
global string $MayaRenderOptionsRedshiftRollout;
global string $MayaRenderOptionsVRayRollout;
global string $MayaRenderOptionsTileRollout;
global string $MentalRayExportRollout;
global string $MentalRayExportRenderJobRollout;
global string $VrayExportRollout;
global string $VrayExportRenderJobRollout;
global string $VrayExportVrimgJobRollout;
global string $RendermanExportRollout;
global string $RendermanExportRenderJobRollout;
global string $ArnoldExportRollout;
global string $ArnoldExportRenderJobRollout;

global string $OverrideLayerSettingsDialog;

global string $DeadlineRepositoryRoot;

global int $MayaRenderJobType = 1;
global int $MentalRayExportJobType = 2;
global int $VRayExportJobType = 3;
global int $RendermanExportJobType = 4;
global int $ArnoldExportJobType = 5;


//=================================================================
// SHOTGUN

global string $ShotgunResultsBox;
global string $SGInfoKeys[];
global string $SGInfoValues[];

//=================================================================


//=================================================================================================
// NIM
//
// Andrew Sinagra
// 11.05.12
// 07.22.14	Adding tests for live n_nimTools module
// SubmitMayaToDeadline_nim_v09.mel

//python("import n_nimTools as nim");
python("import imp\ntry:\n\timp.find_module('n_nimTools')\n\tnimFound=True\n\timport n_nimTools as nim\nexcept ImportError:\n\tnimFound=False");
global string $nimIsMod;
$nimIsMod = python("1 if nimFound is True else 0");
if($nimIsMod == 1)
{
	print "NIM Module Found";	
}

global proc string nimIsModule(string $cmd)
{
	string $pyTestModSrt = "import imp\ntry:\n\timp.find_module('n_nimTools')\n\t";
	string $pyTestModEnd = "\nexcept ImportError:\n\tfound=False";
	
	string $output = $pyTestModSrt+$cmd+$pyTestModEnd;
	return $output;
}

	
global string $NIM_taskArray[];

global proc string getJsonValue(string $data, string $key)
{
    if (`size($data)` > 0)
    {    //REMOVE {} at start and end of JSON
        $data = substring($data, 2, (`size($data)`-1) );
        print ("Data: "+$data+"\n");
    }
    else
    {
        return "None";
    }
    
    //REMOVE ALL ' FROM string
    $data = substituteAllString($data,"'","");
    print ("Data: "+$data+"\n");
    $array1 = stringToStringArray($data,",");
    print ($array1);
    
    for ($subArray in $array1)
    {
        $array2 = stringToStringArray($subArray,": ");
        
        print("ARRAY: "+$array2[0]+"-"+$array2[1]+"\n");
        if ($array2[0] == $key)
        {
            string $found = $array2[1];
            return $found;
        }
            
   }
   return "None";
}

global proc addTaskMenuItemsFromJsonArray(string $optionMenu, string $data[])
{
	global string $NIM_taskArray[];
	clear($NIM_taskArray);
	
	// {"taskID":"10673","taskDesc":"","taskName":"COMP WRKSTN"},{"taskID":"10674","taskDesc":"","taskName":"MODEL"},{"taskID":"10675","taskDesc":"","taskName":"LIGHT"}	
	for ($dataItem in $data)
	{
		if (`size($dataItem)` > 0)
		{    //REMOVE {} at start and end of JSON
		    $dataItem = substring($dataItem, 2, (`size($dataItem)`-1) );	//$dataItem = 'taskDesc': '', 'taskName': 'LIGHT', 'taskID': '10675'
		}
		else return;
		
		//REMOVE ALL ' FROM string
		$dataItem = substituteAllString($dataItem,"'","");	//$dataItem = taskDesc: , taskName: LIGHT, taskID: 10675
		$array1 = stringToStringArray($dataItem,",");		//$array1 = [0]=[taskDesc: ]   [1]=[taskName: LIGHT]    [2]= [taskID: 10675]
				
		string $taskName = "";
		string $taskDesc = "";
		string $taskID = "";
		string $username = "";
		
		for ($taskItems in $array1)
		{
			$array2 = stringToStringArray($taskItems,":");	
			//GET TASK NAME
			if (strip($array2[0]) == "taskName")
				{ 	$taskName = strip($array2[1]);	}
			//GET TASK DESC AND TRUNCATE TO LIMIT LINE LENGTH
			else if (strip($array2[0]) == "taskDesc")
				{	$taskDesc = substring($array2[1],1,32);		}
			//GET TASKID
			else if (strip($array2[0]) == "taskID")
				{	$taskID = strip($array2[1]);
					stringArrayInsertAtIndex(size($NIM_taskArray)+1,$NIM_taskArray,$taskID);
				}
			//GET USERNAME	
			else if (strip($array2[0]) == "username")
				{	$username = strip($array2[1]);	}
		}
		
		string $menuLabel = "";
		if (strip($taskDesc) == "") {
			$menuLabel = $username+": "+$taskName;
		}
		else {
			$menuLabel = $username+": "+$taskName+"-"+$taskDesc+"...";
		}
		menuItem -label $menuLabel -ann $taskID -p $optionMenu;
	}

	string $nim_taskID = `attributeExists nim_taskID defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_taskID` : "";
	string $pyCmd = "nim.selectMenuItemAnn('"+$optionMenu+"','"+$nim_taskID+"')";
	global string $nimIsMod;
	if($nimIsMod == 1){python($pyCmd);}
}

global proc SaveNimTaskData()
{
	//SAVE TASKID TO GLOBALS
	global string $NIM_taskArray[];

	if( ! `attributeExists nim_taskID defaultRenderGlobals` )
		addAttr -shortName "nim_taskID" -longName "nim_taskID" -dt "string" defaultRenderGlobals;
	
	$taskID = -1;
	$selectedItem = `optionMenu -q -sl "nimTasks_optionMenu|OptionMenu"`;
	print ("selItem: "+string($selectedItem)+"\n");
	if ($selectedItem > 1) {
		$selectedItem = int($selectedItem - 2);
		$taskID = $NIM_taskArray[$selectedItem];
	}
	else{
		$taskID = -1;
	}
	if( `attributeExists nim_taskID defaultRenderGlobals` ) setAttr "defaultRenderGlobals.nim_taskID" -type "string" $taskID;
	
}

global proc UseNimChanged()
{
	if( ! `attributeExists nim_useNim defaultRenderGlobals` )
		addAttr -shortName "nim_useNim" -longName "nim_useNim" -at long defaultRenderGlobals;
		
	int $checkBoxValue = `checkBox -q -v "useNim_checkBox"`;
	if( `attributeExists nim_useNim defaultRenderGlobals` ) setAttr "defaultRenderGlobals.nim_useNim" $checkBoxValue;
	
	$draftEnable = `checkBox -q -value nim_submitDraftJob`;
	
	if($draftEnable == 1){
		checkBox -e -enable $checkBoxValue nim_uploadDraftToNim;
		//checkBox -e -enable $checkBoxValue nim_encodeSRGB;
	}
	
	optionMenu -e -enable $checkBoxValue "nimTasks_optionMenu|OptionMenu";
	
}

//===============================================================================================================================================
// NIM DRAFT

//Gets a Draft Template file.
global proc GetNimDraftTemplate()
{
	//string $newDraftTemplate = SafeDeadlineCommand( "-SelectFilenameLoad \"" + `textFieldButtonGrp -q -text nim_DraftTemplate` + "\" \"Python Script Files (*.py)|*.py|All Files (*.*)|*.*\"" );
	string $newDraftTemplate = CallDeadlineCommand( "-SelectFilenameLoad \"" + `textFieldButtonGrp -q -text nim_DraftTemplate` + "\" \"Python Script Files (*.py)|*.py|All Files (*.*)|*.*\"" );
	
	if( $newDraftTemplate != "Action was cancelled by user" )
	{	
		textFieldButtonGrp -e -text $newDraftTemplate nim_DraftTemplate;
		UseNimDraftChanged();
	}
}

global proc UseNimDraftChanged()
{
	$enable = `checkBox -q -value nim_submitDraftJob`;
	$nimEnable = `checkBox -q -value useNim_checkBox`;
	$nimUpload = `checkBox -q -value nim_uploadDraftToNim`;
	$nimEncodeSRGB = `checkBox -q -value nim_encodeSRGB`;
	$nimDraftTemplate = `textFieldButtonGrp -q -text nim_DraftTemplate`;
	
	checkBox -e -enable ($enable && $nimEnable) nim_uploadDraftToNim;
	checkBox -e -enable ($enable) nim_encodeSRGB;
	textFieldButtonGrp -e -enable $enable nim_DraftTemplate;
	
	if( ! `attributeExists nim_UseDraft defaultRenderGlobals` )
		addAttr -shortName "nim_UseDraft" -longName "nim_UseDraft" -at long defaultRenderGlobals;	
	if( `attributeExists nim_UseDraft defaultRenderGlobals` ) setAttr "defaultRenderGlobals.nim_UseDraft" $enable;
	
	if( ! `attributeExists nim_UploadDraft defaultRenderGlobals` )
		addAttr -shortName "nim_UploadDraft" -longName "nim_UploadDraft" -at long defaultRenderGlobals;	
	if( `attributeExists nim_UploadDraft defaultRenderGlobals` ) setAttr "defaultRenderGlobals.nim_UploadDraft" $nimUpload;
	
	if( ! `attributeExists nim_DraftTemplate defaultRenderGlobals` )
		addAttr -shortName "nim_DraftTemplate" -longName "nim_DraftTemplate" -dt "string" defaultRenderGlobals;
	if( `attributeExists nim_DraftTemplate defaultRenderGlobals` ) setAttr "defaultRenderGlobals.nim_DraftTemplate" -type "string" $nimDraftTemplate;
	
	if( ! `attributeExists nim_EncodeSRGB defaultRenderGlobals` )
		addAttr -shortName "nim_EncodeSRGB" -longName "nim_EncodeSRGB" -at long defaultRenderGlobals;	
	if( `attributeExists nim_EncodeSRGB defaultRenderGlobals` ) setAttr "defaultRenderGlobals.nim_EncodeSRGB" $nimUpload;
	
}


// END NIM
//===============================================================================================================================================


//--------------------------------------------------------
// Browsing functions that call Deadline command.
//--------------------------------------------------------

// Set the project directory in the text field.
global proc SetProjectDir()
{
	global string $ProjectPathGrp;
	string $newdir = CallDeadlineCommand( "-getdirectory \"" + `textFieldButtonGrp -q -text $ProjectPathGrp` + "\"", false );
	if( $newdir != "" )
		textFieldButtonGrp -e -text $newdir $ProjectPathGrp;
	
	SavePersistentDeadlineOptions();
}

// Set the output image directory in the text field.
global proc SetImageDir()
{
	global string $ImageOutputPathGrp;
	string $newdir = CallDeadlineCommand( "-getdirectory \"" + `textFieldButtonGrp -q -text $ImageOutputPathGrp` + "\"", false );
	if( $newdir != "" )
		textFieldButtonGrp -e -text $newdir $ImageOutputPathGrp;
	
	SavePersistentDeadlineOptions();
}

// Set the startup script path in the text field.
global proc SetStartupScriptPath()
{
	global string $StartupScriptPathGrp;
	string $newpath = CallDeadlineCommand( "-SelectFilenameLoad \"" + `textFieldButtonGrp -q -text $StartupScriptPathGrp` + "\" \"Melscript Files (*.mel);;Python Files (*.py);;All files (*)\"", false );
	if( $newpath != "" )
		textFieldButtonGrp -e -text $newpath $StartupScriptPathGrp;
	
	SavePersistentDeadlineOptions();
}

// Set the mental ray export filename in the text field.
global proc SetMentalRayFilename()
{
	global string $MentalRayFilenameGrp;
	string $newFilename = CallDeadlineCommand( "-selectfilenamesave \"" + `textFieldButtonGrp -q -text $MentalRayFilenameGrp` + "\" \"Mental Ray Files (*.mi);;All Files (*)\"", false );
	if( $newFilename != "" )
		textFieldButtonGrp -e -text $newFilename $MentalRayFilenameGrp;
	
	SavePersistentDeadlineOptions();
}

global proc SetVRayFilename()
{
	global string $VRayFilenameGrp;
	string $newFilename = CallDeadlineCommand( "-selectfilenamesave \"" + `textFieldButtonGrp -q -text $VRayFilenameGrp` + "\" \"VRay Scene Files (*.vrscene);;All Files (*)\"", false );
	if( $newFilename != "" )
		textFieldButtonGrp -e -text $newFilename $VRayFilenameGrp;
	
	SavePersistentDeadlineOptions();
}

// Set the limit groups in the limit group field.
global proc SetLimitGroups()
{
	global string $LimitGroupGrp;
	string $newLimitGroups = CallDeadlineCommand( "-selectlimitgroups \"" + `textFieldButtonGrp -q -text $LimitGroupGrp` + "\"", false );
	print( "limit groups: " + $newLimitGroups + "\n" );
	if( $newLimitGroups != "Action was cancelled by user" )
		textFieldButtonGrp -e -text $newLimitGroups $LimitGroupGrp;
	
	SavePersistentDeadlineOptions();
}

// Set the dependencies in the job dependency field.
global proc SetDependencies()
{
	global string $DependenciesGrp;
	string $newDependencies = CallDeadlineCommand( "-selectdependencies \"" + `textFieldButtonGrp -q -text $DependenciesGrp` + "\"", false );
	if( $newDependencies != "Action was cancelled by user" )
		textFieldButtonGrp -e -text $newDependencies $DependenciesGrp;
	
	SavePersistentDeadlineOptions();
}

// Set the machine list in the machine list field.
global proc SetMachineList()
{
	global string $MachineListGrp;
	string $newMachineList = CallDeadlineCommand( "-selectmachinelist \"" + `textFieldButtonGrp -q -text $MachineListGrp` + "\"", false );
	if( $newMachineList != "Action was cancelled by user" )
		textFieldButtonGrp -e -text $newMachineList $MachineListGrp;
	
	SavePersistentDeadlineOptions();
}

// Set the job name to be the scene name.
global proc SetJobName()
{
	global string $JobNameGrp;
	string $newJobName = GetStrippedSceneFileName();
	textFieldButtonGrp -e -text $newJobName $JobNameGrp;
	
	SavePersistentDeadlineOptions();
}

//=================================================================
// SHOTGUN

//Pop a GUI prompting the user to enter in Shotgun info
global proc ConnectToShotgun()
{
	global string $ShotgunResultsBox;
	global string $SGInfoKeys[];
	global string $SGInfoValues[];
	global string $DeadlineRepositoryRoot;
	
	$sgResults = CallDeadlineCommand( "-ExecuteScript \"" + $DeadlineRepositoryRoot  + "/events/Shotgun/ShotgunUI.py\" Maya", false );
	
	string $tempJobInfo[];
	
	$tempJobInfo = stringToStringArray( $sgResults, "\n" );
	
	if( size( $tempJobInfo ) > 0 )
	{	
		clear $SGInfoKeys;
		clear $SGInfoValues;
		int $keyCount = 0;
		string $displayValues = "";
		
		for( $i = 0; $i < size( $tempJobInfo ); $i++ )
		{
			if ( match( ".*=", $tempJobInfo[ $i ] ) != "" )
			{
				string $tokens[];
				string $value = "";
				
				if ( tokenize( $tempJobInfo[ $i ], "=", $tokens ) > 1 )
					$value = $tokens[ 1 ];
			
				string $key = $tokens[ 0 ];
				
				if( $key == "VersionName" )
					textFieldGrp -e -enable true -text $value frw_ShotgunVersion;
				else if( $key == "Description" )
					textFieldGrp -e -enable true -text $value frw_ShotgunDescription;
				else
				{
					if( $key == "UserName" )
						$displayValues += "User Name: " + $value + "\n";
					else if( $key == "TaskName" )
						$displayValues += "Task Name: " + $value + "\n";
					else if( $key == "ProjectName" )
						$displayValues += "Project Name: " + $value + "\n";
					else if( $key == "EntityName" )
						$displayValues += "Entity Name: " + $value + "\n";
					else if( $key == "EntityType" )
						$displayValues += "Entity Type: " + $value + "\n";
					else if( $key == "DraftTemplate" )
						$displayValues += "DraftTemplate: " + $value + "\n";
					
					//put the key/value in the parallel arrays
					$keyCount++;
					stringArrayInsertAtIndex( $keyCount, $SGInfoKeys, $key );
					stringArrayInsertAtIndex( $keyCount, $SGInfoValues, $value );
				}
			}
		}
		
		if( $keyCount > 0 )
		{
			text -e -enable true frw_ShotgunDetailLabel;
			scrollField -e -enable true -text $displayValues $ShotgunResultsBox;
			checkBox -e -value true -enable true frw_useShotgun;
			SavePersistentDeadlineOptions();
			UseShotgunChanged();
		}
	}
}

global proc UseShotgunChanged()
{
	global string $ShotgunResultsBox;
	$enable = `checkBox -q -value frw_submitDraftJob`;
	$sgEnable = `checkBox -q -value frw_useShotgun`;
	
	checkBox -e -enable ($enable && $sgEnable) frw_uploadDraftToShotgun;
	button -e -enable ($enable && $sgEnable) frw_UseShotgunDataButton;
	
	textFieldGrp -e -enable $sgEnable frw_ShotgunVersion;
	textFieldGrp -e -enable $sgEnable frw_ShotgunDescription;
	scrollField -e -enable $sgEnable $ShotgunResultsBox;
}
//=================================================================


//=================================================================
// DRAFT

//Use values from Shotgun to fill out the Draft fields
global proc UseShotgunValues()
{
	global string $SGInfoKeys[];
	global string $SGInfoValues[];
	
	string $task = "";
	string $project = "";
	string $entity = "";
	
	for( $i = 0; $i < size( $SGInfoKeys ); $i++ )
	{
		if( $SGInfoKeys[ $i ] == "UserName" )
			textFieldGrp -e -text $SGInfoValues[ $i ] frw_DraftUser;
		else if( $SGInfoKeys[ $i ] == "DraftTemplate" )
			textFieldGrp -e -text $SGInfoValues[ $i ] frw_DraftTemplate;
		else if( $SGInfoKeys[ $i ] == "TaskName" )
			$task = $SGInfoValues[ $i ];
		else if( $SGInfoKeys[ $i ] == "ProjectName" )
			$project = $SGInfoValues[ $i ];
		else if( $SGInfoKeys[ $i ] == "EntityName" )
			$entity = $SGInfoValues[ $i ];
	}
	
	if( size( $task ) > 0 )
		textFieldGrp -e -text $task frw_DraftEntity;
	else if( size( $project ) > 0 && size( $entity ) > 0 )
		textFieldGrp -e -text ($project + " > " + $entity) frw_DraftEntity;
	
	textFieldGrp -e -text `textFieldGrp -q -text frw_ShotgunVersion` frw_DraftVersion;
}

//Gets a Draft Template file.
global proc GetDraftTemplate()
{
	string $newDraftTemplate = CallDeadlineCommand( "-SelectFilenameLoad \"" + `textFieldButtonGrp -q -text frw_DraftTemplate` + "\" \"Python Script Files (*.py);;All Files (*)\"", false );
	if( $newDraftTemplate != "Action was cancelled by user" )
	{	
		textFieldButtonGrp -e -text $newDraftTemplate frw_DraftTemplate;
		SavePersistentDeadlineOptions();
	}
}

global proc UseDraftChanged()
{
	$enable = `checkBox -q -value frw_submitDraftJob`;
	$sgEnable = `checkBox -q -value frw_useShotgun`;
	
	checkBox -e -enable ($enable && $sgEnable) frw_uploadDraftToShotgun;
	textFieldButtonGrp -e -enable $enable frw_DraftTemplate;
	textFieldGrp -e -enable $enable frw_DraftUser;
	textFieldGrp -e -enable $enable frw_DraftEntity;
	textFieldGrp -e -enable $enable frw_DraftVersion;
	textFieldGrp -e -enable $enable frw_DraftExtraArgs;
	button -e -enable ($enable && $sgEnable) frw_UseShotgunDataButton;
	
	SavePersistentDeadlineOptions();
}


//=================================================================

//---------------------------------------------------------
// Maya Helper Functions
//---------------------------------------------------------

// Returns the current version of Maya.
global proc float MayaVersion()
{
	float $version = getApplicationVersionAsFloat();
	if( $version < 2014 )
	{
		// Before 2014, getApplicationVersionAsFloat would parse `about -v`, which wouldn't include the .5 at the end of the Maya 2011.5 or 2013.5 releases.
		// This was fixed in 2014 by parsing `about -apiVersion`, so that's what we're doing here.
		int $apiVersion = `about -apiVersion`;
		$version = float($apiVersion) / 100.0;
	}
	return $version;
}

// Returns the current version of Maya as an integer.
global proc int IntMayaVersion()
{
	float $version = MayaVersion();
	return floor ( $version );
}

// Returns the current renderer.
global proc string GetCurrentRenderer()
{
	string $renderer = currentRenderer();
	if( $renderer == "_3delight" )
		$renderer = "3delight";
	return $renderer;
}

// Returns if we're using an older version of vray
global proc string IsOldVray()
{
	// This function contains 3 parameters in the new version, so if this eval
	// returns an error (ie: 1), then we know it's an old version of Vray.
	return catchQuiet( eval( "vrayTransformFilename( \"\", \"\", \"\" )" ) );
}

// Returns the output prefix as is shown in the Render Globals, except that the frame
// number is replaced with '?' padding.
//global proc string GetOutputPrefix( int $replaceFrameNumber, int $newFrameNumber )
global proc string GetOutputPrefix( int $replaceFrameNumber, int $newFrameNumber, string $layerName, string $cameraName )
{
	string $outputPrefix = "";
	string $paddingString = "";
	
	string $renderer = GetCurrentRenderer();
	if( $renderer == "vray" )
	{
		// Need to special case vray, because they like to do things differently.
		global string $g_vrayImgExt[];
		
		string $ext = "";
		if (`optionMenuGrp -exists vrayImageFormatMenu`)
			$ext = `optionMenuGrp -q -v vrayImageFormatMenu`;
		else
			$ext = `getAttr vraySettings.imageFormatStr`;
		
		// VRay can append this to the end of the render settings display, but we don't want it in the file name.
		int $isMultichannelExr = false;
		string $multichannel = " (multichannel)";
		if( endsWith( $ext, $multichannel ) )
		{
			$ext = substring( $ext, 1, size( $ext ) - size( $multichannel ) );
			$isMultichannelExr = true;
		}

		// We need to use eval because the definition of vrayTransformFilename is different for
		// different versions of vray, and this is the only way to get around the "incorrect
		// number of arguments" error.
		string $prefix = `getAttr vraySettings.fileNamePrefix`;
		
		/*
		if( IsOldVray() )
			$prefix = eval( "vrayTransformFilename( \"" + $prefix + "\", \"\" )" );
		else
			$prefix = eval( "vrayTransformFilename( \"" + $prefix + "\", \"\", \"\" )" );
		*/
		
		// Don't transform if the prefix is blank, so we can just default to the scene file name.
		if( $prefix != "" )
		{
			if( !catchQuiet( eval( "vrayTransformFilename( \"\", \"\", \"\", 0, 0 )" ) ) )
			{
				// Vray strips off all extensions in the scene name when replacing the <Scene> tag.
				string $sceneName = GetStrippedSceneFileName();
				$sceneName = `basenameEx $sceneName`;
				$prefix = eval( "vrayTransformFilename( \"" + $prefix + "\", \"" + $cameraName + "\", \"" + $sceneName + "\", 0, 0 )" );
			}
			else if( !catchQuiet( eval( "vrayTransformFilename( \"\", \"\", \"\", 0 )" ) ) )
			{
				// Vray strips off all extensions in the scene name when replacing the <Scene> tag.
				string $sceneName = GetStrippedSceneFileName();
				$sceneName = `basenameEx $sceneName`;
				$prefix = eval( "vrayTransformFilename( \"" + $prefix + "\", \"" + $cameraName + "\", \"" + $sceneName + "\", 0 )" );
			}
			else if( !catchQuiet( eval( "vrayTransformFilename( \"\", \"\", \"\" )" ) ) )
				$prefix = eval( "vrayTransformFilename( \"" + $prefix + "\", \"\", \"\" )" );
			else if( !catchQuiet( eval( "vrayTransformFilename( \"\", \"\" )" ) ) )
				$prefix = eval( "vrayTransformFilename( \"" + $prefix + "\", \"\" )" );
			else
				print( "Could not evaluate output path using vrayTransformFilename, please contact Deadline support and include the version of vray you are using\n" );
		}
		
		//if( catchQuiet( eval( "vrayTransformFilename( \"" + $prefix + "\", \"\", \"\" )" ) ) )
		//{
		//	if( catchQuiet( eval( "vrayTransformFilename( \"" + $prefix + "\", \"\" )" ) ) )
		//		$prefix = `getAttr vraySettings.fileNamePrefix`;
		//}
		
		if( $prefix == "" )
			$prefix = GetStrippedSceneFileName();
		
		if( IsAnimatedOn() )
		{
			// Seems to be a bug where no matter what, VRay will use 4 digits for padding.
			// If ever fixed, try using the value from the vray settings.
			//int $padding = `getAttr vraySettings.fileNamePadding`;
			int $padding = 4;
			for( $i = 0; $i < $padding; $i ++ )
				$paddingString = $paddingString + "#";
			
			// When rendering to a non-raw format, vray places a period before the padding, even though it
			// doesn't show up in the render globals filename.
			if( $ext == "vrimg" || $isMultichannelExr )
				$outputPrefix = $prefix + $paddingString + "." + $ext;
			else
				$outputPrefix = $prefix + "." + $paddingString + "." + $ext;
		}
		else
		{
			// When rendering to a non-raw format, vray places a period before the padding, even though it
			// doesn't show up in the render globals filename.
			if( $ext == "vrimg" || $isMultichannelExr )
				$outputPrefix = $prefix + "." + $ext;
			else
				$outputPrefix = $prefix + "." + $ext;
		}
	}
	else
	{
		int $paddingFound = 0;
		
		// Get the first output prefix.
		string $prefixString = "";
		if( $renderer == "renderMan" )
		{
			$prefixString = `rmanGetImageName 1`;
		}
		else if($renderer == "MayaKrakatoa")
		{
			//string $prefixes[] = `renderSettings -fin`;
			string $prefixes[] = `renderSettings -fin -lyr $layerName -cam $cameraName`;
			$prefixString = $prefixes[0];
			
			int $forceEXROutput = `getAttr "MayaKrakatoaRenderSettings.forceEXROutput"`;
			if($forceEXROutput == 1)
			{
				string $tokens[];
				tokenize $prefixString "." $tokens;
				string $result = "";
				int $i;
				
				for($i = 0; $i<size($tokens)-1; $i++)
				{
					$result += $tokens[$i] + ".";
				}
				$prefixString = $result + "exr";
			}
		}
		else
		{
			//string $prefixes[] = `renderSettings -fin`;
			string $prefixes[] = `renderSettings -fin -lyr $layerName -cam $cameraName`;
			$prefixString = $prefixes[0];
		}
	
		// Go through each letter of the prefix and create a new prefix with each letter
		// separated by colons, ie: f:i:l:e:n:a:m:e:.:e:x:t:
		string $prefixWithColons = "";
		for( $i = 1; $i <= size( $prefixString ); $i++ )
			$prefixWithColons += substring( $prefixString, $i, $i ) + ":";
	
		// Now split up the new prefix into an array, which removes all the colons and
		// places one letter in each index. Then count backwards and replace the first
		// group of numbers with the padding characters.
		string $prefix[] = stringToStringArray( $prefixWithColons, ":" );
		
		if( IsAnimatedOn() )
		{
			for( $i = size( $prefix ); $i > 0; $i-- )
			{
				if( match( "[0-9]", $prefix[$i] ) != "" )
				{
					$prefix[$i] = "#";
					$paddingString = $paddingString + "#";
					$paddingFound = 1;
				}
				else if( $paddingFound )
					break;
			}
		}
	
		// Finally, convert the prefix array back to a string.
		$outputPrefix = stringArrayToString( $prefix, "" );
	}
	
	if( IsAnimatedOn() && $replaceFrameNumber )
	{
		string $paddedFrame = "" + $newFrameNumber;
		while( size($paddedFrame) < size($paddingString) )
			$paddedFrame = "0" + $paddedFrame;
		$outputPrefix = substituteAllString( $outputPrefix, $paddingString, $paddedFrame );
	}
	
	return $outputPrefix;
}

// Creates a tile prefix from the given prefix by placing the tile part at the
// beginning of the filename. It's placed at the beginning to try and avoid as
// many conflicts as possible with Maya's prefix shortcuts.
global proc string GetTileOutputPrefix( string $outputPrefix, int $x, int $y, int $xCount, int $yCount )
{
	string $path = dirname( $outputPrefix );
	if( $path != "" )
		$path = $path + "/";
	
	string $base = basename( $outputPrefix, "" );
	string $tile = "_tile_" + $x + "x" + $y + "_" + $xCount + "x" + $yCount + "_";
	return $path + $tile + $base;
}

global proc string GetMayaOutputPrefix( string $currCamera )
{
	global string $DeadlineRepositoryRoot;
	
	string $prefix = "";
	
	// Source a CustomOutputPrefix.mel file, if it exists.
	string $outputPrefixPath = CheckSlashes( $DeadlineRepositoryRoot + "/submission/Maya/Main/CustomOutputPrefix.mel" );
	if( `file -q -exists $outputPrefixPath` )
	{
		print( "sourcing custom outputprefix file: " + $outputPrefixPath + "\n" );
		eval( "source \"" + $outputPrefixPath + "\";" );
		$prefix = GetCustomMayaOutputPrefix( $currCamera );
	}
	else
	{
		string $renderer = GetCurrentRenderer();
		if( $renderer != "vray" )
			$prefix = `getAttr defaultRenderGlobals.imageFilePrefix`;
		else
			$prefix = `getAttr vraySettings.fileNamePrefix`;
		
		if( $prefix == "" )
			$prefix = GetStrippedSceneFileName();
	}
	
	return $prefix;
}

// Gets the image directory for Maya.
global proc string GetImageDirectory()
{
	string $imageDir = "";
	
	// The -renderType flag is obsolete in 2013 and later.
	if( IntMayaVersion() <= 2012 )
	{
		// Relative path, get the project's image directory.
		string $fileRules[] = `workspace -q -renderType`;
		
		for( $i = 0; $i < size( $fileRules ); $i += 2 )
		{
			if( $fileRules[$i] == "images" )
			{
				$imageDir = $fileRules[$i+1];
				break;
			}
		}
	}
	else
	{
		// Relative path, get the project's image directory.
		$imageDir = `workspace -q -fileRuleEntry "images"`;
	}

	string $path = `workspace -q -fullName`;
	if( substring( $path, size( $path ), size( $path ) ) != "\\" && substring( $path, size( $path ), size( $path ) ) != "/" )
		$path = $path + "/";

	if( $imageDir == "" )
		return $path;

	if( substring( $imageDir, size( $imageDir ), size( $imageDir ) ) != "\\" && substring( $imageDir, size( $imageDir ), size( $imageDir ) ) != "/" )
		$imageDir = $imageDir + "/";
	
	// Check for an absolute path in the image directory.
	if( substring( $imageDir, 1, 1 ) == "/" || substring( $imageDir, 1, 1 ) == "\\" || substring( $imageDir, 2, 2 ) == ":" )
		$path = $imageDir;
	else
		$path = $path + $imageDir;
		
	return $path;
}


// Returns frame range and by step count.
global proc int[] GetFrameRange()
{
	int	$range[3] = { 0, 0, 1 };
	
	if( IsAnimatedOn() )
	{
		//string $renderer = GetCurrentRenderer();	
		//if( $renderer != "vray" )
		//{
			$range[0] = `getAttr defaultRenderGlobals.startFrame`;
			$range[1] = `getAttr defaultRenderGlobals.endFrame`;
			$range[2] = `getAttr defaultRenderGlobals.byFrameStep`;
		//}
		//else
		//{
		//	$range[0] = `getAttr vraySettings.startFrame`;
		//	$range[1] = `getAttr vraySettings.endFrame`;
		//	$range[2] = `getAttr vraySettings.frameStep`;
		//}
	}
	else
	{
		$range[0] = `currentTime -q`;
		$range[1] = `currentTime -q`;
		$range[2] = 1;
	}
	
	return $range;
}

// Returns global resolution.
global proc int[] GetGlobalsResolution()
{
	int	$res[2] = { 320, 240 };
	
	string $renderer = GetCurrentRenderer();
	if( $renderer != "vray" )
	{
		string $globals[] = `ls -renderGlobals`;
		if( size( $globals[0] ) > 0 )
		{
			string $connect[] = `listConnections ($globals[0] + ".resolution")`;
			if( size( $connect[0] ) > 0 )
			{
				$res[0] = `getAttr ( $connect[0] + ".width" )`;
				$res[1] = `getAttr ( $connect[0] + ".height" )`;
			}
		}
	}
	else
	{
		$res[0] = `getAttr vraySettings.width`;
		$res[1] = `getAttr vraySettings.height`;
	}
	
	return $res;
}

// Returns if animation is enabled.
global proc int IsAnimatedOn()
{
	string $renderer = GetCurrentRenderer();
	
	int $anim = false;
	/*
	if( $renderer == "vray" )
	{
		if( IsOldVray() )
			$anim = `getAttr vraySettings.animation`;
		else
			$anim = `getAttr defaultRenderGlobals.animation`;
	}
	else
	*/
		$anim = `getAttr defaultRenderGlobals.animation`;
	
	return $anim;
}

// Returns if motion blur is enabled.
global proc int GetMotionBlur()
{
	string $renderer = GetCurrentRenderer();
	
	int $mb = false;
	if( $renderer == "mentalRay" )
		$mb = `getAttr miDefaultOptions.motionBlur`;
	else if( $renderer == "mayaHardware" || $renderer == "mayaHardware2" )
		$mb = `getAttr hardwareRenderGlobals.enableMotionBlur`;
	else if( $renderer == "mayaVector" )
		$mb = false;
	else if( $renderer == "turtle" )
		$mb = `getAttr TurtleRenderOptions.motionBlur`;
	else if( $renderer == "renderMan" )
		$mb = `getAttr renderManGlobals.rman__torattr___motionBlur`;
	else if( $renderer == "finalRender" )
		$mb = `getAttr defaultFinalRenderSettings.motionBlur`;
	else if( $renderer == "vray" )
		$mb = `getAttr vraySettings.cam_mbOn`;
	else
		$mb = `getAttr defaultRenderGlobals.motionBlur`;
	
	return $mb;
}

// Returns if render layers is on.
global proc int IsRenderLayersOn()
{
	int $layers = false;
	
	int $goodRLCounter = 0;
	string $renderLayers[] = `ls -exactType "renderLayer"`;
	for( $item in $renderLayers )
	{
		int $isReferenceLayer = `referenceQuery -inr $item`;
		if( !$isReferenceLayer )
		{
			if( `gmatch $item "defaultRenderLayer"` == 1 )
				$goodRLCounter++; // This is THE defaultRenderLayer, so count it.
			else if( `gmatch $item "*defaultRenderLayer*"` != 1 )
				$goodRLCounter++; // This is a user render layer, count it.
		}
	}

	if( $goodRLCounter > 1 )
		$layers = true;

	return $layers;
}

global proc int IsDefaultCamera( string $cameraName )
{
	if( $cameraName == "frontShape" || $cameraName == "perspShape" || $cameraName == "sideShape" || $cameraName == "topShape" )
		return true;
	else if( $cameraName == "front" || $cameraName == "persp" || $cameraName == "side" || $cameraName == "top" )
		return true;
	else
		return false;
}

global proc int IsCameraRenderable( string $cameraName )
{
	print( "Checking if camera is renderable: " + $cameraName + "\n" );
	
	string $relatives[] = `listRelatives -s $cameraName`;
	string $cameraShape = $relatives[0];
	
	int $cameraRenderable = 0;
	
	// Getting the renderable attribute can throw an error if there are duplicate camera shape names.
	// The catch blocks are to prevent these erros so that the submission can continue.
	if( !catch(`attributeExists "renderable" $cameraShape`) )
		catch($cameraRenderable = `getAttr( $cameraShape + ".renderable" )`);
	
	return $cameraRenderable;
}

/*
global proc int AreMultipleCamerasRenderable()
{
	int $renderableCount = 0;
	
	string $cameraList[] = `ls -cameras`;
	int $camCount = `size $cameraList`;
	for( $n = 1 ; $n <= $camCount; $n++ )
	{
		if( `getAttr( $cameraList[ $n - 1 ] + ".renderable" )` )
			$renderableCount = $renderableCount + 1;
	}
	
	return ($renderableCount > 1);
}
*/

// Returns if the renderer supports region rendering.
global proc int SupportsRegionRendering( string $renderer )
{
	if( $renderer == "arnold" || $renderer == "mayaSoftware" ||  $renderer == "mentalRay" ||  $renderer == "renderMan" || $renderer == "finalRender" || $renderer == "turtle" || $renderer == "vray" )
		return true;
	return false;
}

// Returns if the renderer supports the CPU option.
global proc int EnableCpuOption( string $renderer )
{
	if( IsRenderLayersOn() )
		return true;
	else
	{
		if( $renderer == "mayaSoftware" || $renderer == "mentalRay" || $renderer == "renderMan" || $renderer == "finalRender" || $renderer == "gelato" || $renderer == "maxwell" || $renderer == "vray" )
			return true;
	}
	
	return false;
}

// Returns the cpu count selected for the current render (if any).
global proc int GetCpuSetting( string $renderer )
{
	if( $renderer == "mayaSoftware" )
	{
		int $cpus = `getAttr defaultRenderGlobals.numCpusToUse`;
		if( $cpus > 0 )
			return $cpus;
	}
	else if( $renderer == "maxwell" )
	{
		int $cpus = `getAttr "maxwellRenderOptions.numThreads"`;
		if( $cpus > 0 )
			return $cpus;
	}
	else if( $renderer == "vray" )
	{
		int $cpus = `getAttr( "vraySettings.sys_max_threads" )`;
		if( $cpus > 0 )
			return $cpus;
	}
	
	return 0;
}

// Returns if the renderer supports half frame rendering.
global proc int ShowHalfFramesOption( string $renderer )
{
	if( !IsRenderLayersOn() )
	{
		if( $renderer == "renderman" || $renderer == "vray" )
			return false;
	}
	
	return true;
}

// Opens the mental ray export settings dialog.
global proc OpenExportSettings()
{
	fileOptions "ExportAll" "projectViewer ExportAll";
}

// Launches the Maya online help
global proc OnlineHelp()
{
	CallDeadlineCommand( "-startprocess http://www.thinkboxsoftware.com/support/", false );
}

//--------------------------------------------------------
// Utility Functions
// --------------------------------------------------------

// Waits for a fixed amount of time (in milliseconds)
global proc Wait( int $waitTime )
{
	$startTime = `timerX`;
	
	while (`timerX -startTime $startTime` * 1000 < $waitTime )
	{ /* Do nothing... weeeee! */ }
}

// Returns the filename with the path and extension stripped off.
global proc string StripPathAndExt( string $fullFileName )
{
	string $fileNameNoPath = match( "[^/\\]*$", $fullFileName );
	string $fileNameOnly = match( "[^\.]*", $fileNameNoPath );
	
	return $fileNameOnly;
}

global proc string GetStrippedSceneFileName()
{
	string $fileName =`file -q -sceneName`;
	$fileName = `basename $fileName ".mb"`;
	$fileName = `basename $fileName ".ma"`;
	
	return $fileName;
}

// Ensures that all slashes are consistent throughout the filename.
global proc string CheckSlashes( string $filename )
{
	//string $result = substituteAllString( $filename, "\\", "/" ); // switch from '\' to '/'
	//$result = substituteAllString( $result, "//", "/" ); // replace double '/' where paths may have been combined
	//if( startsWith( $result, "/" ) )
	//	$result = "/" + $result;
	//return $result;
	
	string $result = $filename;
	string $newResult;
	$newResult = `substitute "\\\\" $result "/"`;
	while( $newResult != $result )
	{
		$result = $newResult;
		$newResult = `substitute "\\\\" $result "/"`;
	}
	
	$result = $newResult;
	$newResult = `substitute "//" $result "/"`;
	while( $newResult != $result )
	{
		$result = $newResult;
		$newResult = `substitute "//" $result "/"`;
	}
	
	if( `about -ntOS` )
	{
		if( startsWith( $newResult, "/" ) )
			$newResult = "/" + $newResult;
	}
	
	return $newResult;
}

// Returns true if the path is on the c:, d:, or e:.
global proc int IsLocalDrive( string $path )
{
	if( size( $path ) > 0 )
	{
		if( ( substring( $path, 1, 1) == "C" || substring( $path, 1, 1) == "c" ) ||
			( substring( $path, 1, 1) == "D" || substring( $path, 1, 1) == "d" ) ||
			( substring( $path, 1, 1) == "E" || substring( $path, 1, 1) == "e" ) )
		{
			return true;
		}
	}

	return false;
}

// Calls deadlinecommand and returns the output from the command.
global proc string CallDeadlineCommand( string $command, int $showProgress )
{
	string $tempDir = `internalVar -userTmpDir`;
	string $result = "";
	
	if( $showProgress )
		waitCursor -state on;
	
	print( "running deadline command: " + $command + "\n" );
	
	//sets the progress bar to 33%... since we can't really adjust the bar while it's loading
	if( $showProgress && `progressBar -exists frw_progBar` )
		progressBar -edit -progress (`progressBar -query -maxValue frw_progBar` / 3) frw_progBar;
	
	string $deadlineBin = "";
	string $deadlineCommandString = "";
	string $prevPath = "";
	if( `about -macOS` )
	{
		$deadlineCommandString = "deadlinecommand";
		
		string $deadlineBinPath = "/Users/Shared/Thinkbox/DEADLINE_PATH";
		if( `filetest -f $deadlineBinPath` )
		{
			int $fileId = fopen( $deadlineBinPath, "r" );
			$deadlineBin = fread( $fileId, $result );
			fclose( $fileId );
			
			$deadlineBin = strip( $deadlineBin );
			$deadlineCommandString = "\"" + $deadlineBin + "/deadlinecommand\"" + " 2> /dev/null";
		}
		
		$deadlineCommandString = $deadlineCommandString + " " + $command;
	}
	else if( `about -nt` )
	{
		$deadlineBin = `getenv "DEADLINE_PATH"`;
		$deadlineCommandString = "call \"" + $deadlineBin + "\\deadlinecommand.exe\" " + $command + " 2> nul";
		
		//Need to set the PATH, cuz windows 8 seems to load DLLs from the PATH earlier that cwd....
		$prevPath = `getenv "PATH"`;
		string $newPath = $deadlineBin + ";" + $prevPath;
		putenv "PATH" $newPath;
	}
	else
	{
		$deadlineBin = `getenv "DEADLINE_PATH"`;
		$deadlineCommandString = "\"" + $deadlineBin + "/deadlinecommand\" " + $command + " 2> /dev/null";
	}
	
	string $currDir = `pwd`;
	chdir $deadlineBin;
	$result = system( $deadlineCommandString );
	chdir $currDir;
	
	if( `about -nt` )
	{
		//restore the old PATH
		putenv "PATH" $prevPath;
	}
	
	$result = substituteAllString( $result, "\r", "" );
	
	//sets the progress bar to max (since we finished)
	if( $showProgress && `progressBar -exists frw_progBar` )
		progressBar -edit -progress `progressBar -query -maxValue frw_progBar` frw_progBar;
	
	string $resultArray[];
	$resultArray = stringToStringArray( $result, "\n" );
	//if( size($resultArray) > 2 && startsWith( $resultArray[2], "UNC paths are not supported." ) )
	if( size($resultArray) > 2 && ( startsWith( $resultArray[0], "'\\\\" ) || startsWith( $resultArray[0], "'//" ) ) )
	{
		int $tempResultArraySize = size($resultArray) - 3;
		string $tempResultArray[];
		for( $i = 0; $i < $tempResultArraySize; $i++ )
			$tempResultArray[$i] = $resultArray[$i+3];
		$result = stringArrayToString( $tempResultArray, "\n" );
	}
	
	if( endsWith( $result, "\n" ) )
		$result = substring( $result, 1, size( $result ) - 1 );
	
	if( $showProgress )
		waitCursor -state off;
	
	return $result;
}

//---------------------------------------------------------
// Functions for saving submission dialog options.
//---------------------------------------------------------

// Adds a string attribute.
global proc AddStringAttribute( string $attrName )
{
	if( ! `attributeExists $attrName defaultRenderGlobals` )
		addAttr -shortName $attrName -longName $attrName -dt "string" defaultRenderGlobals;
}

// Adds a long attribute.
global proc AddLongAttribute( string $attrName )
{
	if( ! `attributeExists $attrName defaultRenderGlobals` )
		addAttr -shortName $attrName -longName $attrName -at long defaultRenderGlobals;
}

//Adds a string array attribute
global proc AddStrArrayAttribute( string $attrName )
{
	if( !`attributeExists $attrName defaultRenderGlobals` )
		addAttr -shortName $attrName -longName $attrName -dt stringArray defaultRenderGlobals;
}

// Saves the persistent deadline options in the scene.
global proc SavePersistentDeadlineOptions()
{
	global string $ProjectPathGrp;
	global string $ImageOutputPathGrp;
	global string $StartupScriptPathGrp;
	global string $MentalRayFilenameGrp;
	global string $VRayFilenameGrp;
	global string $LimitGroupGrp;
	global string $DependenciesGrp;
	global string $MachineListGrp;
	global string $JobNameGrp;
	global string $ShotgunResultsBox;
	global string $SGInfoKeys[];
	global string $SGInfoValues[];
	
	string $renderer = GetCurrentRenderer();
	int $renderLayersEnabled = IsRenderLayersOn();

	AddStringAttribute( "deadlineJobName" );
	setAttr defaultRenderGlobals.deadlineJobName -type "string" `textFieldGrp -q -text frw_JobName`;
	
	AddStringAttribute( "deadlineJobComment" );
	setAttr defaultRenderGlobals.deadlineJobComment -type "string" `textFieldGrp -q -text frw_JobComment`;
	
	AddStringAttribute( "deadlineDepartment" );
	setAttr defaultRenderGlobals.deadlineDepartment -type "string" `textFieldGrp -q -text frw_Department`;

	AddStringAttribute( "deadlineGroup" );
	setAttr defaultRenderGlobals.deadlineGroup -type "string" `optionMenuGrp -q -value frw_Group`;
	
	AddStringAttribute( "deadlineJobPool" );
	setAttr defaultRenderGlobals.deadlineJobPool -type "string" `optionMenuGrp -q -value frw_deadlinePool`;
	
	AddStringAttribute( "deadlineJobSecondaryPool" );
	setAttr defaultRenderGlobals.deadlineJobSecondaryPool -type "string" `optionMenuGrp -q -value frw_deadlineSecondaryPool`;
	
	//AddLongAttribute( "deadlineUseOnlyPool" );
	//setAttr defaultRenderGlobals.deadlineUseOnlyPool `checkBox -q -v frw_poolMachinesOnly`;
	
	AddLongAttribute( "deadlineJobPriority" );
	setAttr defaultRenderGlobals.deadlineJobPriority `intSliderGrp -q -v frw_JobPriority`;
	
	AddLongAttribute( "deadlineLimitCount" );
	setAttr defaultRenderGlobals.deadlineLimitCount `intSliderGrp -q -v frw_LimitCount`;
	
	AddLongAttribute( "deadlineConcurrentTasks" );
	setAttr defaultRenderGlobals.deadlineConcurrentTasks `intSliderGrp -q -v frw_ConcurrentTasks`;
	
	AddLongAttribute( "deadlineSlaveTimeout" );
	setAttr defaultRenderGlobals.deadlineSlaveTimeout `intSliderGrp -q -v frw_SlaveTimeout`;
	
	AddLongAttribute( "deadlineMinSlaveTimeout" );
	setAttr defaultRenderGlobals.deadlineMinSlaveTimeout `intSliderGrp -q -v frw_MinSlaveTimeout`;
	
	AddStringAttribute( "deadlineLimitGroups" );
	setAttr defaultRenderGlobals.deadlineLimitGroups -type "string" `textFieldGrp -q -text frw_limitGroups`;
	
	AddStringAttribute( "deadlineMachineList" );
	setAttr defaultRenderGlobals.deadlineMachineList -type "string" `textFieldGrp -q -text frw_machineList`;
	
	AddLongAttribute( "deadlineIsBlacklist" );
	setAttr defaultRenderGlobals.deadlineIsBlacklist `checkBox -q -v frw_isBlacklist`;
	
	AddLongAttribute( "deadlineSubmitAsSuspended" );
	setAttr defaultRenderGlobals.deadlineSubmitAsSuspended `checkBox -q -v frw_submitAsSuspended`;
	
	//AddLongAttribute( "deadlineDeleteOnComplete" );
	//setAttr defaultRenderGlobals.deadlineDeleteOnComplete `checkBox -q -v frw_deleteOnComplete`;
	
	AddLongAttribute( "deadlineChunkSize" );
	setAttr defaultRenderGlobals.deadlineChunkSize `intSliderGrp -q -v frw_FrameGroup`;
	
	//AddStringAttribute( "deadlineOutputFilePath" );
	//setAttr defaultRenderGlobals.deadlineOutputFilePath -type "string" `textFieldButtonGrp -q -fiame $ImageOutputPathGrp`;
	
	AddLongAttribute( "deadlineSubmitMayaScene" );
	setAttr defaultRenderGlobals.deadlineSubmitMayaScene `checkBox -q -v frw_submitMayaScene`;
	
	//AddStringAttribute( "deadlineProjectPathOverride" );
	//setAttr defaultRenderGlobals.deadlineProjectPathOverride -type "string" `textFieldButtonGrp -q -text $ProjectPathGrp`;
	
	AddLongAttribute( "deadlineNumCPUs" );
	if( EnableCpuOption( $renderer ) )
		setAttr defaultRenderGlobals.deadlineNumCPUs `intSliderGrp -q -v frw_MaxCPUs`;
	
	AddLongAttribute( "deadlineSubmitEachRenderLayer" );
	if( $renderLayersEnabled )
		setAttr defaultRenderGlobals.deadlineSubmitEachRenderLayer `checkBox -q -v frw_submitEachRenderLayer`;
	
	AddLongAttribute( "deadlineOverrideLayerSettings" );
	if( $renderLayersEnabled )
		setAttr defaultRenderGlobals.deadlineOverrideLayerSettings `checkBox -q -v frw_overrideLayerSettings`;
	
	AddLongAttribute( "deadlineSubmitEachCamera" );
	setAttr defaultRenderGlobals.deadlineSubmitEachCamera `checkBox -q -v frw_submitEachCamera`;
	
	AddLongAttribute( "deadlineIgnoreDefaultCameras" );
	setAttr defaultRenderGlobals.deadlineIgnoreDefaultCameras `checkBox -q -v frw_ignoreDefaultCameras`;
	
	AddLongAttribute( "deadlineUseMayaBatchPlugin" );
	setAttr defaultRenderGlobals.deadlineUseMayaBatchPlugin `checkBox -q -v frw_useMayaBatchPlugin`;
	
	AddLongAttribute( "deadlineStrictErrorChecking" );
	setAttr defaultRenderGlobals.deadlineStrictErrorChecking `checkBox -q -v frw_strictErrorChecking`;
	
	AddLongAttribute( "deadlineLocalRendering" );
	setAttr defaultRenderGlobals.deadlineLocalRendering `checkBox -q -v frw_localRendering`;
	
	AddStringAttribute( "deadlineStartupScript" );
	setAttr defaultRenderGlobals.deadlineStartupScript -type "string" `textFieldGrp -q -text frw_startupScript`;
	
	AddStringAttribute( "deadlineMayaArgs" );
	setAttr defaultRenderGlobals.deadlineMayaArgs -type "string" `textFieldGrp -q -text frw_mayaArgs`;
	
	AddLongAttribute( "deadlineTilesInX" );
	setAttr defaultRenderGlobals.deadlineTilesInX `intSliderGrp -q -v frw_tilesInX`;
	
	AddLongAttribute( "deadlineTilesInY" );
	setAttr defaultRenderGlobals.deadlineTilesInY `intSliderGrp -q -v frw_tilesInY`;
	
	AddLongAttribute( "deadlineTileSingleJob" );
	setAttr defaultRenderGlobals.deadlineTileSingleJob `checkBox -q -v frw_submitTileSingleJob`;
	
	AddLongAttribute( "deadlineTileDependentJob" );
	setAttr defaultRenderGlobals.deadlineTileDependentJob `checkBox -q -v frw_submitTileDependentJob`;
	
	AddLongAttribute( "deadlineTileCleanupJob" );
	setAttr defaultRenderGlobals.deadlineTileCleanupJob `checkBox -q -v frw_submitTileCleanupJob`;
	
	AddLongAttribute( "deadlineTileUseDraft" );
	setAttr defaultRenderGlobals.deadlineTileUseDraft `checkBox -q -v frw_submitTileUseDraft`;
	
	AddLongAttribute( "deadlineTileErrorOnMissing" );
	setAttr defaultRenderGlobals.deadlineTileErrorOnMissing `checkBox -q -v frw_submitTileErrorOnMissing`;
	
	AddStringAttribute( "deadlineMentalRayFilename" );
	setAttr defaultRenderGlobals.deadlineMentalRayFilename -type "string" `textFieldButtonGrp -q -text $MentalRayFilenameGrp`;
	
	AddLongAttribute( "deadlineSubmitMentalRayJob" );
	setAttr defaultRenderGlobals.deadlineSubmitMentalRayJob `checkBox -q -v frw_submitMentalRayJob`;
	
	AddLongAttribute( "deadlineMentalRayThreads" );
	setAttr defaultRenderGlobals.deadlineMentalRayThreads `intSliderGrp -q -v frw_mentalRayThreads`;
	
	AddLongAttribute( "deadlineMentalRayOffset" );
	setAttr defaultRenderGlobals.deadlineMentalRayOffset `intSliderGrp -q -v frw_mentalRayOffset`;
	
	AddLongAttribute( "deadlineMentalRayLocalRendering" );
	setAttr defaultRenderGlobals.deadlineMentalRayLocalRendering `checkBox -q -v frw_mentalRayLocalRendering`;
	
	AddStringAttribute( "deadlineMentalRayArgs" );
	setAttr defaultRenderGlobals.deadlineMentalRayArgs -type "string" `textFieldGrp -q -text frw_mentalRayArgs`;
	
	AddStringAttribute( "deadlineVRayFilename" );
	setAttr defaultRenderGlobals.deadlineVRayFilename -type "string" `textFieldButtonGrp -q -text $VRayFilenameGrp`;
	
	AddLongAttribute( "deadlineSubmitVRayJob" );
	setAttr defaultRenderGlobals.deadlineSubmitVRayJob `checkBox -q -v frw_submitVRayJob`;
	
	AddLongAttribute( "deadlineVRayThreads" );
	setAttr defaultRenderGlobals.deadlineVRayThreads `intSliderGrp -q -v frw_vrayThreads`;
	
	AddLongAttribute( "deadlineSubmitVrimg2ExrJob" );
	setAttr defaultRenderGlobals.deadlineSubmitVrimg2ExrJob `checkBox -q -v frw_submitVrimg2ExrJob`;
	
	AddLongAttribute( "deadlineDeleteVrimgFiles" );
	setAttr defaultRenderGlobals.deadlineDeleteVrimgFiles `checkBox -q -v frw_deleteVrimgFiles`;
	
	AddLongAttribute( "deadlineExportPRManThreads" );
	setAttr defaultRenderGlobals.deadlineExportPRManThreads `intSliderGrp -q -v frw_exportPRManThreads`;
	
	AddLongAttribute( "deadlineSubmitPRManJob" );
	setAttr defaultRenderGlobals.deadlineSubmitPRManJob `checkBox -q -v frw_submitPRManJob`;
	
	AddLongAttribute( "deadlinePRManThreads" );
	setAttr defaultRenderGlobals.deadlinePRManThreads `intSliderGrp -q -v frw_prmanThreads`;
	
	AddStringAttribute( "deadlinePRManArgs" );
	setAttr defaultRenderGlobals.deadlinePRManArgs -type "string" `textFieldGrp -q -text frw_prmanArgs`;
	
	AddLongAttribute( "deadlineSubmitArnoldJob" );
	setAttr defaultRenderGlobals.deadlineSubmitArnoldJob `checkBox -q -v frw_submitArnoldJob`;
	
	AddLongAttribute( "deadlineArnoldThreads" );
	setAttr defaultRenderGlobals.deadlineArnoldThreads `intSliderGrp -q -v frw_arnoldThreads`;
	
	AddStringAttribute( "deadlineArnoldArgs" );
	setAttr defaultRenderGlobals.deadlineArnoldArgs -type "string" `textFieldGrp -q -text frw_arnoldArgs`;
	
	AddStringAttribute( "deadlineDraftTemplate" );
	setAttr defaultRenderGlobals.deadlineDraftTemplate -type "string" `textFieldButtonGrp -q -text frw_DraftTemplate`;
	
	AddStringAttribute( "deadlineDraftUser" );
	setAttr defaultRenderGlobals.deadlineDraftUser -type "string" `textFieldGrp -q -text frw_DraftUser`;
	
	AddStringAttribute( "deadlineDraftEntity" );
	setAttr defaultRenderGlobals.deadlineDraftEntity -type "string" `textFieldGrp -q -text frw_DraftEntity`;
	
	AddStringAttribute( "deadlineDraftVersion" );
	setAttr defaultRenderGlobals.deadlineDraftVersion -type "string" `textFieldGrp -q -text frw_DraftVersion`;
	
	AddStringAttribute( "deadlineDraftExtraArgs" );
	setAttr defaultRenderGlobals.deadlineDraftExtraArgs -type "string" `textFieldGrp -q -text frw_DraftExtraArgs`;
	
	AddLongAttribute( "deadlineUseDraft" );
	setAttr defaultRenderGlobals.deadlineUseDraft `checkBox -q -v frw_submitDraftJob`;

	AddLongAttribute( "deadlineUploadDraftToShotgun" );
	setAttr defaultRenderGlobals.deadlineUploadDraftToShotgun `checkBox -q -v frw_uploadDraftToShotgun`;

	AddStringAttribute( "deadlineSGDisplayInfo" );
	setAttr defaultRenderGlobals.deadlineSGDisplayInfo -type "string" `scrollField -q -text $ShotgunResultsBox`;
	AddStringAttribute( "deadlineSGVersionName" );
	setAttr defaultRenderGlobals.deadlineSGVersionName -type "string" `textFieldGrp -q -text frw_ShotgunVersion`;
	AddStringAttribute( "deadlineSGDescription" );
	setAttr defaultRenderGlobals.deadlineSGDescription -type "string" `textFieldGrp -q -text frw_ShotgunDescription`;
	
	AddStrArrayAttribute( "deadlineSGInfoKeys" );
	//this is a bit weird, but I haven't found a better way to do this, since it doesn't seem like you can just pass in the array itself...
	eval( "setAttr defaultRenderGlobals.deadlineSGInfoKeys -type stringArray `size $SGInfoKeys` \"" + `stringArrayToString $SGInfoKeys "\" \""` + "\"" );
	//setAttr defaultRenderGlobals.deadlineSGInfoKeys -type stringArray `size $SGInfoKeys` $SGInfoKeys; <------ DOESN'T WORK >:(
	AddStrArrayAttribute( "deadlineSGInfoValues" );
	//same as above...
	eval( "setAttr defaultRenderGlobals.deadlineSGInfoValues -type stringArray `size $SGInfoValues` \"" + `stringArrayToString $SGInfoValues "\" \""` + "\"" );
	//setAttr defaultRenderGlobals.deadlineSGInfoValues -type stringArray `size $SGInfoValues` $SGInfoValues; <------ Still doesn't work :(
	
	// Enable or disable some options based on current values.
	int $useMayaBatchPlugin = `checkBox -q -v frw_useMayaBatchPlugin`;
	textFieldGrp -edit -enable $useMayaBatchPlugin frw_startupScript;
	textFieldGrp -edit -enable (!$useMayaBatchPlugin) frw_mayaArgs;
	checkBox -edit -enable (!$useMayaBatchPlugin) frw_ignoreError211;
	
	if( $renderer == "mentalRay" )
	{
		AddLongAttribute( "deadlineMentalRayAutoMemoryLimit" );
		setAttr defaultRenderGlobals.deadlineMentalRayAutoMemoryLimit `checkBox -q -v frw_autoMemoryLimit`;
		
		AddLongAttribute( "deadlineMentalRayMemoryLimit" );
		setAttr defaultRenderGlobals.deadlineMentalRayMemoryLimit `intSliderGrp -q -v frw_memoryLimit`;

		int $autoMemoryLimit = `checkBox -q -v frw_autoMemoryLimit`;
		intSliderGrp -edit -enable (!$autoMemoryLimit) frw_memoryLimit;
	}
	
	if( $renderer == "vray" )
	{
		AddLongAttribute( "deadlineVrayAutoMemoryEnabled" );
		setAttr defaultRenderGlobals.deadlineVrayAutoMemoryEnabled `checkBox -q -v frw_vrayAutoMemoryEnabled`;
		
		AddLongAttribute( "deadlineVrayAutoMemoryBuffer" );
		setAttr defaultRenderGlobals.deadlineVrayAutoMemoryBuffer `intSliderGrp -q -v frw_vrayAutoMemoryBuffer`;
		
		checkBox -edit -enable $useMayaBatchPlugin frw_vrayAutoMemoryEnabled;
		
		int $vrayAutoMemoryEnabled = `checkBox -q -v frw_vrayAutoMemoryEnabled`;
		intSliderGrp -edit -enable ($useMayaBatchPlugin && $vrayAutoMemoryEnabled) frw_vrayAutoMemoryBuffer;
	}
	
	int $regionRendering = `checkBox -q -v frw_regionRendering`;
	int $animationEnabled = IsAnimatedOn();
	if( $renderLayersEnabled )
	{
		int $submitEachRenderLayer = `checkBox -q -v frw_submitEachRenderLayer`;
		checkBox -edit -enable $submitEachRenderLayer frw_regionRendering;
		checkBox -edit -enable $submitEachRenderLayer frw_overrideLayerSettings;
		
		int $layerOverride = `checkBox -q -v frw_overrideLayerSettings`;
		
		if( $submitEachRenderLayer )
			textFieldGrp -edit -enable ($animationEnabled && $layerOverride) frw_FrameList;
		else
			textFieldGrp -edit -enable $animationEnabled frw_FrameList;
		
		if( !$submitEachRenderLayer && $regionRendering )
		{
		   $regionRendering = false;
		   checkBox -edit -v $regionRendering frw_regionRendering;
		}
	}
	else
		textFieldGrp -edit -enable $animationEnabled frw_FrameList;
	
	int $submitEachCamera = `checkBox -q -v frw_submitEachCamera`;
	checkBox -edit -enable $submitEachCamera frw_ignoreDefaultCameras;
	
	intSliderGrp -edit -enable $regionRendering frw_tilesInX;
	intSliderGrp -edit -enable $regionRendering frw_tilesInY;
	
	checkBox -edit -enable $regionRendering frw_submitTileSingleJob;
	
	int $singleRegionRendering = `checkBox -q -v frw_submitTileSingleJob`;
	int $tileUseDraft = `checkBox -q -v frw_submitTileUseDraft`;
	intSliderGrp -edit -enable ($regionRendering && $singleRegionRendering) frw_tileSingleFrame;
	checkBox -edit -enable ($regionRendering && $singleRegionRendering) frw_submitTileDependentJob;
	checkBox -edit -enable ($regionRendering && $singleRegionRendering) frw_submitTileUseDraft;
	checkBox -edit -enable ($regionRendering && $singleRegionRendering && $tileUseDraft) frw_submitTileErrorOnMissing;
	
	int $assemblyRendering = `checkBox -q -v frw_submitTileDependentJob`;
	checkBox -edit -enable ($regionRendering && $singleRegionRendering && $assemblyRendering) frw_submitTileCleanupJob;
}

global proc UpdateJobType()
{
	global string $MayaRenderOptionsRollout;
	global string $MayaRenderOptionsArnoldRollout;
	global string $MayaRenderOptionsMentalRayRollout;
	global string $MayaRenderOptionsRedshiftRollout;
	global string $MayaRenderOptionsVRayRollout;
	global string $MayaRenderOptionsTileRollout;
	global string $MentalRayExportRollout;
	global string $MentalRayExportRenderJobRollout;
	global string $VrayExportRollout;
	global string $VrayExportRenderJobRollout;
	global string $VrayExportVrimgJobRollout;
	global string $RendermanExportRollout;
	global string $RendermanExportRenderJobRollout;
	global string $ArnoldExportRollout;
	global string $ArnoldExportRenderJobRollout;
	
	global int $MayaRenderJobType;
	global int $MentalRayExportJobType;
	global int $VRayExportJobType;
	global int $RendermanExportJobType;
	global int $ArnoldExportJobType;
	
	int $jobType = `optionMenuGrp -q -select frw_mayaJobType`;
	string $renderer = GetCurrentRenderer();
	
	frameLayout -edit -visible ($jobType == $MayaRenderJobType) $MayaRenderOptionsRollout;
	frameLayout -edit -visible ($jobType == $MayaRenderJobType && $renderer == "arnold") $MayaRenderOptionsArnoldRollout;
	frameLayout -edit -visible ($jobType == $MayaRenderJobType && $renderer == "mentalRay") $MayaRenderOptionsMentalRayRollout;
	frameLayout -edit -visible ($jobType == $MayaRenderJobType && $renderer == "redshift" ) $MayaRenderOptionsRedshiftRollout;
	frameLayout -edit -visible ($jobType == $MayaRenderJobType && $renderer == "vray") $MayaRenderOptionsVRayRollout;
	frameLayout -edit -visible ($jobType == $MayaRenderJobType) $MayaRenderOptionsTileRollout;
	
	frameLayout -edit -visible ($jobType == $MentalRayExportJobType ) $MentalRayExportRollout;
	frameLayout -edit -visible ($jobType == $MentalRayExportJobType ) $MentalRayExportRenderJobRollout;
	
	frameLayout -edit -visible ($jobType == $VRayExportJobType ) $VrayExportRollout;
	frameLayout -edit -visible ($jobType == $VRayExportJobType ) $VrayExportRenderJobRollout;
	frameLayout -edit -visible ($jobType == $VRayExportJobType ) $VrayExportVrimgJobRollout;
	
	frameLayout -edit -visible ($jobType == $RendermanExportJobType ) $RendermanExportRollout;
	frameLayout -edit -visible ($jobType == $RendermanExportJobType ) $RendermanExportRenderJobRollout;
	
	frameLayout -edit -visible ($jobType == $ArnoldExportJobType ) $ArnoldExportRollout;
	frameLayout -edit -visible ($jobType == $ArnoldExportJobType ) $ArnoldExportRenderJobRollout;
}

//---------------------------------------------------------
// Functions for job submission.
//---------------------------------------------------------

// Creates the submission files and submits the job to Deadline.
proc string WriteJobFilesAndSubmit( string $renderer, int $showDialog, int $regionRendering, int $jobType, string $cameraOverride )
{
	global string $DeadlineSubmitterWindow;
	global string $StartupScriptPathGrp;
	global int $MayaRenderJobType;
	global int $MentalRayExportJobType;
	global int $VRayExportJobType;
	global int $RendermanExportJobType;
	global int $ArnoldExportJobType;
	
	// Get the deadline temp directory.
	string $tempDir = CallDeadlineCommand( "-GetCurrentUserHomeDirectory", false ) + "/temp";
	
	// Get the output file path and prefix.
	string $outputFilePath = CheckSlashes( `textFieldGrp -q -text frw_outputFilePath` );
	string $mentalRayFilename = CheckSlashes( `textFieldGrp -q -text frw_mentalRayFilePath` );
	string $vrayFilename = CheckSlashes( `textFieldGrp -q -text frw_vrayFilePath` );
	
	// Get some initial settings.
	string $jobName = `textFieldGrp -q -text frw_JobName`;
	string $frameList = `textFieldGrp -q -text frw_FrameList`;
	
	$overrideLayerSettings = `checkBox -q -value frw_overrideLayerSettings`;
	
	// Append the render layer name to the job name if the submit each render layer check is on.
	string $currentRenderLayer = "";
	int $submitEachRenderLayer = false;
	if( IsRenderLayersOn() )
	{
		$submitEachRenderLayer = `checkBox -q -value frw_submitEachRenderLayer`;
		
		if( $jobType == $MayaRenderJobType && $submitEachRenderLayer )
		{
			$currentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
			
			if($overrideLayerSettings)
			{
				$jobField = "frw_JobName_" + $currentRenderLayer;
				$jobName = `textFieldGrp -q -text $jobField`;
			}
			else
				$jobName += " - " + $currentRenderLayer;
			
			int $range[] = GetFrameRange();
			int $fromFrame = $range[0];
			int $toFrame = $range[1];
			int $byFrame = $range[2];
			
			$frameList = $fromFrame + "-" + $toFrame;
			if( $byFrame > 1 )
				$frameList = $frameList + "x" + $byFrame;
		}
	}
	
	// Get region rendering settings.
	int $regionLeft = 0;
	int $regionTop = 0; 
	int $regionRight = 0; 
	int $regionBottom = 0;
	int $currX = 0;
	int $currY = 0;
	int $currTile = 0;
	
	int $tilesInX = `intSliderGrp -q -v frw_tilesInX`;
	int $tilesInY = `intSliderGrp -q -v frw_tilesInY`;
	
	int $singleRegionJob = `checkBox -q -v frw_submitTileSingleJob`;
	int $singleRegionFrame = `intSliderGrp -q -v frw_tileSingleFrame`;
	int $singleRegionTiles = 0;
	string $singleRegionLeft = "";
	string $singleRegionTop = "";
	string $singleRegionRight = "";
	string $singleRegionBottom = "";
	string $singleRegionPrefix = "";
	
	// Append tile information to job name if doing a region render.
	if( $jobType == $MayaRenderJobType && $regionRendering )
	{
		if( !$singleRegionJob )
		{
			if( `attributeExists deadlineRegionLeft defaultRenderGlobals` ) $regionLeft = `getAttr defaultRenderGlobals.deadlineRegionLeft`;
			if( `attributeExists deadlineRegionTop defaultRenderGlobals` ) $regionTop = `getAttr defaultRenderGlobals.deadlineRegionTop`;
			if( `attributeExists deadlineRegionRight defaultRenderGlobals` ) $regionRight = `getAttr defaultRenderGlobals.deadlineRegionRight`;
			if( `attributeExists deadlineRegionBottom defaultRenderGlobals` ) $regionBottom = `getAttr defaultRenderGlobals.deadlineRegionBottom`;
			if( `attributeExists deadlineCurrX defaultRenderGlobals` ) $currX = `getAttr defaultRenderGlobals.deadlineCurrX`;
			if( `attributeExists deadlineCurrY defaultRenderGlobals` ) $currY = `getAttr defaultRenderGlobals.deadlineCurrY`;
			if( `attributeExists deadlineCurrTile defaultRenderGlobals` ) $currTile = `getAttr defaultRenderGlobals.deadlineCurrTile`;
			
			$jobName += " (Tile " + $currTile + " : " + $currX + "x" + $currY + " of " + $tilesInX + "x" + $tilesInY + ")";
		}
		else
		{
			if( `attributeExists deadlineRegionSingleTiles defaultRenderGlobals` ) $singleRegionTiles = `getAttr defaultRenderGlobals.deadlineRegionSingleTiles`;
			if( `attributeExists deadlineRegionSingleLeft defaultRenderGlobals` ) $singleRegionLeft = `getAttr defaultRenderGlobals.deadlineRegionSingleLeft`;
			if( `attributeExists deadlineRegionSingleTop defaultRenderGlobals` ) $singleRegionTop = `getAttr defaultRenderGlobals.deadlineRegionSingleTop`;
			if( `attributeExists deadlineRegionSingleRight defaultRenderGlobals` ) $singleRegionRight = `getAttr defaultRenderGlobals.deadlineRegionSingleRight`;
			if( `attributeExists deadlineRegionSingleBottom defaultRenderGlobals` ) $singleRegionBottom = `getAttr defaultRenderGlobals.deadlineRegionSingleBottom`;
			if( `attributeExists deadlineRegionSinglePrefix defaultRenderGlobals` ) $singleRegionPrefix = `getAttr defaultRenderGlobals.deadlineRegionSinglePrefix`;
			
			$jobName += " (Frame " + $singleRegionFrame + " - " + $singleRegionTiles + " Tiles)";
		}
	}
	
	// Figure out the camera to use (if specified).
	string $camera = "";
	if( $cameraOverride != "" )
		$camera = $cameraOverride;
	else
	{
		string $selectedCamera = `optionMenuGrp -q -value frw_camera`;
		string $cameraNames[] = `listTransforms -cameras`;
		for( $cameraName in $cameraNames )
		{
			if( $cameraName == $selectedCamera )
			{
				$camera = $selectedCamera;
				break;
			}
		}
	}
	
	// Create the job info file.
	string $submitFilename = CheckSlashes( $tempDir + "/maya_deadline_info.job" );
	$fileId = `fopen $submitFilename "w"`;
	if( $fileId == 0 )
		print( "Error in Deadline Submission Script: could not create " + $submitFilename + "\n" );
	
	int $useMayaBatchPlugin = `checkBox -q -v frw_useMayaBatchPlugin`;
	if( $useMayaBatchPlugin )
		fprint $fileId ( "Plugin=MayaBatch\n" );
	else
		fprint $fileId ( "Plugin=MayaCmd\n" );
	
	if( $camera != "" )
		$jobName = $jobName + " - " + $camera;
	
	fprint $fileId ( "Name=" + $jobName + "\n" );
	fprint $fileId ( "Comment=" + `textFieldGrp -q -text frw_JobComment` + "\n" );
	fprint $fileId ( "Pool=" + `optionMenuGrp -q -value frw_deadlinePool` + "\n" );
	fprint $fileId ( "SecondaryPool=" + `optionMenuGrp -q -value frw_deadlineSecondaryPool` + "\n" );
	fprint $fileId ( "MachineLimit=" + `intSliderGrp -q -v frw_LimitCount` + "\n" );
	fprint $fileId ( "Priority=" + `intSliderGrp -q -v frw_JobPriority` + "\n" );
	fprint $fileId ( "OnJobComplete=" + `optionMenuGrp -q -value frw_onComplete` + "\n" );
	fprint $fileId ( "TaskTimeoutMinutes=" + `intSliderGrp -q -v frw_SlaveTimeout` + "\n" );
	fprint $fileId ( "MinRenderTimeMinutes=" + `intSliderGrp -q -v frw_MinSlaveTimeout` + "\n" );
	fprint $fileId ( "ConcurrentTasks=" + `intSliderGrp -q -v frw_ConcurrentTasks` + "\n" );
	fprint $fileId ( "Department=" + `textFieldGrp -q -text frw_Department` + "\n" );
	fprint $fileId ( "Group=" + `optionMenuGrp -q -value frw_Group` + "\n" );
	fprint $fileId ( "LimitGroups=" + `textFieldGrp -q -text frw_limitGroups` + "\n" );
	fprint $fileId ( "JobDependencies=" + `textFieldGrp -q -text frw_dependencies` + "\n" );
	
	if( `checkBox -q -value frw_isBlacklist` )
		fprint $fileId ( "Blacklist=" + `textFieldGrp -q -text frw_machineList` + "\n" );
	else
		fprint $fileId ( "Whitelist=" + `textFieldGrp -q -text frw_machineList` + "\n" );
	
	if( `checkBox -q -value frw_submitAsSuspended` )
		fprint $fileId ( "InitialStatus=Suspended\n" );
	
	if( $jobType == $MayaRenderJobType )
	{
		int $counter = 0;
		if( IsRenderLayersOn() && !$submitEachRenderLayer )
		{
			// Store the currently selected render layer
			string $currentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
			string $renderLayerList[] = `ls -exactType "renderLayer"`;
			
			// Loop through the render layer if the checkbox is on
			for( $i = 0; $i < size( $renderLayerList ); $i++ )
			{
				// Only get output if this is not a referenced layer
				int $isReferenceLayer = `referenceQuery -inr $renderLayerList[$i]`;
				if( !$isReferenceLayer )
				{
					// Only get output if the renderable attribute is on
					int $renderable = `getAttr( $renderLayerList[$i] + ".renderable" )`;
					if( $renderable )
					{
						// Select the render layer to make sure the render settings are updated
						if( !catch(`editRenderLayerGlobals -currentRenderLayer $renderLayerList[$i]`) )
						{
							string $tempOutputFilePath = $outputFilePath;
							if( $renderer == "renderMan" )
							{
								$tempOutputFilePath = `rmanGetImageDir`;
								string $tempCurrentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
								if( `gmatch $tempCurrentRenderLayer "defaultRenderLayer"` == 1 )
									$tempOutputFilePath = $tempOutputFilePath + "/masterLayer";
								else
									$tempOutputFilePath = $tempOutputFilePath + "/" + $tempCurrentRenderLayer;
							}
							
							if( $camera != "" )
							{
								string $outputPrefix = CheckSlashes( GetOutputPrefix( 0, 0, $renderLayerList[$i], $camera ) );
								
								if( $jobType == $MayaRenderJobType && $regionRendering )
								{
									if( !$singleRegionJob )
										$outputPrefix = GetTileOutputPrefix( $outputPrefix, $currX, $currY, $tilesInX, $tilesInY );
									else
										$outputPrefix = GetOutputPrefix( 1, $singleRegionFrame, $renderLayerList[$i], $camera );
								}
								
								fprint $fileId ( "OutputFilename" + $counter + "=" + CheckSlashes( $tempOutputFilePath + "/" + $outputPrefix ) + "\n" );
								$counter++;
							}
							else
							{
								string $cameraNames[] = `listTransforms -cameras`;
								for( $cameraName in $cameraNames )
								{
									//string $relatives[] = `listRelatives -s $cameraName`;
									//string $cameraShape = $relatives[0];

									//if( !IsDefaultCamera( $cameraShape ) )
									{
										//if( `getAttr( $cameraShape + ".renderable" )` )
										if( IsCameraRenderable( $cameraName ) )
										{
											string $outputPrefix = CheckSlashes( GetOutputPrefix( 0, 0, $renderLayerList[$i], $cameraName ) );
											
											if( $jobType == $MayaRenderJobType && $regionRendering )
											{
												if( !$singleRegionJob )
													$outputPrefix = GetTileOutputPrefix( $outputPrefix, $currX, $currY, $tilesInX, $tilesInY );
												else
													$outputPrefix = GetOutputPrefix( 1, $singleRegionFrame, $renderLayerList[$i], $cameraName );
											}
											
											fprint $fileId ( "OutputFilename" + $counter + "=" + CheckSlashes( $tempOutputFilePath + "/" + $outputPrefix ) + "\n" );
											$counter++;
										}
									}
								}
							}
						}
					}
				}
			}
			
			// Reselect the current render layer
			editRenderLayerGlobals -currentRenderLayer $currentRenderLayer;
		}
		else
		{
			string $tempOutputFilePath = $outputFilePath;
			if( $renderer == "renderMan" )
			{
				$tempOutputFilePath = `rmanGetImageDir`;
				if( IsRenderLayersOn() && $submitEachRenderLayer )
				{
					string $currentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
					if( `gmatch $currentRenderLayer "defaultRenderLayer"` == 1 )
						$tempOutputFilePath = $tempOutputFilePath + "/masterLayer";
					else
						$tempOutputFilePath = $tempOutputFilePath + "/" + $currentRenderLayer;
				}
			}
			
			if( $camera != "" )
			{
				string $outputPrefix = CheckSlashes( GetOutputPrefix( 0, 0, $currentRenderLayer, $camera ) );
				
				if( $jobType == $MayaRenderJobType && $regionRendering )
				{
					if( !$singleRegionJob )
						$outputPrefix = GetTileOutputPrefix( $outputPrefix, $currX, $currY, $tilesInX, $tilesInY );
					else
						$outputPrefix = GetOutputPrefix( 1, $singleRegionFrame, $currentRenderLayer, $camera );
				}
				
				fprint $fileId ( "OutputFilename" + $counter + "=" + CheckSlashes( $tempOutputFilePath + "/" + $outputPrefix ) + "\n" );
				$counter++;
			}
			else
			{
				string $cameraNames[] = `listTransforms -cameras`;
				for( $cameraName in $cameraNames )
				{
					//string $relatives[] = `listRelatives -s $cameraName`;
					//string $cameraShape = $relatives[0];
									
					//if( !IsDefaultCamera( $cameraShape ) )
					{
						//if( `getAttr( $cameraShape + ".renderable" )` )
						if( IsCameraRenderable( $cameraName ) )
						{
							string $outputPrefix = CheckSlashes( GetOutputPrefix( 0, 0, $currentRenderLayer, $cameraName ) );
							
							if( $jobType == $MayaRenderJobType && $regionRendering )
							{
								if( !$singleRegionJob )
									$outputPrefix = GetTileOutputPrefix( $outputPrefix, $currX, $currY, $tilesInX, $tilesInY );
								else
									$outputPrefix = GetOutputPrefix( 1, $singleRegionFrame, $currentRenderLayer, $cameraName );
							}
							
							fprint $fileId ( "OutputFilename" + $counter + "=" + CheckSlashes( $tempOutputFilePath + "/" + $outputPrefix ) + "\n" );
							$counter++;
						}
					}
				}
			}
		}
	}
	else if( $jobType == $MentalRayExportJobType )
	{
		fprint $fileId ( "OutputDirectory0=" + dirname( $mentalRayFilename ) + "\n" );
	}
	else if( $jobType == $VRayExportJobType )
	{
		fprint $fileId ( "OutputDirectory0=" + dirname( $vrayFilename ) + "\n" );
	}
	else if( $jobType == $RendermanExportJobType )
	{
		fprint $fileId ( "OutputDirectory0=" + CheckSlashes( `textFieldGrp -q -text frw_projectPath` + "/renderman/" + GetStrippedSceneFileName() ) + "\n" );
	}
	else if( $jobType == $ArnoldExportJobType )
	{
		fprint $fileId ( "OutputDirectory0=" + CheckSlashes( `textFieldGrp -q -text frw_projectPath` + "/data" ) + "\n" );
	}
	
	if( $jobType == $MayaRenderJobType && $regionRendering && $singleRegionJob )
	{
		//fprint $fileId ( "Frames=0-" + ($singleRegionTiles-1) + "\n" );
		//fprint $fileId ( "ChunkSize=1\n" );
		fprint $fileId ( "TileJob=True\n" );
		fprint $fileId ( "TileJobFrame=" + $singleRegionFrame + "\n" );
		fprint $fileId ( "TileJobTilesInX=" + $tilesInX + "\n" );
		fprint $fileId ( "TileJobTilesInY=" + $tilesInY + "\n" );
	}
	else
	{
		if( $jobType == $MayaRenderJobType && $submitEachRenderLayer )
		{
			if($overrideLayerSettings)
			{
				$currentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
				
				$field = "frw_FrameList_" + $currentRenderLayer;
				fprint $fileId ( "Frames=" + `textFieldGrp -q -text $field` + "\n" );
				
				$field = "frw_FrameGroup_" + $currentRenderLayer;
				fprint $fileId ( "ChunkSize=" + `intSliderGrp -q -v $field` + "\n" );
			}
			else
			{
				fprint $fileId ( "Frames=" + $frameList + "\n" );
				fprint $fileId ( "ChunkSize=" + `intSliderGrp -q -v frw_FrameGroup` + "\n" );
			}
		}
		else
		{
			fprint $fileId ( "Frames=" + $frameList + "\n" );
			
			// Regular renders and Arnold exports can be split across machines, but other exports (AFAIK) must be done on a single machine.
			if( $jobType == $MayaRenderJobType || $jobType == $ArnoldExportJobType )
				fprint $fileId ( "ChunkSize=" + `intSliderGrp -q -v frw_FrameGroup` + "\n" );
			else
				fprint $fileId ( "ChunkSize=100000\n" );
		}
	}
	
	if( $jobType == $MayaRenderJobType && $regionRendering && $useMayaBatchPlugin && $renderer == "vray" )
		fprint $fileId ( "ForceReloadPlugin=True\n" );
	
	$kvpIndex = 0;
	//============================================
	//  SHOTGUN
	if( `checkBox -q -v frw_useShotgun` )
	{
		global string $SGInfoKeys[];
		global string $SGInfoValues[];
		
		for( $i = 0; $i < size( $SGInfoKeys ); $i++ )
		{
			if ( $SGInfoKeys[ $i ] == "TaskName" )
				fprint $fileId ( "ExtraInfo0=" +  $SGInfoValues[ $i ] + "\n" );
			else if ( $SGInfoKeys[ $i ] == "ProjectName" )
				fprint $fileId ( "ExtraInfo1=" +  $SGInfoValues[ $i ] + "\n" );
			else if ( $SGInfoKeys[ $i ] == "EntityName" )
				fprint $fileId ( "ExtraInfo2=" +  $SGInfoValues[ $i ] + "\n" );
			else if ( $SGInfoKeys[ $i ] == "UserName" )
				fprint $fileId ( "ExtraInfo5=" +  $SGInfoValues[ $i ] + "\n" );
			else if ( $SGInfoKeys[ $i ] != "DraftTemplate" ) //DON'T put in the Draft template -- if we're doing Draft, let Draft put that stuff in
			{	
				fprint $fileId ( "ExtraInfoKeyValue" + $kvpIndex + "=" + $SGInfoKeys[ $i ] + "=" + $SGInfoValues[ $i ] + "\n" );
				$kvpIndex++;
			}
		}
		
		fprint $fileId ( "ExtraInfo3=" + `textFieldGrp -q -text frw_ShotgunVersion` + "\n" );
		fprint $fileId ( "ExtraInfo4=" + `textFieldGrp -q -text frw_ShotgunDescription` + "\n" );
	}
	//============================================
	
	
	//=================================================================================================
// NIM
	if( `checkBox -q -v useNim_checkBox` )
	{
		string $nim_jobName = `attributeExists nim_jobName defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_jobName` : "";
		string $nim_showName = `attributeExists nim_showName defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_showName` : "";
		string $nim_class = `attributeExists nim_class defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_class` : "";
		string $nim_name = `attributeExists nim_name defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_name` : "";
		string $nim_taskID = `attributeExists nim_taskID defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_taskID` : "";
		string $nim_fileID = `attributeExists nim_fileID defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_fileID` : "";
		string $nim_jobID = `attributeExists nim_jobID defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_jobID` : "";
		string $nim_job = "";
		
		if($nim_class == "SHOT")
		{
			$nim_job = $nim_jobName+":"+$nim_showName+":"+$nim_name;
			fprint $fileId ( "ExtraInfo0=" +  $nim_job + "\n" );
			fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=nimJob=" + $nim_job + "\n");
			$kvpIndex++;
			fprint $fileId ( "ExtraInfo1=" +  $nim_class + "\n" );
			fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=nimClass=" + $nim_class + "\n");
			$kvpIndex++;
			fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=nimTaskID=" + $nim_taskID + "\n");
			$kvpIndex++;
			fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=nimFileID=" + $nim_fileID + "\n");
			$kvpIndex++;
			fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=nimJobID=" + $nim_jobID + "\n");
			$kvpIndex++;
		}
		else if($nim_class == "ASSET")
		{
			$nim_job = $nim_jobName+":"+$nim_name;
			fprint $fileId ( "ExtraInfo0=" +  $nim_job + "\n" );
			fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=nimJob=" + $nim_job + "\n");
			$kvpIndex++;
			fprint $fileId ( "ExtraInfo1=" +  $nim_class + "\n" );
			fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=nimClass=" + $nim_class + "\n");
			$kvpIndex++;
			fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=nimTaskID=" + $nim_taskID + "\n");
			$kvpIndex++;
			fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=nimFileID=" + $nim_fileID + "\n");
			$kvpIndex++;
			fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=nimJobID=" + $nim_jobID + "\n");
			$kvpIndex++;
		}
		
	}
	if( `checkBox -q -v nim_submitDraftJob` )
	{
		fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftUsername=" + `textFieldGrp -q -text nim_DraftArtist` + "\n");
		$kvpIndex++;
		$nim_sceneName = basename(`file -q -sceneName`,"");
		fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftEntity=" + $nim_sceneName + "\n");
		$kvpIndex++;
		
		fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftTemplate=" + `textFieldButtonGrp -q -text nim_DraftTemplate` + "\n");
		$kvpIndex++;
		
		int $res[] = GetGlobalsResolution();
		fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftFrameWidth=" + $res[0] + "\n");
		$kvpIndex++;
		fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftFrameHeight=" + $res[1] + "\n");
		$kvpIndex++;
		
		if( `checkBox -q -value nim_uploadDraftToNim` && `checkBox -q -enable nim_uploadDraftToNim` )
		{
			fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftUploadToNim=True\n");
			$kvpIndex++;
		}
		else
		{
			fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftUploadToNim=False\n");
			$kvpIndex++;
		}
		
		if( `checkBox -q -value nim_encodeSRGB` && `checkBox -q -enable nim_encodeSRGB` )
		{
			fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftNimEncodeSRGB=True\n");
			$kvpIndex++;
		}
		else
		{
			fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftNimEncodeSRGB=False\n");
			$kvpIndex++;
		}

	}
// END NIM
//=================================================================================================

	if( `checkBox -q -v frw_submitDraftJob` )
	{	
		fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftTemplate=" + `textFieldButtonGrp -q -text frw_DraftTemplate` + "\n");
		$kvpIndex++;
		fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftUsername=" + `textFieldGrp -q -text frw_DraftUser` + "\n");
		$kvpIndex++;
		fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftEntity=" + `textFieldGrp -q -text frw_DraftEntity` + "\n");
		$kvpIndex++;
		fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftVersion=" + `textFieldGrp -q -text frw_DraftVersion` + "\n");
		$kvpIndex++;
		
		int $res[] = GetGlobalsResolution();
		fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftFrameWidth=" + $res[0] + "\n");
		$kvpIndex++;
		fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftFrameHeight=" + $res[1] + "\n");
		$kvpIndex++;
		
		if( `checkBox -q -value frw_uploadDraftToShotgun` && `checkBox -q -enable frw_uploadDraftToShotgun` )
			fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftUploadToShotgun=True\n");
		else
			fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftUploadToShotgun=False\n");
		$kvpIndex++;
		
		fprint $fileId ("ExtraInfoKeyValue" + $kvpIndex + "=DraftExtraArgs=" + `textFieldGrp -q -text frw_DraftExtraArgs` + "\n");
		$kvpIndex++;
	}
	
	fclose $fileId;
	
	// Create the plugin info file.
	string $jobFilename = CheckSlashes( $tempDir + "/maya_deadline_job.job" );
	$fileId = `fopen $jobFilename "w"`;
	if( $fileId == 0 )
		print( "Error in Deadline Submission Script: could not create " + $jobFilename + "\n" );
	
	// If animation is enabled.
	fprint $fileId ( "Animation=" + IsAnimatedOn() + "\n" );	
	
	if( $jobType == $MentalRayExportJobType )
	{
		fprint $fileId ( "Renderer=mentalRayExport\n" );
		fprint $fileId ( "UsingRenderLayers=false\n" );
		
		global string $gExportFilterCheckBoxes[];
		global string $gExportPathesCheckBoxes[];
		
		fprint $fileId ( "MentalRayExportfile=" + $mentalRayFilename + "\n" );
		fprint $fileId ( "MentalRayExportBinary=" + ((`radioButton -query -select MayatomrExport_Binary`) ? 1 : 0) + "\n" );
		fprint $fileId ( "MentalRayExportTabStop=" + ($tabstop = `intField -query -value MayatomrExport_TabSize`) + "\n" );
		
		int $perframe = 0;
		int $padframe = 0;
		if(`checkBoxGrp -query -value1 MayatomrExport_FilePerFrame`)
		{
			$perframe = `optionMenuGrp -q -select MayatomrExport_FrameExtension`;
			$padframe = `intFieldGrp -q -value1 MayatomrExport_FramePadding`;
			if ($padframe > 9)
				$padframe = 9;
		}
		
		fprint $fileId ( "MentalRayExportPerFrame=" + $perframe + "\n" );
		fprint $fileId ( "MentalRayExportPadFrame=" + $padframe + "\n" );
		fprint $fileId ( "MentalRayExportPerLayer=" + `checkBoxGrp -query -value1 MayatomrExport_FilePerLayer` + "\n" );
		
		$pathnames = "";
		if(`checkBoxGrp -query -value1 MayatomrExport_Pathes`)
		{
			for( $cnt=0; $cnt < size( $gExportPathesCheckBoxes ); $cnt++ )
				$pathnames += `optionMenuGrp -query -sl $gExportPathesCheckBoxes[$cnt]`;
		}
		else
			$pathnames = "n";
		
		fprint $fileId ( "MentalRayExportPathNames=" + $pathnames + "\n" );
		
		$fragment = (`optionMenuGrp -q -select MayatomrExport_Fragment`-1);
		fprint $fileId ( "MentalRayExportFragment=" + $fragment + "\n" );
		fprint $fileId ( "MentalRayExportFragmentMaterials=" + ((`checkBoxGrp -q -v1 MayatomrExport_FragmentMaterials`) ? 1 : 0) + "\n" );
		fprint $fileId ( "MentalRayExportFragmentShaders=" + ((`checkBoxGrp -q -v1 MayatomrExport_FragmentIncomingShdrs`) ? 1 : 0) + "\n" );
		fprint $fileId ( "MentalRayExportFragmentChildDag=" + ((`checkBoxGrp -q -v1 MayatomrExport_FragmentChildDag`) ? 1 : 0) + "\n" );
		fprint $fileId ( "MentalRayExportPassContributionMaps=" + ((`checkBoxGrp -q -v1 MayatomrExport_PassContributionMaps`) ? 1 : 0) + "\n" );
		fprint $fileId ( "MentalRayExportPassUserData=" + ((`checkBoxGrp -q -v1 MayatomrExport_PassUserData`) ? 1 : 0) + "\n" );
		
		$filter = "";
		if(`checkBoxGrp -query -value1 MayatomrExport_Filters`)
		{
			for($cnt=0; $cnt<size($gExportFilterCheckBoxes); $cnt++)
				$filter += (`checkBoxGrp -query -value1 $gExportFilterCheckBoxes[$cnt]`) ? "0" : "1";
		}
		
		fprint $fileId ( "MentalRayExportFilterString=" + $filter + "\n" );
	}
	else if( $jobType == $VRayExportJobType )
	{
		fprint $fileId ( "Renderer=vrayExport\n" );
		fprint $fileId ( "VRayExportFile=" + $vrayFilename + "\n" );
	}
	else if( $jobType == $RendermanExportJobType )
	{
		fprint $fileId ( "Renderer=rendermanExport\n" );
		fprint $fileId ( "MaxProcessors=" + `intSliderGrp -q -v frw_exportPRManThreads` + "\n" );
	}
	else if( $jobType == $ArnoldExportJobType )
	{
		fprint $fileId ( "Renderer=arnoldExport\n" );
	}
	else
	{
		fprint $fileId ( "Renderer=" + $renderer + "\n" );
		fprint $fileId ( "UsingRenderLayers=" + IsRenderLayersOn() + "\n" );
		fprint $fileId ( "RenderLayer=" + $currentRenderLayer + "\n" );
		
		int $renderHalfFrames = ShowHalfFramesOption( $renderer ) ? `checkBox -q -value frw_renderHalfFrames` : 0;
		fprint $fileId ( "RenderHalfFrames=" + $renderHalfFrames + "\n" );
		
		fprint $fileId ( "FrameNumberOffset=" + `intSliderGrp -q -v frw_frameNumberOffset` + "\n" );
		
		int $localRendering = `checkBox -q -value frw_localRendering`;
		fprint $fileId ( "LocalRendering=" + $localRendering + "\n" );
		
		int $strictErrorChecking = `checkBox -q -value frw_strictErrorChecking`;
		fprint $fileId ( "StrictErrorChecking=" + $strictErrorChecking + "\n" );
		
		if( $regionRendering )
		{
			fprint $fileId ( "RegionRendering=True\n" );
			if( !$singleRegionJob )
			{
				fprint $fileId ( "RegionLeft=" + $regionLeft + "\n" );
				fprint $fileId ( "RegionTop=" + $regionTop + "\n" );
				fprint $fileId ( "RegionRight=" + $regionRight + "\n" );
				fprint $fileId ( "RegionBottom=" + $regionBottom + "\n" );
			}
			else
			{
				//fprint $fileId ( "RegionSingleJob=True\n" );
				//fprint $fileId ( "RegionSingleFrame=" + $singleRegionFrame + "\n" );
				fprint $fileId ( $singleRegionLeft + "\n" );
				fprint $fileId ( $singleRegionTop + "\n" );
				fprint $fileId ( $singleRegionRight + "\n" );
				fprint $fileId ( $singleRegionBottom + "\n" );
				fprint $fileId ( $singleRegionPrefix + "\n" );
			}
		}
		
		if( EnableCpuOption( $renderer ) )
			fprint $fileId ( "MaxProcessors=" + `intSliderGrp -q -v frw_MaxCPUs` + "\n" );
		
		if( $renderer == "mayaSoftware" )
		{
			// render globals qualification
			string $rendQual[] = `listConnections defaultRenderGlobals.qual`;
			
			// get antialising quality level and turn it into a string
			string $strAntialiasing = "highest";
			int $intAntialiasing = `getAttr ($rendQual[0] + ".edgeAntiAliasing")`;
			if ( $intAntialiasing == 1 ) $strAntialiasing = "high";
			if ( $intAntialiasing == 2 ) $strAntialiasing = "medium";
			if ( $intAntialiasing == 3 ) $strAntialiasing = "low";
			
			fprint $fileId ( "AntiAliasing=" + $strAntialiasing + "\n" );
		}
		
		// Krakatoa options currently only supported by the MayaBatch plugin.
		if( $useMayaBatchPlugin && $renderer == "MayaKrakatoa")
		{
			string $boolVal = "";
			float $krakatoaFinalPassDensity = `getAttr "MayaKrakatoaRenderSettings.finalPassDensity"`;
			fprint $fileId ( "KrakatoaFinalPassDensity="+ $krakatoaFinalPassDensity + "\n" );
			
			int $krakatoaFinalPassDensityExponent = `getAttr "MayaKrakatoaRenderSettings.finalPassDensityExponent"`;
			fprint $fileId ( "KrakatoaFinalPassDensityExponent=" + $krakatoaFinalPassDensityExponent + "\n" );
			
			int $krakatoaUseLightingPassDensity = `getAttr "MayaKrakatoaRenderSettings.useLightingPassDensity"`;
			
			
			if($krakatoaUseLightingPassDensity == 1) { $boolVal = "True"; }
			else { $boolVal = "False"; }
			fprint $fileId ( "KrakatoaUseLightingPassDensity=" + $boolVal+ "\n" );
			
			float $krakatoaLightingDensity = `getAttr "MayaKrakatoaRenderSettings.lightingPassDensity"`;
			fprint $fileId ( "KrakatoaLightingPassDensity="+ $krakatoaLightingDensity + "\n" );
			
			int $krakatoaLightingDensityExponent = `getAttr "MayaKrakatoaRenderSettings.lightingPassDensityExponent"`;
			fprint $fileId ( "KrakatoaLightingPassDensityExponent=" + $krakatoaLightingDensityExponent + "\n" );
			
			int $krakatoaUseEmissionStrength = `getAttr "MayaKrakatoaRenderSettings.useEmissionStrength"`;
			if($krakatoaUseEmissionStrength == 1) { $boolVal = "True"; }
			else { $boolVal = "False"; }
			fprint $fileId ( "KrakatoaUseEmissionStrength=" + $boolVal + "\n" );
			
			float $krakatoaEmissionStrength = `getAttr "MayaKrakatoaRenderSettings.emissionStrength"`;
			fprint $fileId ( "KrakatoaEmissionStrength="+ $krakatoaEmissionStrength + "\n" );

			int $krakatoaEmissionStrengthExponent = `getAttr "MayaKrakatoaRenderSettings.emissionStrengthExponent"`;
			fprint $fileId ( "KrakatoaEmissionStrengthExponent=" + $krakatoaEmissionStrengthExponent + "\n" );
			
			int $krakatoaUseEmission = `getAttr "MayaKrakatoaRenderSettings.useEmission"`;
			if($krakatoaUseEmission == 1) { $boolVal = "True"; }
			else { $boolVal = "False"; }
			fprint $fileId ( "KrakatoaUseEmission=" + $boolVal + "\n" );
			
			int $krakatoaUseAbsorption = `getAttr "MayaKrakatoaRenderSettings.useAbsorption"`;
			if($krakatoaUseAbsorption == 1) { $boolVal = "True"; }
			else { $boolVal = "False"; }
			fprint $fileId ( "KrakatoaUseAbsorption=" + $boolVal + "\n" );
			
			int $krakatoaEnableMotionBlur = `getAttr "MayaKrakatoaRenderSettings.enableMotionBlur"`;
			if($krakatoaEnableMotionBlur == 1) { $boolVal = "True"; }
			else { $boolVal = "False"; }
			fprint $fileId ( "KrakatoaEnableMotionBlur=" + $boolVal + "\n" );
			
			int $krakatoaMotionBlurParticleSegments = `getAttr "MayaKrakatoaRenderSettings.motionBlurParticleSegments"`;
			fprint $fileId ( "KrakatoaMotionBlurParticleSegments=" + $krakatoaMotionBlurParticleSegments+ "\n" );
			
			int $krakatoaJitteredMotionBlur = `getAttr "MayaKrakatoaRenderSettings.jitteredMotionBlur"`;
			if($krakatoaJitteredMotionBlur == 1) { $boolVal = "True"; }
			else { $boolVal = "False"; }
			fprint $fileId ( "KrakatoaJitteredMotionBlur=" + $boolVal + "\n" );
			
			float $krakatoaShutterAngle = `getAttr "MayaKrakatoaRenderSettings.shutterAngle"`;
			fprint $fileId ( "KrakatoaShutterAngle="+ $krakatoaShutterAngle + "\n" );
			
			int $krakatoaEnableDOF = `getAttr "MayaKrakatoaRenderSettings.enableDOF"`;
			if($krakatoaEnableDOF == 1) { $boolVal = "True"; }
			else { $boolVal = "False"; }
			fprint $fileId ( "KrakatoaEnableDOF=" + $boolVal + "\n" );
			
			float $krakatoaSampleRateDOF = `getAttr "MayaKrakatoaRenderSettings.sampleRateDOF"`;
			fprint $fileId ( "KrakatoaSampleRateDOF="+ $krakatoaSampleRateDOF + "\n" );
			
			int $krakatoaEnableMatteObjects = `getAttr "MayaKrakatoaRenderSettings.enableMatteObjects"`;
			if($krakatoaEnableMatteObjects == 1) { $boolVal = "True"; }
			else { $boolVal = "False"; }
			fprint $fileId ( "KrakatoaEnableMatteObjects=" + $boolVal + "\n" );
			
			int $krakatoaEnableOverrideBG = `getAttr "MayaKrakatoaRenderSettings.overrideBG"`;
			if($krakatoaEnableOverrideBG == 1) { $boolVal = "True"; }
			else { $boolVal = "False"; }
			fprint $fileId ( "KrakatoaEnableOverrideBG=" + $boolVal + "\n" );
			
			//float $krakatoaBGOverride[] = `getAttr "MayaKrakatoaRenderSettings.backgroundColor"`;
			//fprint $fileId ( "KrakatoaBGOverride=" + $krakatoaBGOverride[0]+ " "+ $krakatoaBGOverride[1] + " " + $krakatoaBGOverride[2] + "\n" );
			
			int $krakatoaEnableOverrideColor = `getAttr "MayaKrakatoaRenderSettings.overrideColor"`;
			if($krakatoaEnableOverrideColor == 1) { $boolVal = "True"; }
			else { $boolVal = "False"; }
			fprint $fileId ( "KrakatoaEnableOverrideColor=" + $boolVal + "\n" );
			
			//float $krakatoaColorOverride[] = `getAttr "MayaKrakatoaRenderSettings.colorChannelOverride"`;
			//fprint $fileId ( "KrakatoaColorOverride=" + $krakatoaColorOverride[0]+ " "+ $krakatoaColorOverride[1] + " " + $krakatoaColorOverride[2] + "\n" );
			
			int $krakatoaEnableOverrideEmission = `getAttr "MayaKrakatoaRenderSettings.overrideEmission"`;
			if($krakatoaEnableOverrideEmission == 1) { $boolVal = "True"; }
			else { $boolVal = "False"; }
			fprint $fileId ( "KrakatoaEnableOverrideEmission=" + $boolVal + "\n" );
			
			//float $krakatoaEmissionOverride[] = `getAttr "MayaKrakatoaRenderSettings.emissionChannelOverride"`;
			//fprint $fileId ( "KrakatoaEmissionOverride=" + $krakatoaEmissionOverride[0]+ " "+ $krakatoaEmissionOverride[1] + " " + $krakatoaEmissionOverride[2] + "\n" );
			
			int $krakatoaEnableOverrideAbsorption = `getAttr "MayaKrakatoaRenderSettings.overrideAbsorption"`;
			if($krakatoaEnableOverrideAbsorption == 1) { $boolVal = "True"; }
			else { $boolVal = "False"; }
			fprint $fileId ( "KrakatoaEnableOverrideAbsorption=" + $boolVal+ "\n" );
			
			//float $krakatoaAbsorptionOverride[] = `getAttr "MayaKrakatoaRenderSettings.absorptionChannelOverride"`;
			//fprint $fileId ( "krakatoaAbsorptionOverride=" + $krakatoaAbsorptionOverride[0]+ " "+ $krakatoaAbsorptionOverride[1] + " " + $krakatoaAbsorptionOverride[2] + "\n" );
			
			string $krakatoaRenderingMethod = `getAttr -asString "MayaKrakatoaRenderSettings.renderingMethod"`;
			fprint $fileId ( "KrakatoaRenderingMethod="+ $krakatoaRenderingMethod + "\n" );
			
			if ($krakatoaRenderingMethod =="Voxels")
			{
				float $krakatoaVoxelSize = `getAttr "MayaKrakatoaRenderSettings.voxelSize"`;
				fprint $fileId ( "KrakatoaVoxelSize="+ $krakatoaVoxelSize + "\n" );
				
				float $krakatoaVoxelFilterRadius = `getAttr "MayaKrakatoaRenderSettings.voxelFilterRadius"`;
				fprint $fileId ( "KrakatoaVoxelFilterRadius="+ $krakatoaVoxelFilterRadius + "\n" );
			}
			
			int $krakatoaForceEXROutput = `getAttr "MayaKrakatoaRenderSettings.forceEXROutput"`;
			if($krakatoaForceEXROutput == 1) { $boolVal = "True"; }
			else { $boolVal = "False"; }
			fprint $fileId ( "KrakatoaForceEXROutput=" + $boolVal + "\n" );
			
		}
		
		if( $renderer == "arnold" )
		{
			string $arnoldVerbose = `optionMenuGrp -q -value frw_arnoldVerbose`;
			fprint $fileId ( "ArnoldVerbose=" + $arnoldVerbose + "\n" );
		}
			
		if( $renderer == "mentalRay" )
		{
			string $mentalRayVerbose = `optionMenuGrp -q -value frw_mentalRayVerbose`;
			fprint $fileId ( "MentalRayVerbose=" + $mentalRayVerbose + "\n" );
			
			int $autoMemoryLimit = `checkBox -q -value frw_autoMemoryLimit`;
			fprint $fileId ( "AutoMemoryLimit=" + $autoMemoryLimit + "\n" );
			
			int $memoryLimit = `intSliderGrp -q -v frw_memoryLimit`;
			fprint $fileId ( "MemoryLimit=" + $memoryLimit + "\n" );
		}
		
		if( $renderer == "redshift" )
		{
			int $redshiftGPUsPerTask = `intSliderGrp -q -v frw_redshiftGPUsPerTask`;
			fprint $fileId ( "RedshiftGPUsPerTask=" + $redshiftGPUsPerTask + "\n" );
		}
		
		if( $renderer == "vray" )
		{
			if( $useMayaBatchPlugin )
			{
				int $vrayAutoMemoryEnabled = `checkBox -q -value frw_vrayAutoMemoryEnabled`;
				fprint $fileId ( "VRayAutoMemoryEnabled=" + $vrayAutoMemoryEnabled + "\n" );
				
				int $vrayAutoMemoryBuffer = `intSliderGrp -q -v frw_vrayAutoMemoryBuffer`;
				fprint $fileId ( "VRayAutoMemoryBuffer=" + $vrayAutoMemoryBuffer + "\n" );
			}
		}
		
		if( $renderer == "maxwell" )
		{
			fprint $fileId ( "MaxwellRenderTime=" + `getAttr "maxwellRenderOptions.renderTime"` + "\n" );
			fprint $fileId ( "MaxwellSamplingLevel=" + `getAttr "maxwellRenderOptions.samplingLevel"` + "\n" );
			fprint $fileId ( "MaxwellResumeRender=false\n" );
		}
		
		if( $renderer == "OctaneRender" )
		{
			fprint $fileId ( "OctaneMaxSamples=" + `getAttr "octaneSettings.MaxSamples"` + "\n" );
		}
	}
	
	//fprint $fileId ( "Version=" + IntMayaVersion() + "\n" );
	fprint $fileId ( "Version=" + MayaVersion() + "\n" );
	
	string $mayaBuild = `optionMenuGrp -q -value frw_mayaBuild`;
	fprint $fileId ( "Build=" + $mayaBuild + "\n" );
	
	fprint $fileId ( "ProjectPath=" + CheckSlashes( `textFieldGrp -q -text frw_projectPath` ) + "\n" );
	if( !$useMayaBatchPlugin )
		fprint $fileId ( "CommandLineOptions=" + `textFieldGrp -q -text frw_mayaArgs` + "\n" );
	else
		fprint $fileId ( "StartupScript=" + `textFieldButtonGrp -q -text $StartupScriptPathGrp` + "\n" );
	
	int $res[] = GetGlobalsResolution();
	fprint $fileId ( "ImageWidth=" + $res[0] + "\n" );
	fprint $fileId ( "ImageHeight=" + $res[1] + "\n" );
	//if( $renderer != "vray" )
	//	fprint $fileId ( "AspectRatio=" + `getAttr "defaultResolution.deviceAspectRatio"` + "\n" );
	
	// Skip existing is only supported in 2014 and later, and by specific renderers.
	if( IntMayaVersion() >= 2014 && ($renderer == "mentalRay" || $renderer == "mayaSoftware" || $renderer == "mayaHardware" || $renderer == "mayaHardware2" || $renderer == "mayaVector") )
	{
		int $skipExistingFrames = `getAttr defaultRenderGlobals.skipExistingFrames`;
		fprint $fileId ( "SkipExistingFrames=" + $skipExistingFrames + "\n" );
	}
	
	fprint $fileId ( "OutputFilePath=" + $outputFilePath + "\n" );
	if( IsRenderLayersOn() && !$submitEachRenderLayer )
		fprint $fileId ( "OutputFilePrefix=\n" );
	else
	{
		string $mayaOutputFilePrefix = GetMayaOutputPrefix( $camera );
		if( $jobType == $MayaRenderJobType && $regionRendering )
		{
			$mayaOutputFilePrefix = GetTileOutputPrefix( $mayaOutputFilePrefix, $currX, $currY, $tilesInX, $tilesInY );
			if( $renderer == "renderMan" )
				$mayaOutputFilePrefix = "_" + $mayaOutputFilePrefix;
		}
		fprint $fileId ( "OutputFilePrefix=" + $mayaOutputFilePrefix + "\n" );	
	}
	
	//fprint $fileId ( "MotionBlur=" + GetMotionBlur() + "\n" );
		
	// If the user has specified a camera, make it the default
	fprint $fileId ( "Camera=" + $camera + "\n" );
	
	// Now list all the camera options
	fprint $fileId ("Camera0=\n");
	string $cameraNames[] = `listTransforms -cameras`;
	for( $n = 1 ; $n <= size($cameraNames); $n++ )
		fprint $fileId ( "Camera" + $n + "=" + $cameraNames[ $n - 1 ] + "\n" );
	
	string $sceneFilePath = CheckSlashes( `file -q -sceneName` );
	int $submitMayaSceneFile = `checkBox -q -value frw_submitMayaScene`;
	if( !$submitMayaSceneFile )
		fprint $fileId ( "SceneFile=" + $sceneFilePath + "\n" );
	
	int $ignoreError211 = `checkBox -q -value frw_ignoreError211`;
	fprint $fileId ( "IgnoreError211=" + $ignoreError211 + "\n" );
	
	fclose $fileId;
	
	
	// Submit the job to Deadline
	string $submissionCommand = "\"" + $submitFilename + "\" \"" + $jobFilename + "\"";
	if( $submitMayaSceneFile )
		$submissionCommand += " \"" + $sceneFilePath + "\"";
	
	string $submitResults = CallDeadlineCommand( $submissionCommand, true );
	
	// Get the job id to return
	string $jobId = "";
	string $resultArray[];
	$resultArray = stringToStringArray( $submitResults, "\n" );
	for( $n = 0; $n < size($resultArray); $n++ )
	{
		if( startsWith( $resultArray[$n], "JobID=" ) )
		{
			$jobId = substituteAllString( $resultArray[$n], "JobID=", "" );
			break;
		}
	}
	
	// Specify which renderer is being used.
	if( $jobType == $MentalRayExportJobType )
		$submitResults = $submitResults + "\n\nUsing renderer: mentalRayExport\n";
	else if( $jobType == $VRayExportJobType )
		$submitResults = $submitResults + "\n\nUsing renderer: vrayExport\n";
	else if( $jobType == $RendermanExportJobType )
		$submitResults = $submitResults + "\n\nUsing renderer: rendermanExport\n";
	else if( $jobType == $ArnoldExportJobType )
		$submitResults = $submitResults + "\n\nUsing renderer: arnoldExport\n";
	else
		$submitResults = $submitResults + "\n\nUsing renderer: " + $renderer + "\n";
	
	// Show results
	if( $showDialog )
		confirmDialog -title "Submission Results" -parent $DeadlineSubmitterWindow -message $submitResults -button "Ok";
	else
		print( "\n\nSubmission Results For Job " + $jobName + ":\n---------------------------------------------------------------------------\n" + $submitResults + "\n" );
	
	return $jobId;
}

proc int SetupDependentTileAssemblerJob( string $renderer, string $jobId, int $frameNumber, int $tilesInX, int $tilesInY, string $outputPrefix, string $currentRenderLayer, string $currCamera )
{
	string $jobName = `textFieldGrp -q -text frw_JobName`;
	if( $currentRenderLayer != "" )
		$jobName += " - " + $currentRenderLayer;
	if( $currCamera != "" )
		$jobName += " - " + $currCamera;
	
	$jobName = $jobName + "(Frame " + $frameNumber + " - Tile Assembly Job)";
	
	string $outputFilePath = CheckSlashes( `textFieldGrp -q -text frw_outputFilePath` );
	string $outputFilename = CheckSlashes( $outputFilePath  + "/" + $outputPrefix );
	
	string $inputPrefix = GetTileOutputPrefix( $outputPrefix, 1, 1, $tilesInX, $tilesInY );
	string $inputImageFilename = CheckSlashes( $outputFilePath  + "/" + $inputPrefix );
	
	string $tempDir = CallDeadlineCommand( "-GetCurrentUserHomeDirectory", false ) + "/temp";
	
	
	string $submitFilename = "";
	string $jobFilename = "";
	string $configFilename = "";
	int $useDraftTileAssembler = `checkBox -q -v frw_submitTileUseDraft`;
	
	if ($useDraftTileAssembler)
	{
		int $res[] = GetGlobalsResolution();
		int $width = $res[0];
		int $height = $res[1];;
		if( $renderer == "vray" )
			$height = $height - 0; // vray is very picky about the height. Not width for some reason.
	
		int $tilesInX = `intSliderGrp -q -v frw_tilesInX`;
		int $tilesInY = `intSliderGrp -q -v frw_tilesInY`; 
	
		int $deltaX = floor (1.0 * $width / $tilesInX );
		int $deltaY = floor (1.0 * $height / $tilesInY );
	
		int $totalTiles = $tilesInX * $tilesInY;
		int $currTile = 0;
		$submitFilename = CheckSlashes( $tempDir + "/draft_tile_deadline_info.job" );
		$fileId = `fopen $submitFilename "w"`;
		if( $fileId == 0 )
			print( "Error in Deadline Submission Script: could not create " + $submitFilename + "\n" );
	
		fprint $fileId ( "Plugin=DraftTileAssembler\n" );
		fprint $fileId ( "Name=" + $jobName + "\n" );
		fprint $fileId ( "Comment=" + `textFieldGrp -q -text frw_JobComment` + "\n" );
		fprint $fileId ( "Pool=" + `optionMenuGrp -q -value frw_deadlinePool` + "\n" );
		fprint $fileId ( "SecondaryPool=" + `optionMenuGrp -q -value frw_deadlineSecondaryPool` + "\n" );
		fprint $fileId ( "Priority=" + `intSliderGrp -q -v frw_JobPriority` + "\n" );
		fprint $fileId ( "OnJobComplete=" + `optionMenuGrp -q -value frw_onComplete` + "\n" );
		fprint $fileId ( "Department=" + `textFieldGrp -q -text frw_Department` + "\n" );
		fprint $fileId ( "Group=" + `optionMenuGrp -q -value frw_Group` + "\n" );
		fprint $fileId ( "OutputFilename0=" + $outputFilename + "\n" );
		fprint $fileId ( "JobDependencies=" + $jobId + "\n" );
		fprint $fileId ( "Frames=0\n" );
		fprint $fileId ( "ChunkSize=1\n" );
		fprint $fileId ( "MachineLimit=1\n" );
	
		if( `checkBox -q -value frw_isBlacklist` )
			fprint $fileId ( "Blacklist=" + `textFieldGrp -q -text frw_machineList` + "\n" );
		else
			fprint $fileId ( "Whitelist=" + `textFieldGrp -q -text frw_machineList` + "\n" );
	
		fclose $fileId;
		$jobFilename = CheckSlashes( $tempDir + "/draft_tile_deadline_job.job" );
		$fileId = `fopen $jobFilename "w"`;
		if( $fileId == 0 )
			print( "Error in Deadline Submission Script: could not create " + $jobFilename + "\n" );
		int $errorOnMissing = `checkBox -q -v frw_submitTileErrorOnMissing`;
		string $missing = $errorOnMissing ? "true" : "false";
		fprint $fileId ( "ErrorOnMissing=" +$missing+ "\n" );
		fprint $fileId ( "CleanupTiles=" + `checkBox -q -v frw_submitTileCleanupJob` + "\n" );
		fclose $fileId;
		
		string $base = basenameEx( $outputPrefix );
		string $dateString = `date -format "YYYY_MM_DD_hh_mm_ss"`;
		$configFilename = CheckSlashes( $outputFilePath  + "/"+$base+"_config_"+$dateString+".txt" );
		$fileId = `fopen $configFilename "w"`;
		if( $fileId == 0 )
			print( "Error in Deadline Submission Script: could not create " + $configFilename + "\n" );
		
		int $currTile = 0;
		fprint $fileId ( "TileCount=" +$totalTiles+ "\n" );
		fprint $fileId ( "ImageFileName=" + $outputFilename + "\n" );
		fprint $fileId ( "ImageWidth=" +$width+ "\n" );
		fprint $fileId ( "ImageHeight=" + $height + "\n" );
		if( $renderer == "mentalRay" || $renderer == "vray" )
		{
			fprint $fileId ( "TilesCropped=False\n" );
		}
		else
		{
			fprint $fileId ( "TilesCropped=True\n" );
		}
		for( $y = 1; $y <= $tilesInY; $y++ )
		{
			for( $x = 1; $x <= $tilesInX; $x++ )
			{
				int $newY = $tilesInY - $y;
						
				int $tempBottom;
				$tempBottom = ($deltaY * $newY);
								
				string $inputPrefix = GetTileOutputPrefix( $outputPrefix, $x, $y, $tilesInX, $tilesInY );
				string $inputImageFilename = CheckSlashes( $outputFilePath  + "/" + $inputPrefix );
				fprint $fileId ("Tile"+$currTile+"FileName="+$inputImageFilename+"\n");
				fprint $fileId ("Tile"+$currTile+"="+$inputImageFilename+"\n");
				fprint $fileId ( "Tile"+$currTile+"X="+($deltaX * ( $x - 1 ))+"\n" );
				fprint $fileId ( "Tile"+$currTile+"Y="+($tempBottom)+"\n" );
				fprint $fileId ( "Tile"+$currTile+"Width="+($deltaX)+"\n" );
				fprint $fileId ( "Tile"+$currTile+"Height="+($deltaY)+"\n" );
				$currTile++;
			}
		}
		fclose $fileId;
		
		
	}
	else
	{
		$submitFilename = CheckSlashes( $tempDir + "/tile_deadline_info.job" );
		$fileId = `fopen $submitFilename "w"`;
		if( $fileId == 0 )
			print( "Error in Deadline Submission Script: could not create " + $submitFilename + "\n" );
	
		fprint $fileId ( "Plugin=TileAssembler\n" );
		fprint $fileId ( "Name=" + $jobName + "\n" );
		fprint $fileId ( "Comment=" + `textFieldGrp -q -text frw_JobComment` + "\n" );
		fprint $fileId ( "Pool=" + `optionMenuGrp -q -value frw_deadlinePool` + "\n" );
		fprint $fileId ( "SecondaryPool=" + `optionMenuGrp -q -value frw_deadlineSecondaryPool` + "\n" );
		fprint $fileId ( "Priority=" + `intSliderGrp -q -v frw_JobPriority` + "\n" );
		fprint $fileId ( "OnJobComplete=" + `optionMenuGrp -q -value frw_onComplete` + "\n" );
		fprint $fileId ( "Department=" + `textFieldGrp -q -text frw_Department` + "\n" );
		fprint $fileId ( "Group=" + `optionMenuGrp -q -value frw_Group` + "\n" );
		fprint $fileId ( "OutputFilename0=" + $outputFilename + "\n" );
		fprint $fileId ( "JobDependencies=" + $jobId + "\n" );
		fprint $fileId ( "Frames=0\n" );
		fprint $fileId ( "ChunkSize=1\n" );
		fprint $fileId ( "MachineLimit=1\n" );
	
		if( `checkBox -q -value frw_isBlacklist` )
			fprint $fileId ( "Blacklist=" + `textFieldGrp -q -text frw_machineList` + "\n" );
		else
			fprint $fileId ( "Whitelist=" + `textFieldGrp -q -text frw_machineList` + "\n" );
	
		fclose $fileId;
	
		string $jobFilename = CheckSlashes( $tempDir + "/tile_deadline_job.job" );
		$fileId = `fopen $jobFilename "w"`;
		if( $fileId == 0 )
			print( "Error in Deadline Submission Script: could not create " + $jobFilename + "\n" );
	
		fprint $fileId ( "InputImages=" + $inputImageFilename + "\n" );
		fprint $fileId ( "CleanupTiles=" + `checkBox -q -v frw_submitTileCleanupJob` + "\n" );
		if( $renderer == "mentalRay" || $renderer == "vray" )
		{
			fprint $fileId ( "NotCropped=True\n" );
			fprint $fileId ( "IgnoreOverlap=True\n" );
		}
		else
		{
			fprint $fileId ( "NotCropped=False\n" );
			fprint $fileId ( "IgnoreOverlap=False\n" );
		}
		fclose $fileId;
	}
	
	// Submit the job to Deadline
	string $submissionCommand = "\"" + $submitFilename + "\" \"" + $jobFilename + "\" \""+$configFilename+"\"";
	string $submitResults = CallDeadlineCommand( $submissionCommand, true );
	// Show results
	print( "\n\nSubmission Results For Job " + $jobName + ":\n---------------------------------------------------------------------------\n" + $submitResults + "\n" );
	return 1;
}

// Sets some region rendering settings before submitting the job to Deadline.
proc int SetupRegionRenderingJob( string $renderer, string $cameraOverride )
{
	global int $MayaRenderJobType;
	
	int $submitCounter = 0;
	
	AddLongAttribute( "deadlineRegionLeft" );
	AddLongAttribute( "deadlineRegionTop" );
	AddLongAttribute( "deadlineRegionRight" );
	AddLongAttribute( "deadlineRegionBottom" );
	AddLongAttribute( "deadlineCurrX" );
	AddLongAttribute( "deadlineCurrY" );
	AddLongAttribute( "deadlineCurrTile" );
	
	AddStringAttribute( "deadlineRegionSingleLeft" );
	AddStringAttribute( "deadlineRegionSingleTop" );
	AddStringAttribute( "deadlineRegionSingleRight" );
	AddStringAttribute( "deadlineRegionSingleBottom" );
	AddStringAttribute( "deadlineRegionSinglePrefix" );
	AddLongAttribute( "deadlineRegionSingleTiles" );
	
	int $res[] = GetGlobalsResolution();
	int $width = $res[0];
	int $height = $res[1];
	if( $renderer == "vray" )
		$height = $height - 0; // vray is very picky about the height. Not width for some reason.
	
	int $tilesInX = `intSliderGrp -q -v frw_tilesInX`;
	int $tilesInY = `intSliderGrp -q -v frw_tilesInY`; 
	
	int $deltaX = floor (1.0 * $width / $tilesInX );
	int $deltaY = floor (1.0 * $height / $tilesInY );
	
	int $totalTiles = $tilesInX * $tilesInY;
	int $currTile = 0;
	
	string $camera = "";
	if( $cameraOverride != "" )
		$camera = $cameraOverride;
	else
	{
		string $selectedCamera = `optionMenuGrp -q -value frw_camera`;
		string $cameraNames[] = `listTransforms -cameras`;
		for( $cameraName in $cameraNames )
		{
			if( $cameraName == $selectedCamera )
			{
				$camera = $selectedCamera;
				break;
			}
		}
	}
	
	int $singleRegionJob = `checkBox -q -v frw_submitTileSingleJob`;
	if( !$singleRegionJob )
	{
		for( $y = 1; $y <= $tilesInY; $y++ )
		{
			for( $x = 1; $x <= $tilesInX; $x++ )
			{
				$currTile++;
				
				int $newY = $y;
				if( $renderer != "renderMan" && $renderer != "vray" && $renderer != "arnold" )
					$newY = $tilesInY - $y + 1;
				
				setAttr defaultRenderGlobals.deadlineRegionLeft ($deltaX * ( $x - 1 ));
				setAttr defaultRenderGlobals.deadlineRegionTop ($deltaY * ( $newY - 1 ));
				
				int $tempRight;
				if( $x == $tilesInX )
					$tempRight = $width - 1;
				else
					$tempRight = ($deltaX * $x) - 1;
				
				if( $renderer == "mentalRay" )
					$tempRight++;
				
				setAttr defaultRenderGlobals.deadlineRegionRight $tempRight;
				
				int $tempBottom;
				if( $newY == $tilesInY )
					$tempBottom = $height - 1;
				else
					$tempBottom = ($deltaY * $newY) - 1;
				
				if( $renderer == "mentalRay" )
					$tempBottom++;
				if( $renderer == "vray" )
					$tempBottom = $tempBottom + 2;
				
				setAttr defaultRenderGlobals.deadlineRegionBottom $tempBottom;
				
				setAttr defaultRenderGlobals.deadlineCurrX $x;
				setAttr defaultRenderGlobals.deadlineCurrY $y;
				setAttr defaultRenderGlobals.deadlineCurrTile $currTile;
				
				WriteJobFilesAndSubmit( $renderer, 0, 1, $MayaRenderJobType, $camera );
				
				$submitCounter++;
			}
		}
	}
	else
	{
		setAttr defaultRenderGlobals.deadlineRegionSingleLeft -type "string" "";
		setAttr defaultRenderGlobals.deadlineRegionSingleTop -type "string" "";
		setAttr defaultRenderGlobals.deadlineRegionSingleRight -type "string" "";
		setAttr defaultRenderGlobals.deadlineRegionSingleBottom -type "string" "";
		setAttr defaultRenderGlobals.deadlineRegionSinglePrefix -type "string" "";
		
		for( $y = 1; $y <= $tilesInY; $y++ )
		{
			for( $x = 1; $x <= $tilesInX; $x++ )
			{
				int $newY = $y;
				if( $renderer != "renderMan" && $renderer != "vray" && $renderer != "arnold" )
					$newY = $tilesInY - $y + 1;
				
				string $regionSingleLeft = `getAttr defaultRenderGlobals.deadlineRegionSingleLeft`;
				$regionSingleLeft += "RegionLeft" + $currTile + "=" + ($deltaX * ( $x - 1 )) + "\n";
				setAttr defaultRenderGlobals.deadlineRegionSingleLeft -type "string" $regionSingleLeft;
				
				string $regionSingleTop = `getAttr defaultRenderGlobals.deadlineRegionSingleTop`;
				$regionSingleTop += "RegionTop" + $currTile + "=" + ($deltaY * ( $newY - 1 )) + "\n";
				setAttr defaultRenderGlobals.deadlineRegionSingleTop -type "string" $regionSingleTop;
				
				int $tempRight;
				if( $x == $tilesInX )
					$tempRight = $width - 1;
				else
					$tempRight = ($deltaX * $x) - 1;
				
				if( $renderer == "mentalRay" )
					$tempRight++;
				
				string $regionSingleRight = `getAttr defaultRenderGlobals.deadlineRegionSingleRight`;
				$regionSingleRight += "RegionRight" + $currTile + "=" + $tempRight + "\n";
				setAttr defaultRenderGlobals.deadlineRegionSingleRight -type "string" $regionSingleRight;
				
				int $tempBottom;
				if( $newY == $tilesInY )
					$tempBottom = $height - 1;
				else
					$tempBottom = ($deltaY * $newY) - 1;
				
				if( $renderer == "mentalRay" )
					$tempBottom++;
				
				string $regionSingleBottom = `getAttr defaultRenderGlobals.deadlineRegionSingleBottom`;
				$regionSingleBottom += "RegionBottom" + $currTile + "=" + $tempBottom + "\n";
				setAttr defaultRenderGlobals.deadlineRegionSingleBottom -type "string" $regionSingleBottom;
				
				string $regionSinglePrefix = `getAttr defaultRenderGlobals.deadlineRegionSinglePrefix`;
				string $outputFilePrefix = GetMayaOutputPrefix( $camera );
				$outputFilePrefix = GetTileOutputPrefix( $outputFilePrefix, $x, $y, $tilesInX, $tilesInY );
				if( $renderer == "renderMan" )
					$outputFilePrefix = "_" + $outputFilePrefix;
				$regionSinglePrefix += "RegionPrefix" + $currTile + "=" + $outputFilePrefix + "\n";
				setAttr defaultRenderGlobals.deadlineRegionSinglePrefix -type "string" $regionSinglePrefix;
				
				$currTile++;
			}
		}
		
		setAttr defaultRenderGlobals.deadlineRegionSingleTiles $currTile;
		
		string $jobId = WriteJobFilesAndSubmit( $renderer, 0, 1, $MayaRenderJobType, $camera );
		
		$submitCounter++;
		
		int $submitDependentJob = `checkBox -q -v frw_submitTileDependentJob`;
		if( $submitDependentJob )
		{
			int $frameNumber = `intSliderGrp -q -v frw_tileSingleFrame`;
			string $outputFilePath = CheckSlashes( `textFieldGrp -q -text frw_outputFilePath` );
			
			int $submitEachRenderLayer = IsRenderLayersOn() ? `checkBox -q -value frw_submitEachRenderLayer` : false;
			if( IsRenderLayersOn() && !$submitEachRenderLayer )
			{
				// Store the currently selected render layer
				string $currentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
				string $renderLayerList[] = `ls -exactType "renderLayer"`;
				
				// Loop through the render layer if the checkbox is on
				for( $i = 0; $i < size( $renderLayerList ); $i++ )
				{
					// Only get output if this is not a referenced layer
					int $isReferenceLayer = `referenceQuery -inr $renderLayerList[$i]`;
					if( !$isReferenceLayer )
					{
						// Only get output if the renderable attribute is on
						int $renderable = `getAttr( $renderLayerList[$i] + ".renderable" )`;
						if( $renderable )
						{
							// Select the render layer to make sure the render settings are updated
							if( !catch(`editRenderLayerGlobals -currentRenderLayer $renderLayerList[$i]`) )
							{
								string $tempOutputFilePath = $outputFilePath;
								if( $renderer == "renderMan" )
								{
									$tempOutputFilePath = `rmanGetImageDir`;
									string $tempCurrentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
									if( `gmatch $tempCurrentRenderLayer "defaultRenderLayer"` == 1 )
										$tempOutputFilePath = $tempOutputFilePath + "/masterLayer";
									else
										$tempOutputFilePath = $tempOutputFilePath + "/" + $tempCurrentRenderLayer;
								}
								
								if( $camera != "" )
								{
									string $outputPrefix = CheckSlashes( GetOutputPrefix( 1, $frameNumber, $renderLayerList[$i], $camera ) );								
									int $count = SetupDependentTileAssemblerJob( $renderer, $jobId, $frameNumber, $tilesInX, $tilesInY, $outputPrefix, $renderLayerList[$i], $camera );
									$submitCounter += $count;
								}
								else
								{
									string $cameraNames[] = `listTransforms -cameras`;
									for( $cameraName in $cameraNames )
									{
										//string $relatives[] = `listRelatives -s $cameraName`;
										//string $cameraShape = $relatives[0];
										
										//if( !IsDefaultCamera( $cameraShape ) )
										{
											//if( `getAttr( $cameraShape + ".renderable" )` )
											if( IsCameraRenderable( $cameraName ) )
											{
												string $outputPrefix = CheckSlashes( GetOutputPrefix( 1, $frameNumber, $renderLayerList[$i], $cameraName ) );
												int $count = SetupDependentTileAssemblerJob( $renderer, $jobId, $frameNumber, $tilesInX, $tilesInY, $outputPrefix, $renderLayerList[$i], $cameraName );
												$submitCounter += $count;
											}
										}
									}
								}
							}
						}
					}
				}
				
				// Reselect the current render layer
				editRenderLayerGlobals -currentRenderLayer $currentRenderLayer;
			}
			else
			{
				string $tempOutputFilePath = $outputFilePath;
				
				string $currentRenderLayer = "";
				if( IsRenderLayersOn() && $submitEachRenderLayer )
				{
					$currentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
					if( $renderer == "renderMan" )
					{
						$tempOutputFilePath = `rmanGetImageDir`;
						if( `gmatch $currentRenderLayer "defaultRenderLayer"` == 1 )
							$tempOutputFilePath = $tempOutputFilePath + "/masterLayer";
						else
							$tempOutputFilePath = $tempOutputFilePath + "/" + $currentRenderLayer;
					}
				}
				
				if( $camera != "" )
				{
					string $outputPrefix = CheckSlashes( GetOutputPrefix( 1, $frameNumber, $currentRenderLayer, $camera ) );
					int $count = SetupDependentTileAssemblerJob( $renderer, $jobId, $frameNumber, $tilesInX, $tilesInY, $outputPrefix, $currentRenderLayer, $camera );
					$submitCounter += $count;
				}
				else
				{
					string $cameraNames[] = `listTransforms -cameras`;
					for( $cameraName in $cameraNames )
					{
						//string $relatives[] = `listRelatives -s $cameraName`;
						//string $cameraShape = $relatives[0];
						
						//if( !IsDefaultCamera( $cameraShape ) )
						{
							//if( `getAttr( $cameraShape + ".renderable" )` )
							if( IsCameraRenderable( $cameraName ) )
							{
								string $outputPrefix = CheckSlashes( GetOutputPrefix( 1, $frameNumber, $currentRenderLayer, $cameraName ) );
								int $count = SetupDependentTileAssemblerJob( $renderer, $jobId, $frameNumber, $tilesInX, $tilesInY, $outputPrefix, $currentRenderLayer, $cameraName );
								$submitCounter += $count;
							}
						}
					}
				}
			}
		}
	}
	return $submitCounter;
}

proc int SetupMentalRayExportJob( string $renderer )
{
	global int $MentalRayExportJobType;
	
	int $submitCounter = 0;
	
	string $jobId = WriteJobFilesAndSubmit( $renderer, 0, 0, $MentalRayExportJobType, "" );
	
	$submitCounter++;
		
	int $submitDependentJob = `checkBox -q -v frw_submitMentalRayJob`;
	if( $submitDependentJob )
	{
		string $frameList = `textFieldGrp -q -text frw_FrameList`;
		string $outputFilePath = CheckSlashes( `textFieldGrp -q -text frw_outputFilePath` );
		
		int $perlayer = `checkBoxGrp -query -value1 MayatomrExport_FilePerLayer`;
		int $perframe = `checkBoxGrp -query -value1 MayatomrExport_FilePerFrame`;
		int $padframe = 0;
		int $format = 0;
		if( $perframe )
		{
			$format = `optionMenuGrp -q -select MayatomrExport_FrameExtension`;
			$padframe = `intFieldGrp -q -value1 MayatomrExport_FramePadding`;
			if ($padframe > 9)
				$padframe = 9;
		}
		
		string $inputPath = CheckSlashes( `textFieldGrp -q -text frw_mentalRayFilePath` );
		string $inputDirectory = dirname( $inputPath ) + "/";
		string $inputFilename = basenameEx( $inputPath );
		string $inputExtension = fileExtension( $inputPath );
		
		string $padding = "";
		if( $perframe )
		{
			$padding = match( "[0-9]+", $frameList );
			while( size($padding) < $padframe )
				$padding = "0" + $padding;
		}
		
		string $renderLayerList[] = `ls -exactType "renderLayer"`;
		for( $i = 0; $i < size( $renderLayerList ); $i++ )
		{
			string $jobName = `textFieldGrp -q -text frw_JobName`;
			
			int $renderable = 1;
			if( $perlayer )
			{
				int $isReferenceLayer = `referenceQuery -inr $renderLayerList[$i]`;
				int $isRenderable = `getAttr( $renderLayerList[$i] + ".renderable" )`;
				$renderable = !$isReferenceLayer && $isRenderable;
				if( $renderable )
					$jobName = $jobName + " - layer " + $renderLayerList[$i];
			}
			
			if( $renderable )
			{
				string $tempDir = CallDeadlineCommand( "-GetCurrentUserHomeDirectory", false ) + "/temp";
				
				string $submitFilename = CheckSlashes( $tempDir + "/mr_deadline_info.job" );
				$fileId = `fopen $submitFilename "w"`;
				if( $fileId == 0 )
					print( "Error in Deadline Submission Script: could not create " + $submitFilename + "\n" );
				
				fprint $fileId ( "Plugin=MentalRay\n" );
				fprint $fileId ( "Name=" + $jobName + "\n" );
				fprint $fileId ( "Comment=" + `textFieldGrp -q -text frw_JobComment` + "\n" );
				fprint $fileId ( "Pool=" + `optionMenuGrp -q -value frw_deadlinePool` + "\n" );
				fprint $fileId ( "SecondaryPool=" + `optionMenuGrp -q -value frw_deadlineSecondaryPool` + "\n" );
				fprint $fileId ( "Priority=" + `intSliderGrp -q -v frw_JobPriority` + "\n" );
				fprint $fileId ( "OnJobComplete=" + `optionMenuGrp -q -value frw_onComplete` + "\n" );
				fprint $fileId ( "Department=" + `textFieldGrp -q -text frw_Department` + "\n" );
				fprint $fileId ( "Group=" + `optionMenuGrp -q -value frw_Group` + "\n" );
				fprint $fileId ( "MachineLimit=" + `intSliderGrp -q -v frw_LimitCount` + "\n" );
				fprint $fileId ( "LimitGroups=" + `textFieldGrp -q -text frw_limitGroups` + "\n" );
				fprint $fileId ( "OutputDirectory0=" + $outputFilePath + "\n" );
				fprint $fileId ( "JobDependencies=" + $jobId + "\n" );
				fprint $fileId ( "Frames=" + $frameList + "\n" );
				fprint $fileId ( "ChunkSize=1\n" );
				
				if( `checkBox -q -value frw_isBlacklist` )
					fprint $fileId ( "Blacklist=" + `textFieldGrp -q -text frw_machineList` + "\n" );
				else
					fprint $fileId ( "Whitelist=" + `textFieldGrp -q -text frw_machineList` + "\n" );
				
				fclose $fileId;
				
				$layer = "";
				// The layer name is only appended if there is more than one layer in the list.
				if( $perlayer && (size( $renderLayerList ) > 1) )
				{
					// If the layer is the defaultRenderLayer, it will actually be saved with masterLayer in the name
					if( `gmatch $renderLayerList[$i] "defaultRenderLayer"` == 1 )
						$layer = "_masterLayer";
					else
						$layer = "_" + $renderLayerList[$i];
				}
				
				if( $perframe )
				{
					if( $format == 1 )
						$inputPath = $inputDirectory + $inputFilename + $layer + "." + $inputExtension + "." + $padding;
					else if( $format == 2 )
						$inputPath = $inputDirectory + $inputFilename + $layer + "." + $padding + "." + $inputExtension;
					else
						$inputPath = $inputDirectory + $inputFilename + $layer + "." + $padding;
				}
				else
					$inputPath = $inputDirectory + $inputFilename + $layer + "." + $inputExtension;
				
				string $jobFilename = CheckSlashes( $tempDir + "/mr_deadline_job.job" );
				$fileId = `fopen $jobFilename "w"`;
				if( $fileId == 0 )
					print( "Error in Deadline Submission Script: could not create " + $jobFilename + "\n" );
				
				fprint $fileId ( "InputFile=" + $inputPath + "\n" );
				fprint $fileId ( "SeparateFilesPerFrame=" + $perframe + "\n" );
				if( $perframe )
					fprint $fileId ( "StartFrameOffset=" + `intSliderGrp -q -v frw_mentalRayOffset` + "\n" );
				fprint $fileId ( "OutputPath=" + $outputFilePath + "\n" );
				fprint $fileId ( "Threads=" + `intSliderGrp -q -v frw_mentalRayThreads` + "\n" );
				fprint $fileId ( "LocalRendering=" + `checkBox -q -v frw_mentalRayLocalRendering` + "\n" );
				fprint $fileId ( "Build=" + `optionMenuGrp -q -value frw_mentalRayBuild` + "\n" );
				fprint $fileId ( "Verbose=5\n" );
				fprint $fileId ( "CommandLineOptions=" + `textFieldGrp -q -text frw_mentalRayArgs` + "\n" );
				fclose $fileId;
				
				// Submit the job to Deadline
				string $submissionCommand = "\"" + $submitFilename + "\" \"" + $jobFilename + "\"";
				string $submitResults = CallDeadlineCommand( $submissionCommand, true );
				
				// Show results
				print( "\n\nSubmission Results For Job " + $jobName + ":\n---------------------------------------------------------------------------\n" + $submitResults + "\n" );
				
				$submitCounter++;
			}
			
			if( !$perlayer )
				break;
		}
	}
	
	return $submitCounter;
}

proc int SubmitDependentVRayJob( string $postfix, string $jobId )
{
	int $submitCounter = 0;
	
	int $layerCount = 1;
	int $submitLayers = false;
	string $currentRenderLayer = "";
	string $renderLayerList[0];
	
	if( IsRenderLayersOn() )
	{
		$currentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
		$renderLayerList = `ls -exactType "renderLayer"`;
		$layerCount = size( $renderLayerList );
		$submitLayers = true;
	}
	
	int $i;
	for( $i = 0; $i < $layerCount; $i++ )
	{
		string $jobName = `textFieldGrp -q -text frw_JobName`;
		if( $postfix != "" )
			$jobName = $jobName + " (" + $postfix + ")";
		
		int $perframe = `getAttr( "vraySettings.misc_eachFrameInFile" )`;
		string $frameList = `textFieldGrp -q -text frw_FrameList`;
		
		string $outputFilePath = CheckSlashes( `textFieldGrp -q -text frw_outputFilePath` );
		string $outputPrefix = CheckSlashes( GetOutputPrefix( 0, 0, "", "" ) );
		string $outputFilename = CheckSlashes( $outputFilePath  + "/" + $outputPrefix );
		
		string $inputPath = CheckSlashes( `textFieldGrp -q -text frw_vrayFilePath` );
		string $inputDirectory = dirname( $inputPath ) + "/";
		string $inputFilename = basenameEx( $inputPath );
		string $inputPadding = "";
		string $inputExtension = fileExtension( $inputPath );
		if( $inputExtension == "" )
			$inputExtension = "vrscene";
		
		if( $perframe )
			$inputPadding = "_0000";
		if( $postfix != "" )
			$inputFilename = $inputFilename + "_" + $postfix;
		
		if( $submitLayers )
		{
			int $isReferenceLayer = `referenceQuery -inr $renderLayerList[$i]`;
			if( $isReferenceLayer )
				continue;
			
			// Submit only if the renderable attribute is on
			$renderable = `getAttr( $renderLayerList[$i] + ".renderable" )`;
			if( !$renderable )
				continue;
			
			// Select the render layer to make sure the render settings are updated
			if( catch(`editRenderLayerGlobals -currentRenderLayer $renderLayerList[$i]`) )
				continue;
			
			string $renderLayerName = $renderLayerList[$i];
			if( `gmatch $renderLayerName "defaultRenderLayer"` == 1 )
				$renderLayerName = "masterLayer";
			
			$jobName = $jobName + " - layer " + $renderLayerName;
			$inputFilename = $inputFilename + "_" + $renderLayerName;
		}
	
		$inputPath = $inputDirectory + $inputFilename + $inputPadding + "." + $inputExtension;
		
		string $tempDir = CallDeadlineCommand( "-GetCurrentUserHomeDirectory", false ) + "/temp";
		
		string $submitFilename = CheckSlashes( $tempDir + "/vray_deadline_info.job" );
		$fileId = `fopen $submitFilename "w"`;
		if( $fileId == 0 )
			print( "Error in Deadline Submission Script: could not create " + $submitFilename + "\n" );
		
		fprint $fileId ( "Plugin=Vray\n" );
		fprint $fileId ( "Name=" + $jobName + "\n" );
		fprint $fileId ( "Comment=" + `textFieldGrp -q -text frw_JobComment` + "\n" );
		fprint $fileId ( "Pool=" + `optionMenuGrp -q -value frw_deadlinePool` + "\n" );
		fprint $fileId ( "SecondaryPool=" + `optionMenuGrp -q -value frw_deadlineSecondaryPool` + "\n" );
		fprint $fileId ( "Priority=" + `intSliderGrp -q -v frw_JobPriority` + "\n" );
		fprint $fileId ( "OnJobComplete=" + `optionMenuGrp -q -value frw_onComplete` + "\n" );
		fprint $fileId ( "Department=" + `textFieldGrp -q -text frw_Department` + "\n" );
		fprint $fileId ( "Group=" + `optionMenuGrp -q -value frw_Group` + "\n" );
		fprint $fileId ( "MachineLimit=" + `intSliderGrp -q -v frw_LimitCount` + "\n" );
		fprint $fileId ( "LimitGroups=" + `textFieldGrp -q -text frw_limitGroups` + "\n" );
		//fprint $fileId ( "OutputDirectory0=" + $outputFilePath + "\n" );
		fprint $fileId ( "OutputFilename0=" + $outputFilename + "\n" );
		fprint $fileId ( "JobDependencies=" + $jobId + "\n" );
		fprint $fileId ( "Frames=" + $frameList + "\n" );
		fprint $fileId ( "ChunkSize=1\n" );
		
		if( `checkBox -q -value frw_isBlacklist` )
			fprint $fileId ( "Blacklist=" + `textFieldGrp -q -text frw_machineList` + "\n" );
		else
			fprint $fileId ( "Whitelist=" + `textFieldGrp -q -text frw_machineList` + "\n" );
		
		fclose $fileId;
		
		string $jobFilename = CheckSlashes( $tempDir + "/vray_deadline_job.job" );
		$fileId = `fopen $jobFilename "w"`;
		if( $fileId == 0 )
			print( "Error in Deadline Submission Script: could not create " + $jobFilename + "\n" );
		
		fprint $fileId ( "InputFilename=" + $inputPath + "\n" );
		fprint $fileId ( "SeparateFilesPerFrame=" + $perframe + "\n" );
		fprint $fileId ( "Threads=" + `intSliderGrp -q -v frw_vrayThreads` + "\n" );
		fprint $fileId ( "Width=0\n" );
		fprint $fileId ( "Height=0\n" );
		//fprint $fileId ( "OutputFilename=" + $outputFilePath + "\n" );
		fclose $fileId;
		
		// Submit the job to Deadline
		string $submissionCommand = "\"" + $submitFilename + "\" \"" + $jobFilename + "\"";
		string $submitResults = CallDeadlineCommand( $submissionCommand, true );
		
		$submitCounter++;
		
		// Show results
		print( "\n\nSubmission Results For Job " + $jobName + ":\n---------------------------------------------------------------------------\n" + $submitResults + "\n" );
		
		if( `checkBox -q -v frw_submitVrimg2ExrJob` )
		{
			if( fileExtension( $outputFilename ) == "vrimg" )
			{
				string $convertJobId = "";
				string $jobIdRegEx = "[a-z,A-Z,0-9]+_[0-9]+_[a-z,A-Z,0-9]+_[0-9,a-f,A-F]+";
				$matches = `match $jobIdRegEx $submitResults`;
				if( size( $matches ) > 0 )
					$convertJobId = $matches;
				
				string $vrimgPrefix = CheckSlashes( GetOutputPrefix( 1, 0, "", "" ) );
				string $inputVrimgFilename = CheckSlashes( $outputFilePath  + "/" + $vrimgPrefix );
				
				string $outputExrDirectory = dirname( $inputVrimgFilename );
				string $outputExrPrefix = basename( CheckSlashes( GetOutputPrefix( 0, 0, "", "" ) ), ".vrimg" );
				string $outputExrFilename = CheckSlashes( $outputExrDirectory  + "/" + $outputExrPrefix + ".exr" );
				
				$jobName = $jobName + " - Conversion Job";
				
				string $convertSubmitFilename = CheckSlashes( $tempDir + "/vrimg_deadline_info.job" );
				$fileId = `fopen $convertSubmitFilename "w"`;
				if( $fileId == 0 )
					print( "Error in Deadline Submission Script: could not create " + $convertSubmitFilename + "\n" );
				
				fprint $fileId ( "Plugin=Vrimg2Exr\n" );
				fprint $fileId ( "Name=" + $jobName + "\n" );
				fprint $fileId ( "Comment=" + `textFieldGrp -q -text frw_JobComment` + "\n" );
				fprint $fileId ( "Department=" + `textFieldGrp -q -text frw_Department` + "\n" );
				fprint $fileId ( "Pool=" + `optionMenuGrp -q -value frw_deadlinePool` + "\n" );
				fprint $fileId ( "SecondaryPool=" + `optionMenuGrp -q -value frw_deadlineSecondaryPool` + "\n" );
				fprint $fileId ( "Group=" + `optionMenuGrp -q -value frw_Group` + "\n" );
				fprint $fileId ( "Priority=" + `intSliderGrp -q -v frw_JobPriority` + "\n" );
				fprint $fileId ( "LimitGroups=" + `textFieldGrp -q -text frw_limitGroups` + "\n" );
				fprint $fileId ( "OnJobComplete=" + `optionMenuGrp -q -value frw_onComplete` + "\n" );
				fprint $fileId ( "MachineLimit=" + `intSliderGrp -q -v frw_LimitCount` + "\n" );
				fprint $fileId ( "Frames=" + $frameList + "\n" );
				fprint $fileId ( "ChunkSize=1\n" );
				fprint $fileId ( "OutputFilename0=" + $outputExrFilename + "\n" );
				fprint $fileId ( "JobDependencies=" + $convertJobId + "\n" );
				
				if( `checkBox -q -value frw_isBlacklist` )
					fprint $fileId ( "Blacklist=" + `textFieldGrp -q -text frw_machineList` + "\n" );
				else
					fprint $fileId ( "Whitelist=" + `textFieldGrp -q -text frw_machineList` + "\n" );
				
				fclose $fileId;
				
				string $convertPluginFilename = CheckSlashes( $tempDir + "/vrimg_plugin_info.job" );
				$fileId = `fopen $convertPluginFilename "w"`;
				if( $fileId == 0 )
					print( "Error in Deadline Submission Script: could not create " + $convertPluginFilename + "\n" );
				
				fprint $fileId ( "InputFile=" + $inputVrimgFilename + "\n" );
				fprint $fileId ( "OutputFile=\n" );
				fprint $fileId ( "Half=False\n" );
				fprint $fileId ( "sRGB=False\n" );
				fprint $fileId ( "SetGamma=False\n" );
				fprint $fileId ( "Gamma=1.8\n" );
				fprint $fileId ( "SetChannel=False\n" );
				fprint $fileId ( "Channel=\n" );
				fprint $fileId ( "SetCompression=False\n" );
				fprint $fileId ( "Compression=zip\n" );
				fprint $fileId ( "SetBufferSize=False\n" );
				fprint $fileId ( "BufferSize=10\n" );
				
				if( `checkBox -q -v frw_deleteVrimgFiles` )
					fprint $fileId ( "DeleteInputFiles=True\n" );
				else
					fprint $fileId ( "DeleteInputFiles=False\n" );
				
				fclose $fileId;
				
				// Submit the job to Deadline
				string $convertSubmissionCommand = "\"" + $convertSubmitFilename + "\" \"" + $convertPluginFilename + "\"";
				string $convertSubmitResults = CallDeadlineCommand( $convertSubmissionCommand, true );
				
				// Show results
				print( "\n\nSubmission Results For Job " + $jobName + ":\n---------------------------------------------------------------------------\n" + $convertSubmitResults + "\n" );
				
				$submitCounter++;
			}
			else
				print( "\n\nWARNING: Vrimg2Exr job not submitted because output format is not vrimg\n" );
		}
	}
	
	if( $submitLayers )
	{
		// Reselect the current render layer
		editRenderLayerGlobals -currentRenderLayer $currentRenderLayer;
	}
	
	return $submitCounter;
}

proc int SetupVRayExportJob( string $renderer )
{
	global int $VRayExportJobType;
	
	int $submitCounter = 0;
	
	//string $jobId = WriteJobFilesAndSubmit( $renderer, 0, 0, 0, 1, 0, "" );
	string $jobId = WriteJobFilesAndSubmit( $renderer, 0, 0, $VRayExportJobType, "" );
	
	$submitCounter++;
		
	int $submitDependentJob = `checkBox -q -v frw_submitVRayJob`;
	if( $submitDependentJob )
	{
		// Dependent job does not support the Separate Files option.
		if( !`getAttr( "vraySettings.misc_separateFiles" )` )
			$submitCounter = $submitCounter + SubmitDependentVRayJob( "", $jobId );
		
		//~ SubmitDependentVRayJob( "", $jobId );
		//~ $submitCounter++;
		
		//~ if( `getAttr( "vraySettings.misc_separateFiles" )` )
		//~ {
			//~ int $exportLights = `getAttr( "vraySettings.misc_exportLights" )`;
			//~ if( $exportLights )
			//~ {
				//~ SubmitDependentVRayJob( "lights", $jobId );
				//~ $submitCounter++;
			//~ }
			
			//~ int $exportNodes = `getAttr( "vraySettings.misc_exportNodes" )`;
			//~ if( $exportNodes )
			//~ {
				//~ SubmitDependentVRayJob( "nodes", $jobId );
				//~ $submitCounter++;
			//~ }
			
			//~ int $exportGeometry = `getAttr( "vraySettings.misc_exportGeometry" )`;
			//~ if( $exportGeometry )
			//~ {
				//~ $submitCounter++;
				//~ SubmitDependentVRayJob( "geometry", $jobId );
			//~ }
			
			//~ int $exportMaterials = `getAttr( "vraySettings.misc_exportMaterials" )`;
			//~ if( $exportMaterials )
			//~ {
				//~ SubmitDependentVRayJob( "materials", $jobId );
				//~ $submitCounter++;
			//~ }
			
			//~ int $exportTextures = `getAttr( "vraySettings.misc_exportTextures" )`;
			//~ if( $exportTextures )
			//~ {
				//~ SubmitDependentVRayJob( "textures", $jobId );
				//~ $submitCounter++;
			//~ }
			
			//~ int $exportBitmaps = `getAttr( "vraySettings.misc_exportBitmaps" )`;
			//~ if( $exportBitmaps )
			//~ {
				//~ SubmitDependentVRayJob( "bitmaps", $jobId );
				//~ $submitCounter++;
			//~ }
		//~ }
	}
	
	return $submitCounter;
}

proc SetupArnoldKickJob(string $jobId, string $camera, string $renderLayer, int $addCameraToPath)
{
	string $jobName = `textFieldGrp -q -text frw_JobName`;
	string $frameList = `textFieldGrp -q -text frw_FrameList`;
		
	string $outputFilePath = CheckSlashes( `textFieldGrp -q -text frw_outputFilePath` );
	string $outputPrefix = CheckSlashes( GetOutputPrefix( 0, 0, $renderLayer, "" ) );
	string $outputFilename = CheckSlashes( $outputFilePath  + "/" + $outputPrefix );
		
	string $projectPath = `textFieldGrp -q -text frw_projectPath`;	
	string $assFileName = GetStrippedSceneFileName();
	
	// Append camera name to the job
	if( $camera != "" )
		$jobName = $jobName + " - " + $camera;

	// Append render layer name to the job
	if( $renderLayer != "" )
		$jobName += " - " + $renderLayer;

	int $ignoreOutFormatControl = false;
	if( `getAttr "defaultRenderGlobals.animation"` )
	{
		int $paddingSize = `getAttr "defaultRenderGlobals.extensionPadding"`;
		string $padding = "";
		while( size($padding) < $paddingSize )
			$padding = "0" + $padding;
			
		int $periodInExt = `getAttr "defaultRenderGlobals.periodInExt"`;
		int $putFrameBeforeExt = `getAttr "defaultRenderGlobals.putFrameBeforeExt"`;
			
		if( $periodInExt == 0 ) // name#.ext
		{
			$assFileName += $padding;
		}
		else if( $periodInExt == 1 )
		{
			if( $putFrameBeforeExt ) // name.# or name.#.ext
			{
				$assFileName += "." + $padding;
			}
			else // name.ext.#
			{
				$assFileName += ".ass." + $padding;
				$ignoreOutFormatControl = true;
			}
		}
		else if( $periodInExt == 2 ) // name_#.ext
		{
			$assFileName += "_" + $padding;
		}
	}
	if( !$ignoreOutFormatControl && `getAttr "defaultRenderGlobals.outFormatControl"` == 0 )
		$assFileName += ".ass";
	
	string $inputPath = $projectPath + "/data/";
	if ( $renderLayer != "")
		$inputPath = $inputPath + $renderLayer + "/";
	if ( $addCameraToPath && $camera != "" )
		$inputPath = $inputPath + $camera + "/";
		
	$inputPath = $inputPath + CheckSlashes( $assFileName );
		
	string $tempDir = CallDeadlineCommand( "-GetCurrentUserHomeDirectory", false ) + "/temp";
		
	string $submitFilename = CheckSlashes( $tempDir + "/arnold_deadline_info.job" );
	$fileId = `fopen $submitFilename "w"`;
	if( $fileId == 0 )
		print( "Error in Deadline Submission Script: could not create " + $submitFilename + "\n" );
		
	fprint $fileId ( "Plugin=Arnold\n" );
	fprint $fileId ( "Name=" + $jobName + "\n" );
	fprint $fileId ( "Comment=" + `textFieldGrp -q -text frw_JobComment` + "\n" );
	fprint $fileId ( "Pool=" + `optionMenuGrp -q -value frw_deadlinePool` + "\n" );
	fprint $fileId ( "SecondaryPool=" + `optionMenuGrp -q -value frw_deadlineSecondaryPool` + "\n" );
	fprint $fileId ( "Priority=" + `intSliderGrp -q -v frw_JobPriority` + "\n" );
	fprint $fileId ( "OnJobComplete=" + `optionMenuGrp -q -value frw_onComplete` + "\n" );
	fprint $fileId ( "Department=" + `textFieldGrp -q -text frw_Department` + "\n" );
	fprint $fileId ( "Group=" + `optionMenuGrp -q -value frw_Group` + "\n" );
	fprint $fileId ( "MachineLimit=" + `intSliderGrp -q -v frw_LimitCount` + "\n" );
	fprint $fileId ( "LimitGroups=" + `textFieldGrp -q -text frw_limitGroups` + "\n" );
	fprint $fileId ( "OutputFilename0=" + $outputFilename + "\n" );
	fprint $fileId ( "JobDependencies=" + $jobId + "\n" );
	fprint $fileId ( "IsFrameDependent=true\n" ); // this can be enabled because arnold export jobs can be done across multiple machines
	fprint $fileId ( "Frames=" + $frameList + "\n" );
	fprint $fileId ( "ChunkSize=1\n" );
	
	if( `checkBox -q -value frw_isBlacklist` )
		fprint $fileId ( "Blacklist=" + `textFieldGrp -q -text frw_machineList` + "\n" );
	else
		fprint $fileId ( "Whitelist=" + `textFieldGrp -q -text frw_machineList` + "\n" );
	
	fclose $fileId;
		
	string $jobFilename = CheckSlashes( $tempDir + "/arnold_deadline_job.job" );
	$fileId = `fopen $jobFilename "w"`;
	if( $fileId == 0 )
		print( "Error in Deadline Submission Script: could not create " + $jobFilename + "\n" );
		
	fprint $fileId ( "InputFile=" + $inputPath + "\n" );
	fprint $fileId ( "Threads=" + `intSliderGrp -q -v frw_arnoldThreads` + "\n" );
	fprint $fileId ( "CommandLineOptions=" + `textFieldGrp -q -text frw_arnoldArgs` + "\n" );
	fprint $fileId ( "Verbose=4\n" );
	fclose $fileId;
		
	// Submit the job to Deadline
	string $submissionCommand = "\"" + $submitFilename + "\" \"" + $jobFilename + "\"";
	string $submitResults = CallDeadlineCommand( $submissionCommand, true );
		
	// Show results
	print( "\n\nSubmission Results For Job " + $jobName + ":\n---------------------------------------------------------------------------\n" + $submitResults + "\n" );
}

proc int SetupArnoldExportJob( string $renderer )
{
	global int $ArnoldExportJobType;
	
	int $submitCounter = 0;
	
	string $jobId = WriteJobFilesAndSubmit( $renderer, 0, 0, $ArnoldExportJobType, "" );
	
	$submitCounter++;
	
	int $submitDependentJob = `checkBox -q -v frw_submitArnoldJob`;
	if( $submitDependentJob )
	{
		// Figure out the camera to use (if specified).
		string $camera = "";
		int $renderableCameras = 0;
		string $selectedCamera = `optionMenuGrp -q -value frw_camera`;
		string $cameraNames[] = `listTransforms -cameras`;
		for( $cameraName in $cameraNames )
		{
			if( $selectedCamera != "" && $cameraName == $selectedCamera )
			{
				$camera = $selectedCamera;
				break;
			}
			
			if( IsCameraRenderable( $cameraName ) )
				$renderableCameras = $renderableCameras + 1;
		}
		
		// If layers are off, just submit a single kick job.
		if (!IsRenderLayersOn())
		{
			if( $camera == "" && $renderableCameras > 1 )
			{
				string $cameraNames[] = `listTransforms -cameras`;
				for( $cameraName in $cameraNames )
				{
					if( IsCameraRenderable( $cameraName ) )
					{
						SetupArnoldKickJob($jobId, $cameraName, "", 1);
						$submitCounter++;
					}
				}
			}
			else
			{
				SetupArnoldKickJob($jobId, $camera, "", 0);
				$submitCounter++;
			}
		}
		else
		{
			// Loop through the render layers
			string $renderLayerList[] = `ls -exactType "renderLayer"`;
			for( $i = 0; $i < size( $renderLayerList ); $i++ )
			{
				string $renderLayer = $renderLayerList[$i];
				// Only get output if this is not a referenced layer
				int $isReferenceLayer = `referenceQuery -inr $renderLayer`;
				if( !$isReferenceLayer )
				{
					// Only get output if the renderable attribute is on
					int $renderable = `getAttr( $renderLayer + ".renderable" )`;
					if( $renderable )
					{
						if ( $renderLayer == "defaultRenderLayer" )
							$renderLayer = "masterLayer";
							
						if( $camera == "" && $renderableCameras > 1 )
						{
							string $cameraNames[] = `listTransforms -cameras`;
							for( $cameraName in $cameraNames )
							{
								if( IsCameraRenderable( $cameraName ) )
								{
									SetupArnoldKickJob($jobId, $cameraName, $renderLayer, 1);
									$submitCounter++;
								}
							}
						}
						else
						{
							SetupArnoldKickJob($jobId, $camera, $renderLayer, 0);
							$submitCounter++;
						}
					}
				}
			}
		}
	}
	
	return $submitCounter;
}

proc int SetupRendermanExportJob( string $renderer )
{
	global int $RendermanExportJobType;
	
	int $submitCounter = 0;
	
	//string $jobId = WriteJobFilesAndSubmit( $renderer, 0, 0, 0, 0, 1, "" );
	string $jobId = WriteJobFilesAndSubmit( $renderer, 0, 0, $RendermanExportJobType, "" );
	
	$submitCounter++;
	
	int $submitDependentJob = `checkBox -q -v frw_submitPRManJob`;
	if( $submitDependentJob )
	{
		string $jobName = `textFieldGrp -q -text frw_JobName`;
		string $frameList = `textFieldGrp -q -text frw_FrameList`;
		
		string $outputFilePath = CheckSlashes( `textFieldGrp -q -text frw_outputFilePath` );
		string $outputPrefix = CheckSlashes( GetOutputPrefix( 0, 0, "", "" ) );
		string $outputFilename = CheckSlashes( $outputFilePath  + "/" + $outputPrefix );
		
		string $projectPath = `textFieldGrp -q -text frw_projectPath`;
		string $inputPath = CheckSlashes( $projectPath + "/renderman/" + GetStrippedSceneFileName() + "/rib/0000/0000.rib\n" );
		
		string $tempDir = CallDeadlineCommand( "-GetCurrentUserHomeDirectory", false ) + "/temp";
		
		string $submitFilename = CheckSlashes( $tempDir + "/prman_deadline_info.job" );
		$fileId = `fopen $submitFilename "w"`;
		if( $fileId == 0 )
			print( "Error in Deadline Submission Script: could not create " + $submitFilename + "\n" );
		
		fprint $fileId ( "Plugin=PRMan\n" );
		fprint $fileId ( "Name=" + $jobName + "\n" );
		fprint $fileId ( "Comment=" + `textFieldGrp -q -text frw_JobComment` + "\n" );
		fprint $fileId ( "Pool=" + `optionMenuGrp -q -value frw_deadlinePool` + "\n" );
		fprint $fileId ( "SecondaryPool=" + `optionMenuGrp -q -value frw_deadlineSecondaryPool` + "\n" );
		fprint $fileId ( "Priority=" + `intSliderGrp -q -v frw_JobPriority` + "\n" );
		fprint $fileId ( "OnJobComplete=" + `optionMenuGrp -q -value frw_onComplete` + "\n" );
		fprint $fileId ( "Department=" + `textFieldGrp -q -text frw_Department` + "\n" );
		fprint $fileId ( "Group=" + `optionMenuGrp -q -value frw_Group` + "\n" );
		fprint $fileId ( "MachineLimit=" + `intSliderGrp -q -v frw_LimitCount` + "\n" );
		fprint $fileId ( "LimitGroups=" + `textFieldGrp -q -text frw_limitGroups` + "\n" );
		fprint $fileId ( "OutputFilename0=" + $outputFilename + "\n" );
		fprint $fileId ( "JobDependencies=" + $jobId + "\n" );
		fprint $fileId ( "Frames=" + $frameList + "\n" );
		fprint $fileId ( "ChunkSize=1\n" );
		
		if( `checkBox -q -value frw_isBlacklist` )
			fprint $fileId ( "Blacklist=" + `textFieldGrp -q -text frw_machineList` + "\n" );
		else
			fprint $fileId ( "Whitelist=" + `textFieldGrp -q -text frw_machineList` + "\n" );
	
		fclose $fileId;
		
		string $jobFilename = CheckSlashes( $tempDir + "/prman_deadline_job.job" );
		$fileId = `fopen $jobFilename "w"`;
		if( $fileId == 0 )
			print( "Error in Deadline Submission Script: could not create " + $jobFilename + "\n" );
		
		fprint $fileId ( "RibFile=" + $inputPath + "\n" );
		fprint $fileId ( "WorkingDirectory=" + CheckSlashes( $projectPath ) + "\n" );
		fprint $fileId ( "Threads=" + `intSliderGrp -q -v frw_prmanThreads` + "\n" );
		fprint $fileId ( "CommandLineOptions=" + `textFieldGrp -q -text frw_prmanArgs` + "\n" );
		fclose $fileId;
		
		// Submit the job to Deadline
		string $submissionCommand = "\"" + $submitFilename + "\" \"" + $jobFilename + "\"";
		string $submitResults = CallDeadlineCommand( $submissionCommand, true );
		
		$submitCounter++;
		
		// Show results
		print( "\n\nSubmission Results For Job " + $jobName + ":\n---------------------------------------------------------------------------\n" + $submitResults + "\n" );
	}
	
	
	return $submitCounter;
}

global proc SetupSubmission()
{
	global string $DeadlineSubmitterWindow;
	global string $StartupScriptPathGrp;
	global int $MayaRenderJobType;
	global int $MentalRayExportJobType;
	global int $VRayExportJobType;
	global int $RendermanExportJobType;
	global int $ArnoldExportJobType;
	
	SavePersistentDeadlineOptions();
	print( "Submitting job to Deadline...\n" );
		
	// Get the current renderer
	string $renderer = GetCurrentRenderer();
	
	// Check if we are doing a mental ray export
	int $jobType = `optionMenuGrp -q -select frw_mayaJobType`;
	
	/*
	// Check that if the renderer is Gelato that we are using MayaBatch
	if( $renderer == "gelato" && `getAttr defaultRenderGlobals.deadlineUseMayaBatchPlugin` != 1)
	{
		string $errorMessage = "The Maya plugin does not support the Gelato renderer.  Please select the checkbox to use the MayaBatch plugin.\n\n";
		string $result = `confirmDialog -title "Submission Error" -message ( $errorMessage ) -button "OK" -defaultButton "OK"`;
		return;
	}
	*/
	
	/*
	// Ensure that the scene is animated
	if( !IsAnimatedOn() )
	{
		string $errorMessage = "";
		if ( $renderer == "vray" )
		{
			if( IsOldVray() )
				$errorMessage = "Animation checkbox under Image File Output is not checked. Deadline requires that animation be enabled.\n\n";
			else
				$errorMessage = "Frame/Animation Ext in render globals is set for a single frame. Deadline requires that animation be enabled.\n\n";
		}
		else
			$errorMessage = "Frame/Animation Ext in render globals is set for a single frame. Deadline requires that animation be enabled.\n\n";
		
		string $result = `confirmDialog -title "Submission Error" -message ( $errorMessage ) -button "OK" -defaultButton "OK"`;
		return;
	}
	*/
	
	// Check all the paths for problems, and warn the user if any are found
	string $projectPath = CheckSlashes( `textFieldGrp -q -text frw_projectPath` );
	string $outputFilePath = CheckSlashes( `textFieldGrp -q -text frw_outputFilePath` );
	string $sceneFilePath = CheckSlashes( `file -q -sceneName` );
	string $mentalRayFilename = CheckSlashes( `textFieldGrp -q -text frw_mentalRayFilePath` );
	string $vrayFilename = CheckSlashes( `textFieldGrp -q -text frw_vrayFilePath` );
	
	int $submitMayaSceneFile = `checkBox -q -value frw_submitMayaScene`;

	string $message = "";
	if( !$submitMayaSceneFile && IsLocalDrive( $sceneFilePath ) )
		$message = $message + "Maya Scene file, \"" + $sceneFilePath + "\" is on a local drive and is not being submitted.\nSlaves will not be able to access the scene file.\n\n";
	
	if( IsLocalDrive( $projectPath ) )
		$message = $message + "Project path, \"" + $projectPath + "\" is on a local drive.\nParticle caching and other Maya features will not be available.\n\n";
	
	int $exportDependentJob = false;
	if( $jobType == $MentalRayExportJobType )
	{
		$binary = false;
		if( catch( $binary = `radioButton -query -select MayatomrExport_Binary` ) )
		{
			string $result = `confirmDialog -parent $DeadlineSubmitterWindow -title "Error Reading Export Options" -message "Could not read in Mental Ray Export settings. Please ensure that the Mental Ray Export settings dialog is open when submitting the job to Deadline." -button "Export Settings..." -button "Cancel" -defaultButton "Export Settings..." -cancelButton "Cancel" `;
			if( $result == "Export Settings..." )
				OpenExportSettings();
			return;
		}
		
		string $mentalRayPath = dirname( $mentalRayFilename );
		if( ! `filetest -d $mentalRayPath` )
			$message = $message + "Mental Ray output path \"" + $mentalRayPath + "\" does not exist!  Your Mental Ray files will be lost!\n\n";
		else if( IsLocalDrive( $mentalRayFilename ) )
			$message = $message + "Mental Ray output file \"" + $mentalRayFilename + "\" is on a local drive.\nSlaves will not be able to copy the Mental Ray files to this drive.\n\n";
		else if( size( $mentalRayFilename ) == 0 )
			$message = $message + "Mental Ray output file is blank! Your Mental Ray files will be lost!\n\n";
		
		$exportDependentJob = `checkBox -q -v frw_submitMentalRayJob`;
	}
	else if( $jobType == $VRayExportJobType )
	{
		string $vrayPath = dirname( $vrayFilename );
		if( ! `filetest -d $vrayPath` )
			$message = $message + "VRay export path \"" + $vrayPath + "\" does not exist!  Your VRay files will be lost!\n\n";
		else if( IsLocalDrive( $vrayFilename ) )
			$message = $message + "VRay output file \"" + $vrayFilename + "\" is on a local drive.\nSlaves will not be able to copy the exported VRay files to this drive.\n\n";
		else if( size( $vrayFilename ) == 0 )
			$message = $message + "VRay output file is blank! Your exported VRay files will be lost!\n\n";
		
		int $submitDependentJob = `checkBox -q -v frw_submitVRayJob`;
		if( $submitDependentJob && `getAttr( "vraySettings.misc_separateFiles" )` )
			$message = $message + "Dependent VRay standalone job option is not compatible with the 'Separate Files' option in the VRay Translator settings. No dependent jobs will be submitted.\n\n";
		
		if( `checkBox -q -v frw_submitVrimg2ExrJob` )
		{
			string $vrimgOutputPrefix = CheckSlashes( GetOutputPrefix( 0, 0, "", "" ) );
			string $vrimgOutputFilename = CheckSlashes( $outputFilePath  + "/" + $vrimgOutputPrefix );
			
			if( fileExtension( $vrimgOutputFilename ) != "vrimg" )
				$message = $message + "Dependent Vrimg2Exr job is enabled, but the output format is not vrimg!\n\n";
		}
		
		$exportDependentJob = `checkBox -q -v frw_submitVRayJob`;
	}
	else if( $jobType == $RendermanExportJobType )
	{
		$exportDependentJob = `checkBox -q -v frw_submitPRManJob`;
	}
	else if( $jobType == $ArnoldExportJobType )
	{
		$exportDependentJob = `checkBox -q -v frw_submitArnoldJob`;
	}
	
	// If not an export job, or it is an export job with a dependent job, warn about the output.
	if( $jobType == $MayaRenderJobType || $exportDependentJob )
	{
		if( ! `filetest -d $outputFilePath` )
			$message = $message + "Image Output Path \"" + $outputFilePath + "\" does not exist! Your final images will be lost!\n\n";
		else if( IsLocalDrive( $outputFilePath ) )
			$message = $message + "Image Output Path \"" + $outputFilePath + "\" is on a local drive.\nSlaves will not be able to copy images to this drive.\n\n";
		else if( size( $outputFilePath ) == 0 )
			$message = $message + "Image Output Path is blank! Your final images will be lost!\n\n";
	}
	
	// If there is a startup script, make sure it exists and that it isn't local.
	if( `checkBox -q -v frw_useMayaBatchPlugin` )
	{
		string $startupScript = `textFieldButtonGrp -q -text $StartupScriptPathGrp`;
		$startupScript = `strip $startupScript`;
		if( $startupScript != "" )
		{
			if( ! `filetest -e $startupScript` )
				$message = $message + "Startup Script \"" + $startupScript + "\" does not exist!\n\n";
			else if( IsLocalDrive( $startupScript ) )
				$message = $message + "Startup Script \"" + $startupScript + "\" is on a local drive.\nSlaves will not be able to access it at render time.\n\n";
		}
	}
	
	int $submitEachRenderLayer = IsRenderLayersOn() ? `checkBox -q -value frw_submitEachRenderLayer` : false;
	if( $jobType == $MayaRenderJobType && IsRenderLayersOn() && $submitEachRenderLayer )
	{
		string $tempMessage = "";
		string $renderLayerList[] = `ls -exactType "renderLayer"`;
		
		// Loop through the render layer if the checkbox is on
		for( $i = 0; $i < size( $renderLayerList ); $i++ )
		{
			// Only submit if layer is not referenced.
			int $isReferenceLayer = `referenceQuery -inr $renderLayerList[$i]`;
			if( $isReferenceLayer )
			{
				// Submit only if the renderable attribute is on
				$renderable = `getAttr( $renderLayerList[$i] + ".renderable" )`;
				if( $renderable )
					$tempMessage = $tempMessage + "  " + $renderLayerList[$i] + "\n";
			}
		}
		
		if( $tempMessage != "" )
			$message = $message + "The following renderable referenced layers will not be submitted with the job:\n" + $tempMessage + "\n";
	}
	
	int $regionRendering = `checkBox -q -value frw_regionRendering`;
	if( $regionRendering )
	{
		string $extension = fileExtension( GetOutputPrefix( 0, 0, "", "" ) );
		print( "extension = " + $extension );
		
		string $extension = tolower( $extension );
		if( $extension != "bmp" && $extension != "dds" && $extension != "exr" && $extension != "jpg" && $extension != "png" && $extension != "sgi" && $extension != "tga" && $extension != "tif" )
			$message = $message + "The image format used is not compatible with the Tile Assembler, so you will have to assemble the final image manually.\nThe following formats are currently supported: bmp, dds, exr, jpg, png, sgi, tga, tif.\n\n";
	}
		
	// Display any warning messages
	if( size( $message ) > 0 )
	{
		$message = $message + "\nAre you sure you want to submit this job?";
		string $result = `confirmDialog -parent $DeadlineSubmitterWindow -title "Confirm" -message ( $message ) -button "Yes" -button "No" -defaultButton "Yes" -cancelButton "No" -dismissString "No"`;
		if( $result == "No" )
			return;
	}
	
	// Save scene, if necessary
	if( `file -q -modified` )
	{
		print( "Maya scene has been modified, saving file\n" );
		file -save;
	}
	else
		print( "Maya scene has not been modified, skipping save\n" );
	
	// If this is not a mental ray export job, check if we need to submit each layer as a separate job.
	if( $jobType == $MayaRenderJobType && IsRenderLayersOn() && $submitEachRenderLayer )
	{
		int $submitCounter = 0;
		
		// Store the currently selected render layer
		string $currentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
		string $renderLayerList[] = `ls -exactType "renderLayer"`;
		
		// Loop through the render layer if the checkbox is on
		for( $i = 0; $i < size( $renderLayerList ); $i++ )
		{
			// Only submit if layer is not referenced.
			int $isReferenceLayer = `referenceQuery -inr $renderLayerList[$i]`;
			if( !$isReferenceLayer )
			{
				// Submit only if the renderable attribute is on
				$renderable = `getAttr( $renderLayerList[$i] + ".renderable" )`;
				if( $renderable )
				{
					// Select the render layer to make sure the render settings are updated
					if( !catch(`editRenderLayerGlobals -currentRenderLayer $renderLayerList[$i]`) )
					{
						$renderer = GetCurrentRenderer();
						
						// Check if we're submitting each camera as a separate job.
						if( `checkBox -q -v frw_submitEachCamera` )
						{
							int $ignoreDefaultCameras = `checkBox -q -v frw_ignoreDefaultCameras`;
							
							string $cameraNames[] = `listTransforms -cameras`;
							for( $cameraName in $cameraNames )
							{
								string $relatives[] = `listRelatives -s $cameraName`;
								string $cameraShape = $relatives[0];
							
								// Only submit default cameras if the setting to ignore them is disabled.
								if( !$ignoreDefaultCameras || !IsDefaultCamera( $cameraShape ) )
								{
									// Only submit renderable cameras.
									//if( `getAttr( $cameraShape + ".renderable" )` )
									if( IsCameraRenderable( $cameraName ) )
									{
										// Set up a tile rendering job if necessary.
										if( $regionRendering && SupportsRegionRendering( $renderer ) )
											$submitCounter += SetupRegionRenderingJob( $renderer, $cameraName );
										else
										{
											WriteJobFilesAndSubmit( $renderer, 0, 0, $jobType, $cameraName );
											$submitCounter++;
										}
									}
								}
							}
						}
						else
						{
							// Set up a tile rendering job if necessary.
							if( $regionRendering && SupportsRegionRendering( $renderer ) )
								$submitCounter += SetupRegionRenderingJob( $renderer, "" );
							else
							{
								WriteJobFilesAndSubmit( $renderer, 0, 0, $jobType, "" );
								$submitCounter++;
							}
						}
					}
				}
			}
		}
		
		// Reselect the current render layer
		editRenderLayerGlobals -currentRenderLayer $currentRenderLayer;
		
		string $submitsResults = "Done submitting " + $submitCounter + " jobs.\nSee script history log for complete details.";
		confirmDialog -parent $DeadlineSubmitterWindow -title "Submission Results" -message $submitsResults -button "Close";
	}
	else
	{
		if( $jobType == $MentalRayExportJobType )
		{
			int $submitCounter = SetupMentalRayExportJob( $renderer );
			confirmDialog -parent $DeadlineSubmitterWindow -title "Submission Results" -message ("Done submitting " + $submitCounter + " jobs.\nSee script history log for complete details.") -button "Close";
		}
		else if( $jobType == $VRayExportJobType )
		{
			int $submitCounter = SetupVRayExportJob( $renderer );
			confirmDialog -parent $DeadlineSubmitterWindow -title "Submission Results" -message ("Done submitting " + $submitCounter + " jobs.\nSee script history log for complete details.") -button "Close";
		}
		else if( $jobType == $RendermanExportJobType )
		{
			int $submitCounter = SetupRendermanExportJob( $renderer );
			confirmDialog -parent $DeadlineSubmitterWindow -title "Submission Results" -message ("Done submitting " + $submitCounter + " jobs.\nSee script history log for complete details.") -button "Close";
		}
		else if( $jobType == $ArnoldExportJobType )
		{
			int $submitCounter = SetupArnoldExportJob( $renderer );
			confirmDialog -parent $DeadlineSubmitterWindow -title "Submission Results" -message ("Done submitting " + $submitCounter + " jobs.\nSee script history log for complete details.") -button "Close";
		}
		else
		{
			// Check if we're submitting each camera as a separate job.
			if( `checkBox -q -v frw_submitEachCamera` )
			{
				int $submitCounter = 0;
				int $ignoreDefaultCameras = `checkBox -q -v frw_ignoreDefaultCameras`;
				
				string $cameraNames[] = `listTransforms -cameras`;
				for( $cameraName in $cameraNames )
				{
					string $relatives[] = `listRelatives -s $cameraName`;
					string $cameraShape = $relatives[0];
				
					// Only submit default cameras if the setting to ignore them is disabled.
					if( !$ignoreDefaultCameras || !IsDefaultCamera( $cameraShape ) )
					{
						// Only submit renderable cameras.
						//if( `getAttr( $cameraShape + ".renderable" )` )
						if( IsCameraRenderable( $cameraName ) )
						{
							// Only setup a tile rendering job if it is enabled.
							if( $regionRendering && SupportsRegionRendering( $renderer ) )
								$submitCounter += SetupRegionRenderingJob( $renderer, $cameraName );
							else
							{
								WriteJobFilesAndSubmit( $renderer, 0, 0, $jobType, $cameraName );
								$submitCounter++;
							}
						}
					}
				}
				
				string $submitsResults = "Done submitting " + $submitCounter + " jobs.\nSee script history log for complete details.";
				confirmDialog -parent $DeadlineSubmitterWindow -title "Submission Results" -message $submitsResults -button "Close";
			}
			else
			{
				// Only setup a tile rendering job if it is enabled.
				if( $regionRendering && SupportsRegionRendering( $renderer ) )
				{
					int $submitCounter = SetupRegionRenderingJob( $renderer, "" );
					confirmDialog -parent $DeadlineSubmitterWindow -title "Submission Results" -message ("Done submitting " + $submitCounter + " jobs.\nSee script history log for complete details.") -button "Close";
				}
				else
				{
					string $jobId = WriteJobFilesAndSubmit( $renderer, 1, 0, $jobType, "" );
					print( "JOB ID = " + $jobId + "\n" );
				}
			}
		}
	}
}

global proc LayerSettingsDialog()
{
	string $renderLayerList[] = `ls -exactType "renderLayer"`;
	int $chunkSize = `intSliderGrp -q -v frw_FrameGroup`;
	string $jobName = `attributeExists deadlineJobName defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineJobName` : GetStrippedSceneFileName();
	
	// Add controls to the submission dialog.
	int $windowWidth = 470;
	int $windowHeight = 500;
	
	int $labelWidth = 110;
	int $controlWidth = 320;
	
	// Get the dialog's formLayout.
	//
	string $form = `setParent -q`;
	formLayout -e -width ($windowWidth+8) -height $windowHeight $form;
	
	string $window = `formLayout -q -p $form`;
	print ($form + "\n");
	
	scrollLayout -width $windowWidth -horizontalScrollBarThickness 0 mainScrollLayout;
		columnLayout -adjustableColumn true -columnAttach "both" 0;
			
			// Store the currently selected render layer
			string $currentRenderLayer = `editRenderLayerGlobals -query -currentRenderLayer`;
			
			for( $i = 0; $i < size( $renderLayerList ); $i++ )
			{
				// Only submit if layer is not referenced.
				int $isReferenceLayer = `referenceQuery -inr $renderLayerList[$i]`;
				if( !$isReferenceLayer )
				{
					// Submit only if the renderable attribute is on
					$renderable = `getAttr( $renderLayerList[$i] + ".renderable" )`;
					
					if($renderable)
					{
						if( !catch(`editRenderLayerGlobals -currentRenderLayer $renderLayerList[$i]`) )
						{
							string $frameRange = `textFieldGrp -q -text frw_FrameList`;
							int $frameRangeEnabled = IsAnimatedOn();
							
							frameLayout -label $renderLayerList[$i] -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
								columnLayout -adj true -columnAttach "both" 0 -rowSpacing 4;
								
									$layerJobName = $jobName + " - " + $renderLayerList[$i];
									
									$FieldName = "frw_JobName_" + $renderLayerList[$i];
									textFieldGrp -label "Job Name" -cl2 "left" "left" -cw2 $labelWidth 320 -text $layerJobName -changeCommand SavePersistentDeadlineOptions -annotation "The name of the job" $FieldName;
									
									$FieldName = "frw_FrameList_" + $renderLayerList[$i];
									textFieldGrp -label "Frame List" -en $frameRangeEnabled -cl2 "left" "left" -cw2 $labelWidth 320 -changeCommand SavePersistentDeadlineOptions -annotation "Enter a list of frames to render, separated by commas for separate frames, or dashes for continuous sequences of frames. e.g. 1, 5-10, 100" -text $frameRange $FieldName;
									
									$FieldName = "frw_FrameGroup_" + $renderLayerList[$i];
									intSliderGrp -label "Task Size" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 1 -maxValue 1000 -v $chunkSize -changeCommand SavePersistentDeadlineOptions -annotation "Each task for the job will consist of this many frames" $FieldName;
									
								setParent ..;
							setParent ..;
						}
					}
				}
			}
			
			// Reselect the current render layer
			editRenderLayerGlobals -currentRenderLayer $currentRenderLayer;
			
		setParent ..;
	setParent ..;
	
	columnLayout -adj true -columnAttach "both" 2 -rowSpacing 4 buttonColumnLayout;
		rowLayout -numberOfColumns 2 -cw2 ($windowWidth / 2) ($windowWidth / 2);
			button -label "Submit Job" -width ($windowWidth / 2 - 4) -height 26 -annotation "Submits this job to Deadline" -align "center" -c SetupSubmission;
			button -label "Close" -width ($windowWidth / 2 - 4)  -height 26 -annotation "Closes this window" -align "center" -c DismissLayoutDialog;
		setParent ..;
	setParent ..;
	
	formLayout -e
		-af buttonColumnLayout bottom 0
		-af buttonColumnLayout right 0
		-af buttonColumnLayout left 0
		-ac mainScrollLayout bottom 0 buttonColumnLayout
		-af mainScrollLayout top 0
		-af mainScrollLayout left 3
	$form;
}

//---------------------------------------------------------
// Event handler functions.
//---------------------------------------------------------

// Event when Submit Job button is pressed
global proc DeadlineSubmitterOnOk()
{
	global string $DeadlineSubmitterWindow;
	global int $MayaRenderJobType;
	
	// Source a CustomSanityChecks.mel file, if it exists. This file can be used to set some of the defaults
	// for the properties below if necessary.
	global string $DeadlineRepositoryRoot;
	string $sanityScriptPath = CheckSlashes( $DeadlineRepositoryRoot + "/submission/Maya/Main/CustomPostSanityChecks.mel" );
	if( `file -q -exists $sanityScriptPath` )
	{
		
		print( "sourcing custom post sanity check file: " + $sanityScriptPath + "\n" );
		eval( "source \"" + $sanityScriptPath + "\";" );
		if( !CustomPostSanityCheck() )
			return;
	}
	
	// Check if we are doing a mental ray export
	int $jobType = `optionMenuGrp -q -select frw_mayaJobType`;
	if( `checkBox -q -v frw_submitEachRenderLayer` && `checkBox -q -v frw_overrideLayerSettings` && $jobType == $MayaRenderJobType )
		layoutDialog -parent $DeadlineSubmitterWindow -title "Override Layer Job Settings" -ui "LayerSettingsDialog";
	else
		SetupSubmission();
}

global proc DismissLayoutDialog()
{
	layoutDialog -dismiss "";
}


// ===============================================================================================================
// The main function called by the Maya proxy script
// ===============================================================================================================

global proc SubmitJobToDeadline()
{   
	global string $DeadlineSubmitterWindow;
	global string $ImageOutputPathGrp;
	global string $StartupScriptPathGrp;
	global string $ProjectPathGrp;
	global string $MentalRayFilenameGrp;
	global string $VRayFilenameGrp;
	global string $LimitGroupGrp;
	global string $DependenciesGrp;
	global string $MachineListGrp;
	global string $JobNameGrp;
	
	global string $MayaRenderOptionsRollout;
	global string $MayaRenderOptionsArnoldRollout;
	global string $MayaRenderOptionsMentalRayRollout;
	global string $MayaRenderOptionsRedshiftRollout;
	global string $MayaRenderOptionsVRayRollout;
	global string $MayaRenderOptionsTileRollout;
	global string $MentalRayExportRollout;
	global string $MentalRayExportRenderJobRollout;
	global string $VrayExportRollout;
	global string $VrayExportRenderJobRollout;
	global string $VrayExportVrimgJobRollout;
	global string $RendermanExportRollout;
	global string $RendermanExportRenderJobRollout;
	global string $ArnoldExportRollout;
	global string $ArnoldExportRenderJobRollout;
	
	global string $DeadlineRepositoryRoot;
	global string $SGInfoKeys[];
	global string $SGInfoValues[];
	
	// This is a workaround for what seems like a bug in Maya vector rendering. Without it, the
	// renderer would spit out "Error: No object matches name: defaultRenderGlobals.imageNamePrefix".
	AddStringAttribute( "imageNamePrefix" );
	
	// Source a CustomSanityChecks.mel file, if it exists. This file can be used to set some of the defaults
	// for the properties below if necessary.
	//string $root = CallDeadlineCommand( "-getrepositoryroot" );
	//string $sanityScriptPath = CheckSlashes( $root + "/submission/Maya/Main/CustomSanityChecks.mel" );
	$DeadlineRepositoryRoot = CallDeadlineCommand( "-getrepositoryroot", false );
	string $sanityScriptPath = CheckSlashes( $DeadlineRepositoryRoot + "/submission/Maya/Main/CustomSanityChecks.mel" );
	if( `file -q -exists $sanityScriptPath` )
	{
		print( "sourcing custom sanity check file: " + $sanityScriptPath + "\n" );
		eval( "source \"" + $sanityScriptPath + "\";" );
	}

	// Get the renderer.
	string $renderer = GetCurrentRenderer();
	// Get the initial property values.
	string $jobName = `attributeExists deadlineJobName defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineJobName` : GetStrippedSceneFileName();	
	string $jobComment =  `attributeExists deadlineJobComment defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineJobComment` : "";
	string $department = `attributeExists deadlineDepartment defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineDepartment` : "";
	string $savedGroup = `attributeExists deadlineGroup defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineGroup` : "none";

	string $savedJobPool = `attributeExists deadlineJobPool defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineJobPool` : "none";
	string $savedJobSecondaryPool = `attributeExists deadlineJobSecondaryPool defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineJobSecondaryPool` : "";
	//int $useOnlyPool = `attributeExists deadlineUseOnlyPool defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineUseOnlyPool` : false;
	int $priority = `attributeExists deadlineJobPriority defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineJobPriority` : 50;
	int $limitCount = `attributeExists deadlineLimitCount defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineLimitCount` : 0;
	int $concurrentTasks = `attributeExists deadlineConcurrentTasks defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineConcurrentTasks` : 1;
	int $SlaveTimeout = `attributeExists deadlineSlaveTimeout defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSlaveTimeout` : 0;
	int $MinSlaveTimeout = `attributeExists deadlineMinSlaveTimeout defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMinSlaveTimeout` : 0;
	string $limitGroups = `attributeExists deadlineLimitGroups defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineLimitGroups` : "";
	string $dependencies = "";
	int $submitAsSuspended = `attributeExists deadlineSubmitAsSuspended defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitAsSuspended` : false;
	//int $deleteOnComplete = `attributeExists deadlineDeleteOnComplete defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineDeleteOnComplete` : false;
	
	string $machineList = `attributeExists deadlineMachineList defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMachineList` : "";
	int $isBlacklist = `attributeExists deadlineIsBlacklist defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineIsBlacklist` : false;
	
	int $chunkSize = `attributeExists deadlineChunkSize defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineChunkSize` : 1;
	int $submitMayaScene = `attributeExists deadlineSubmitMayaScene defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitMayaScene` : false;
	//int $cpus = `attributeExists deadlineNumCPUs defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineNumCPUs` : 2;
	int $submitEachRenderLayer = `attributeExists deadlineSubmitEachRenderLayer defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitEachRenderLayer` : true;
	int $overrideGlobalRange = `attributeExists deadlineOverrideGlobalRange defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineOverrideGlobalRange` : false;
	int $overrideLayerSettings = `attributeExists deadlineOverrideLayerSettings defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineOverrideLayerSettings` : false;
	int $submitEachCamera = `attributeExists deadlineSubmitEachCamera defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitEachCamera` : false;
	int $ignoreDefaultCameras = `attributeExists deadlineIgnoreDefaultCameras defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineIgnoreDefaultCameras` : false;
	int $useMayaBatchPlugin = `attributeExists deadlineUseMayaBatchPlugin defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineUseMayaBatchPlugin` : true;
	int $localRendering = `attributeExists deadlineLocalRendering defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineLocalRendering` : false;
	int $strictErrorChecking = `attributeExists deadlineStrictErrorChecking defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineStrictErrorChecking` : true;
	string $startupScript = `attributeExists deadlineStartupScript defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineStartupScript` : "";
	string $mayaArgs = `attributeExists deadlineMayaArgs defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMayaArgs` : "";
	
	int $submitMentalRayJob = `attributeExists deadlineSubmitMentalRayJob defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitMentalRayJob` : false;
	int $mentalRayThreads = `attributeExists deadlineMentalRayThreads defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMentalRayThreads` : 0;
	int $mentalRayOffset = `attributeExists deadlineMentalRayOffset defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMentalRayOffset` : 0;
	int $mentalRayLocalRendering = `attributeExists deadlineMentalRayLocalRendering defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMentalRayLocalRendering` : false;
	string $mentalRayArgs = `attributeExists deadlineMentalRayArgs defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMentalRayArgs` : "";
	
	//string $savedOutputFilePath = `attributeExists deadlineOutputFilePath defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineOutputFilePath` : GetImageDirectory();
	//string $projectPath = `attributeExists deadlineProjectPathOverride defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineProjectPathOverride` : `workspace -q -fullName`;	
	string $savedOutputFilePath = GetImageDirectory();
	string $projectPath = `workspace -q -fullName`;
	
	int $overrideGlobalRangeEnable = false;
	int $overrideLayerSettingsEnable = false;
	int $tileRenderingEnable = true;
	int $regionRendering = false;
	int $tilesInX = `attributeExists deadlineTilesInX defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineTilesInX` : 2;
	int $tilesInY = `attributeExists deadlineTilesInY defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineTilesInY` : 2;
	int $tileSingleJob = `attributeExists deadlineTileSingleJob defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineTileSingleJob` : true;
	int $tileDependentJob = `attributeExists deadlineTileDependentJob defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineTileDependentJob` : true;
	int $tileCleanupJob = `attributeExists deadlineTileCleanupJob defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineTileCleanupJob` : false;
	
	int $tileUseDraft = `attributeExists tileUseDraft defaultRenderGlobals` ? `getAttr defaultRenderGlobals.tileUseDraft` : true;
	int $tileErrorOnMissing = `attributeExists tileErrorOnMissing defaultRenderGlobals` ? `getAttr defaultRenderGlobals.tileErrorOnMissing` : true;
	
	int $mentalRayAutoMemoryLimit = `attributeExists deadlineMentalRayAutoMemoryLimit defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMentalRayAutoMemoryLimit` : true;
	int $mentalRayMemoryLimit = `attributeExists deadlineMentalRayMemoryLimit defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMentalRayMemoryLimit` : 0;
	int $vrayAutoMemoryEnabled = `attributeExists deadlineVrayAutoMemoryEnabled defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineVrayAutoMemoryEnabled` : false;
	int $vrayAutoMemoryBuffer = `attributeExists deadlineVrayAutoMemoryBuffer defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineVrayAutoMemoryBuffer` : 500;
	
	string $mentalRayFilename = `attributeExists deadlineMentalRayFilename defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineMentalRayFilename` : "";
	
	string $vrayFilename = `attributeExists deadlineVRayFilename defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineVRayFilename` : "";
	int $submitVRayJob = `attributeExists deadlineSubmitVRayJob defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitVRayJob` : false;
	int $vrayThreads = `attributeExists deadlineVRayThreads defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineVRayThreads` : 0;
	
	int $submitVrimg2ExrJob = `attributeExists deadlineSubmitVrimg2ExrJob defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitVrimg2ExrJob` : false;
	int $deleteVrimgFiles = `attributeExists deadlineDeleteVrimgFiles defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineDeleteVrimgFiles` : false;
	
	int $exportPRManThreads = `attributeExists deadlineExportPRManThreads defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineExportPRManThreads` : 0;
	int $submitPRManJob = `attributeExists deadlineSubmitPRManJob defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitPRManJob` : false;
	int $prmanThreads = `attributeExists deadlinePRManThreads defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlinePRManThreads` : 0;
	string $prmanArgs = `attributeExists deadlinePRManArgs defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlinePRManArgs` : "";
	
	int $submitArnoldJob = `attributeExists deadlineSubmitArnoldJob defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSubmitArnoldJob` : false;
	int $arnoldThreads = `attributeExists deadlineArnoldThreads defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineArnoldThreads` : 0;
	string $arnoldArgs = `attributeExists deadlineArnoldArgs defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineArnoldArgs` : "";
	
	string $draftTemplate = `attributeExists deadlineDraftTemplate defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineDraftTemplate` : "";
	string $draftUser = `attributeExists deadlineDraftUser defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineDraftUser` : "";
	string $draftEntity = `attributeExists deadlineDraftEntity defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineDraftEntity` : "";
	string $draftVersion = `attributeExists deadlineDraftVersion defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineDraftVersion` : "";
	string $draftExtraArgs = `attributeExists deadlineDraftExtraArgs defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineDraftExtraArgs` : "";
	
	int $submitDraftJob = `attributeExists deadlineUseDraft defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineUseDraft` : false;
	int $uploadDraftToShotgun = `attributeExists deadlineUploadDraftToShotgun defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineUploadDraftToShotgun` : false;
	
	string $sgDisplayInfo = `attributeExists deadlineSGDisplayInfo defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSGDisplayInfo` : "";
	string $sgVersionName = `attributeExists deadlineSGVersionName defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSGVersionName` : "";
	string $sgDescription = `attributeExists deadlineSGDescription defaultRenderGlobals` ? `getAttr defaultRenderGlobals.deadlineSGDescription` : "";
	
	if( `attributeExists deadlineSGInfoKeys defaultRenderGlobals` )
		$SGInfoKeys = `getAttr defaultRenderGlobals.deadlineSGInfoKeys`;
	else
		clear $SGInfoKeys;
	
	if( `attributeExists deadlineSGInfoValues defaultRenderGlobals` )
		$SGInfoValues = `getAttr defaultRenderGlobals.deadlineSGInfoValues`;
	else
		clear $SGInfoValues;
	
	// Read in maximum priority.
	string $priorityQuery = CallDeadlineCommand( "-getmaximumpriority", false );
	int $maximumPriority = (int) $priorityQuery;
	if( $maximumPriority == 0 )
		$maximumPriority = 100;
	
	if( $priority > $maximumPriority )
		$priority = ($maximumPriority / 2);
	
	// Read in the pools.
	string $deadlinePools[];
	string $poolsQuery = CallDeadlineCommand( "-pools", false );
	tokenize $poolsQuery "\n" $deadlinePools;
		
	// Read in the groups.
	string $deadlineGroups[];
	string $groupQuery = CallDeadlineCommand( "-groups", false );
	tokenize $groupQuery "\n" $deadlineGroups;
	
	// Get the frame range.
	int $range[] = GetFrameRange();
	int $fromFrame = $range[0];
	int $toFrame = $range[1];
	int $byFrame = $range[2];
	
	int $currTime = `currentTime -query`;
	
	string $frameRange = $fromFrame + "-" + $toFrame;
	if( $byFrame > 1 )
		$frameRange = $frameRange + "x" + $byFrame;
	
	int $renderHalfFrames = false;
	if( $byFrame == 0.5 )
		$renderHalfFrames = true;
	
	// Get the CPU count
	int $cpuEnabled = EnableCpuOption( $renderer );
	int $cpus = 0;
	if( $cpuEnabled )
		$cpus = GetCpuSetting( $renderer );
	
	// Get if layers are enabled
	$renderLayerEnabled = IsRenderLayersOn();
	
	// Delete any previous windows.
	if( `window -exists DeadlineSubmitWindow` )
		deleteUI -window DeadlineSubmitWindow;
	
	// Create a new submission dialog window.
	string $window = `window DeadlineSubmitWindow`;
	if( `windowPref -exists DeadlineSubmitWindow` )
		windowPref -remove DeadlineSubmitWindow; // reset preference
	
	// Get the location of the main window.
	global string $gMainWindow;
	int $mainTopLeft[] = `window -q -tlc $gMainWindow`;
	
	// Add controls to the submission dialog.
	int $windowWidth = 500;
	int $windowHeight = 760;
	
	int $labelWidth = 110;
	int $controlWidth = 320;
	
	$DeadlineSubmitterWindow = `window -e -resizeToFitChildren true -sizeable true -title "Submit Job To Deadline" -widthHeight ($windowWidth+8) $windowHeight -tlc ($mainTopLeft[0] + 50) ($mainTopLeft[1] + 50) DeadlineSubmitWindow`;
	formLayout -width ($windowWidth+16) -nd 100 mainFormLayout;
	
	scrollLayout -width ($windowWidth+8) -horizontalScrollBarThickness 0 mainScrollLayout;
	
		$MainTabLayout = `tabLayout frw_mainTabLayout`;
			columnLayout -adj true -columnAttach "both" 4 mayaTabLayout;
			
				frameLayout -label "Job Description" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
					columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
						$JobNameGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Job Name" -buttonLabel "<" -text $jobName -changeCommand SavePersistentDeadlineOptions -annotation "The name of the job (press '<' button to use the scene file name)" frw_JobName`;
						textFieldButtonGrp -e -bc SetJobName $JobNameGrp;
						
						textFieldGrp -label "Comment" -cl2 "left" "left" -cw2 $labelWidth 320 -text $jobComment -changeCommand SavePersistentDeadlineOptions -annotation "A brief comment about the job" frw_JobComment;
						textFieldGrp -label "Department" -cl2 "left" "left" -cw2 $labelWidth 320 -text $department -changeCommand SavePersistentDeadlineOptions -annotation "The department the job (or the job's user) belongs to" frw_Department;
					setParent ..;
				setParent ..;
			
				frameLayout -label "Job Scheduling" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
					columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
						string $poolsBox = `optionMenuGrp -label "Pool" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand SavePersistentDeadlineOptions -annotation "The pool the job belongs to" frw_deadlinePool`;
						int $i; for( $i = 0; $i < size($deadlinePools); ++$i )
						{ 
							menuItem -label $deadlinePools[$i];
							if( $deadlinePools[$i] == $savedJobPool )
								optionMenuGrp -e -select ($i+1) $poolsBox;
						}
						
						string $secondaryPoolsBox = `optionMenuGrp -label "Secondary Pool" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand SavePersistentDeadlineOptions -annotation "The secondary pool lets you specify a Pool to use if the primary Pool does not have any available Slaves" frw_deadlineSecondaryPool`;
						menuItem -label "";
						if( "" == $savedJobSecondaryPool )
							optionMenuGrp -e -select 1 $secondaryPoolsBox;
						
						int $i; for( $i = 0; $i < size($deadlinePools); ++$i )
						{ 
							menuItem -label $deadlinePools[$i];
							if( $deadlinePools[$i] == $savedJobSecondaryPool )
								optionMenuGrp -e -select ($i+2) $secondaryPoolsBox;
						}
							
						string $groupsBox = `optionMenuGrp -label "Group" -cl2 "left" "left" -cw2 $labelWidth 320 -changeCommand SavePersistentDeadlineOptions -annotation "The group the job belongs to" frw_Group`;
						int $i; for( $i = 0; $i < size( $deadlineGroups ); ++$i )
						{ 
							menuItem -label $deadlineGroups[$i];
							if( $deadlineGroups[$i] == $savedGroup )
								optionMenuGrp -e -select ($i+1) $groupsBox;
						}
						
						intSliderGrp -label "Priority" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue $maximumPriority -v $priority -changeCommand SavePersistentDeadlineOptions -annotation "The job's priority (0 is the lowest, 100 is the highest)" frw_JobPriority;
						intSliderGrp -label "Machine Limit" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 1000 -v $limitCount -changeCommand SavePersistentDeadlineOptions -annotation "Limit the number of machines that can render this job concurrently (specify 0 for no machine limit)" frw_LimitCount;
						intSliderGrp -label "Concurrent Tasks" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 1 -maxValue 16 -v $concurrentTasks -changeCommand SavePersistentDeadlineOptions -annotation "The number of tasks a slave can dequeue for this job simultaneously" frw_ConcurrentTasks;
						intSliderGrp -label "Task Timeout" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 5000 -v $SlaveTimeout -changeCommand SavePersistentDeadlineOptions -annotation "The number of minutes a slave has to render an individual task before timing out (specify 0 for no limit)" frw_SlaveTimeout;
						intSliderGrp -label "Minimum Task Time" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 5000 -v $MinSlaveTimeout -changeCommand SavePersistentDeadlineOptions -annotation "The minimum number of minutes a slave should render a task for, otherwise an error will be reported (specify 0 for no minimum)" frw_MinSlaveTimeout;
						
						$LimitGroupGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Limit Groups" -buttonLabel "..." -text $limitGroups -changeCommand SavePersistentDeadlineOptions -annotation "The limit groups that this job requires." frw_limitGroups`;
						textFieldButtonGrp -e -bc SetLimitGroups $LimitGroupGrp;
							
						$DependenciesGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Dependencies" -buttonLabel "..." -text $dependencies -changeCommand SavePersistentDeadlineOptions -annotation "The jobs that this job is dependent on." frw_dependencies`;
						textFieldButtonGrp -e -bc SetDependencies $DependenciesGrp;
						
						$MachineListGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Machine List" -buttonLabel "..." -text $machineList -changeCommand SavePersistentDeadlineOptions -annotation "The whitelist or blacklist for the job." frw_machineList`;
						textFieldButtonGrp -e -bc SetMachineList $MachineListGrp;
						
						
						//~ rowLayout -numberOfColumns 3 -cw3 $labelWidth 158 160 -ct3 "left" "left" "left";
							//~ text -align "left" -label "" frw_dummySubmitSuspendedLabel;	
							//~ checkBox -label "Submit As Suspended" -v $submitAsSuspended -changeCommand SavePersistentDeadlineOptions -annotation "If checked, this job will be submitted in the suspended state" frw_submitAsSuspended;
							//~ checkBox -label "Machine List is a Blacklist" -v $isBlacklist -changeCommand SavePersistentDeadlineOptions -annotation "If checked, the machine list will be a blacklist. Otherwise, it is a whitelist." frw_isBlacklist;
						//~ setParent ..;
						
						//~ string $onCompleteBox = `optionMenuGrp -label "On Complete" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand SavePersistentDeadlineOptions -annotation "What to do with the job after it completes." frw_onComplete`;
						//~ menuItem -label "Nothing";
						//~ menuItem -label "Archive";
						//~ menuItem -label "Delete";
						//~ optionMenuGrp -e -select (1) $onCompleteBox;
						
						rowLayout -numberOfColumns 2 -cw2 (160 + $labelWidth) 160 -ct2 "left" "left";
							string $onCompleteBox = `optionMenuGrp -label "On Complete" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand SavePersistentDeadlineOptions -annotation "What to do with the job after it completes." frw_onComplete`;
							menuItem -label "Nothing";
							menuItem -label "Archive";
							menuItem -label "Delete";
							optionMenuGrp -e -select (1) $onCompleteBox;
							
							checkBox -label "Machine List is a Blacklist" -v $isBlacklist -changeCommand SavePersistentDeadlineOptions -annotation "If checked, the machine list will be a blacklist. Otherwise, it is a whitelist." frw_isBlacklist;
						setParent ..;
						
						rowLayout -numberOfColumns 2 -cw2 $labelWidth 158 -ct2 "left" "left";
							text -align "left" -label "" frw_dummySubmitSuspendedLabel;
							checkBox -label "Submit As Suspended" -v $submitAsSuspended -changeCommand SavePersistentDeadlineOptions -annotation "If checked, this job will be submitted in the suspended state" frw_submitAsSuspended;
						setParent ..;						
						
					setParent ..;
				setParent ..;
				
				frameLayout -label "Render Options" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true;
					columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
						int $framesEnabled = true;
						if( $renderLayerEnabled && $submitEachRenderLayer )
							$framesEnabled = $overrideLayerSettings;
						$framesEnabled = $framesEnabled && IsAnimatedOn();
						
						textFieldGrp -label "Frame List" -en $framesEnabled -cl2 "left" "left" -cw2 $labelWidth 320 -changeCommand SavePersistentDeadlineOptions -annotation "Enter a list of frames to render, separated by commas for separate frames, or dashes for continuous sequences of frames. e.g. 1, 5-10, 100" -text $frameRange frw_FrameList;
						intSliderGrp -label "Task Size" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 1 -maxValue 1000 -v $chunkSize -changeCommand SavePersistentDeadlineOptions -annotation "Each task for the job will consist of this many frames" frw_FrameGroup;
						
						rowLayout -numberOfColumns 1 -cw 1 400 -ct1 "left";
							string $camerasBox = `optionMenuGrp -label "Camera" -cl2 "left" "left" -cw2 $labelWidth 320 -changeCommand SavePersistentDeadlineOptions -annotation "Leave blank to render using the default camera settings." frw_camera`;
							//string $cameraList[] = `ls -cameras`;
							menuItem -label " ";
							//int $i; for( $i = 0; $i < size($cameraList); ++$i )
							//	menuItem -label $cameraList[$i];
						
							string $cameraNames[] = `listTransforms -cameras`;
							for( $cameraName in $cameraNames )
								menuItem -label $cameraName;
						
							optionMenuGrp -e -select (1) $camerasBox;
						setParent ..;
						
						$ProjectPathGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Project Path" -buttonLabel "..." -text $projectPath -changeCommand SavePersistentDeadlineOptions -annotation "Use this Maya project path to load the Maya scene" frw_projectPath`;
						textFieldButtonGrp -e -bc SetProjectDir $ProjectPathGrp;
						
						$ImageOutputPathGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Output Path" -buttonLabel "..." -text $savedOutputFilePath -changeCommand SavePersistentDeadlineOptions -annotation "The path to which the output files will be sent. Must be network accessible." frw_outputFilePath`;
						textFieldButtonGrp -e -bc SetImageDir $ImageOutputPathGrp;
						
						$mayaBuildEnabled = true;
						rowLayout -numberOfColumns 2 -cw2 (160 + $labelWidth) 160 -ct2 "left" "left";
							string $mayaBuildBox = `optionMenuGrp -en $mayaBuildEnabled -label "Maya Build" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand SavePersistentDeadlineOptions -annotation "Force Deadline to render using the specified build of Maya" frw_mayaBuild`;
							menuItem -label "None";
							menuItem -label "32bit";
							menuItem -label "64bit";
							if( $mayaBuildEnabled )
							{
								if( `about -macOS` )
									optionMenuGrp -e -select (1) $mayaBuildBox;
								else
								{
									if( `about -is64` )
										optionMenuGrp -e -select (3) $mayaBuildBox;
									else
										optionMenuGrp -e -select (2) $mayaBuildBox;
								}
							}
							else
								optionMenuGrp -e -select (1) $mayaBuildBox;
							
							string $submitMayaSceneBox = `checkBox -label "Submit Maya Scene File" -v $submitMayaScene -changeCommand SavePersistentDeadlineOptions -annotation "If unchecked, the Maya scene file should be network accessible" frw_submitMayaScene`;
						setParent ..;
							
						rowLayout -numberOfColumns 3 -cw3 $labelWidth 158 160 -ct3 "left" "left" "left";
							text -align "left" -label "" frw_dummyMayaBatchLabel;
							checkBox -label "Use MayaBatch Plugin" -align "left" -v $useMayaBatchPlugin -changeCommand SavePersistentDeadlineOptions -annotation "The MayaBatch plugin is a new Maya plugin which keeps the scene loaded between frames" frw_useMayaBatchPlugin;
							checkBox -enable (!$useMayaBatchPlugin) -label "Ignore Error Code 211" -align "left" -v 0 -annotation "Does not fail and requeue the render on an Exit Code of 211. Useful if the render actually succeeds and is still throwing this error." frw_ignoreError211;
						setParent ..;
						
						$StartupScriptPathGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Startup Script" -buttonLabel "..." -text $startupScript -changeCommand SavePersistentDeadlineOptions -annotation "Maya will source the specified script file on startup" frw_startupScript`;
						textFieldButtonGrp -e -bc SetStartupScriptPath $StartupScriptPathGrp;
						
						textFieldGrp -enable (!$useMayaBatchPlugin) -label "Command Line Args" -cl2 "left" "left" -cw2 $labelWidth 320 -text $mayaArgs -changeCommand SavePersistentDeadlineOptions -annotation "Additional command line options to pass to Maya" frw_mayaArgs;
						
						string $mayaJobTypeBox = `optionMenuGrp -label "Deadline Job Type" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand UpdateJobType -annotation "Select the type of job that you want to submit to Deadline" frw_mayaJobType`;
						menuItem -label "Maya Render Job";
						menuItem -label "Mental Ray Export Job";
						menuItem -label "VRay Export Job";
						menuItem -label "Renderman Export Job";
						menuItem -label "Arnold Export Job";
						optionMenuGrp -e -select (1) $mayaJobTypeBox;
						
						string $MayaRenderOptionsRollout = `frameLayout -label "Maya Render Job" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true`;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
								rowLayout -numberOfColumns 1 -cw 1 400 -ct1 "left";
									text -align "left" -label "Renders a normal Maya job using the current Maya renderer." frw_tileLabel;
								setParent ..;
								
								intSliderGrp -en $cpuEnabled -label "Threads" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 64 -v $cpus -changeCommand SavePersistentDeadlineOptions -annotation  "The number of processors to use during rendering (specify 0 to use all processors available)" frw_MaxCPUs;
								
								int $frameNumberOffsetEnabled = IsAnimatedOn();
								intSliderGrp -label "Frame Number Offset" -en $frameNumberOffsetEnabled -cal 1 "left" -cw 1 $labelWidth -field true -minValue -10000 -maxValue 10000 -v 0 -changeCommand SavePersistentDeadlineOptions -annotation  "Uses Maya's frame renumbering option to offset the frames that are rendered" frw_frameNumberOffset;
								
								if( $renderLayerEnabled )
								{
									$tileRenderingEnable = $submitEachRenderLayer; // use to submit as separate job value for the tile rendering enable
									$overrideGlobalRangeEnable = $submitEachRenderLayer;
									$overrideLayerSettingsEnable = $submitEachRenderLayer;
									if( !$submitEachRenderLayer )
										$regionRendering = false;
								}
								
								rowLayout -numberOfColumns 2 -cw2 240 160 -ct2 "left" "left";
									string $submitEachRenderLayerBox = `checkBox -en $renderLayerEnabled -label "Submit Render Layers As Separate Jobs" -v $submitEachRenderLayer -changeCommand SavePersistentDeadlineOptions -annotation "Check this to submit each renderable Render Layer as a separate Deadline job. Note that the frame range will be pulled from the render globals for each layer." frw_submitEachRenderLayer`;
									checkBox -enable $overrideLayerSettingsEnable -label "Override Layer Job Settings" -v $overrideLayerSettings -changeCommand SavePersistentDeadlineOptions -annotation "If checked, the job name, frame range, and task size can be set for each render layer when submitting a separate job for each layer" frw_overrideLayerSettings;
								setParent ..;
								
								rowLayout -numberOfColumns 2 -cw2 240 160 -ct2 "left" "left";
									checkBox -label "Submit Cameras As Separate Jobs" -align "left" -v $submitEachCamera -changeCommand SavePersistentDeadlineOptions -annotation "Check this to submit each renderable Camera as a separate Deadline job." frw_submitEachCamera;
									checkBox -enable ($submitEachCamera) -label "Ignore Default Cameras" -align "left" -v $ignoreDefaultCameras -changeCommand SavePersistentDeadlineOptions -annotation "Check this to ignore default cameras (persp, top, etc) when submitting each renderable Camera as a separate Deadline job." frw_ignoreDefaultCameras;
								setParent ..;
								
								rowLayout -numberOfColumns 2 -cw2 240 160 -ct2 "left" "left";
									checkBox -label "Enable Local Rendering" -align "left" -v $localRendering -changeCommand SavePersistentDeadlineOptions -annotation "If this option is set to true, the slaves will render locally, and then copy the images to the network output directory on completion" frw_localRendering;
									checkBox -label "Strict Error Checking" -align "left" -v $strictErrorChecking -changeCommand SavePersistentDeadlineOptions -annotation "If checked, Deadline will fail the render job if any error message is detected" frw_strictErrorChecking;
								setParent ..;
								
								rowLayout -numberOfColumns 2 -cw2 240 160 -ct2 "left" "left";
									$halfFramesEnabled = ShowHalfFramesOption( $renderer );
									checkBox -en $halfFramesEnabled -label "Render Half Frames" -v $renderHalfFrames -changeCommand SavePersistentDeadlineOptions -annotation "If checked, frames will be split into two using a step of 0.5" frw_renderHalfFrames;
								setParent ..;
							setParent ..;
						setParent ..;
						
						$MayaRenderOptionsArnoldRollout = `frameLayout -label "Arnold Options" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -visible ($renderer == "arnold")`;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
								
								$arnoldVerboseEnabled = ( $renderer == "arnold" );
								string $arnoldVerboseBox = `optionMenuGrp -en $arnoldVerboseEnabled -label "Arnold Verbosity" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand SavePersistentDeadlineOptions -annotation "Set the verbosity level for Arnold renders" frw_arnoldVerbose`;
								menuItem -label "0";
								menuItem -label "1";
								menuItem -label "2";
								if( $arnoldVerboseEnabled )
									optionMenuGrp -e -select (2) $arnoldVerboseBox;
							setParent ..;
						setParent ..;
						
						$MayaRenderOptionsMentalRayRollout = `frameLayout -label "Mental Ray Options" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -visible ($renderer == "mentalRay")`;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
								
								$mentalRayVerboseEnabled = ( $renderer == "mentalRay" );
								string $mentalRayVerboseBox = `optionMenuGrp -en $mentalRayVerboseEnabled -label "Mental Ray Verbosity" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand SavePersistentDeadlineOptions -annotation "Set the verbosity level for Mental Ray renders" frw_mentalRayVerbose`;
								menuItem -label "No Messages";
								menuItem -label "Fatal Messages Only";
								menuItem -label "Error Messages";
								menuItem -label "Warning Messages";
								menuItem -label "Info Messages";
								menuItem -label "Progress Messages";
								menuItem -label "Detailed Messages (Debug)";
								if( $mentalRayVerboseEnabled )
									optionMenuGrp -e -select (6) $mentalRayVerboseBox;
								
								checkBox -label "Auto Memory Limit" -align "left" -v $mentalRayAutoMemoryLimit -changeCommand SavePersistentDeadlineOptions -annotation "If checked, Mental Ray will automatically detect the optimal memory limit when rendering" frw_autoMemoryLimit;
								
								rowLayout -numberOfColumns 1 -cw 1 (320 + $labelWidth) -ct1 "right";
									intSliderGrp -enable (!$mentalRayAutoMemoryLimit) -label "Memory Limit (MB)" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 100000 -v $mentalRayMemoryLimit -changeCommand SavePersistentDeadlineOptions -annotation  "Soft limit (in MB) for the memory used by Mental Ray (specify 0 for unlimited memory)" frw_memoryLimit;
								setParent ..;
								
							setParent ..;
						setParent ..;
						
						$MayaRenderOptionsRedshiftRollout = `frameLayout -label "Redshift Options" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -visible ($renderer == "redshift")`;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
								
								rowLayout -numberOfColumns 1 -cw 1 (320 + $labelWidth) -ct1 "right";
									intSliderGrp -label "GPUs Per Task" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 1024 -v 0 -changeCommand SavePersistentDeadlineOptions -annotation  "The number of GPUs to use per task. If set to 0, the default number of GPUs will be used." frw_redshiftGPUsPerTask;
								setParent ..;
								
							setParent ..;
						setParent ..;
								
						$MayaRenderOptionsVRayRollout = `frameLayout -label "VRay Options" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -visible ($renderer == "vray")`;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
								checkBox -enable $useMayaBatchPlugin -label "Auto Memory Limit Detection (Requires the MayaBatch Plugin)" -align "left" -v $vrayAutoMemoryEnabled -changeCommand SavePersistentDeadlineOptions -annotation "If checked, Deadline will automatically detect the dynamic memory limit for VRay prior to rendering." frw_vrayAutoMemoryEnabled;
								
								rowLayout -numberOfColumns 1 -cw 1 (320 + $labelWidth) -ct1 "right";
									intSliderGrp -enable ($useMayaBatchPlugin && $vrayAutoMemoryEnabled) -label "Memory Buffer (MB)" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 100000 -v $vrayAutoMemoryBuffer -changeCommand SavePersistentDeadlineOptions -annotation  "Deadline subtracts this value from the system's unused memory to determine the dynamic memory limit for VRay." frw_vrayAutoMemoryBuffer;
								setParent ..;
								
							setParent ..;
						setParent ..;
						
						$MayaRenderOptionsTileRollout = `frameLayout -label "Tile Rendering" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -collapse true`;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
								rowLayout -numberOfColumns 1 -cw 1 400 -ct1 "left";
									text -align "left" -label "For arnold, mayaSoftware, mentalRay, renderMan, finalRender, turtle, and vray jobs only.\nIf you have multiple layers, this only works if you submit each layer as a separate job." frw_tileLabel;
								setParent ..;
								
								rowLayout -numberOfColumns 1 -cw 1 $labelWidth -ct1 "left";
									checkBox -enable $tileRenderingEnable -label "Enable Tile Rendering" -changeCommand SavePersistentDeadlineOptions -v $regionRendering -annotation "Tile rendering splits up a frame between multiple machines (the assembly is done automatically for bmp, exr, jpg, png, tga, and tif)" frw_regionRendering;
								setParent ..;
								
								rowLayout -numberOfColumns 1 -cw 1 (320 + $labelWidth) -ct1 "right";
									intSliderGrp -enable $regionRendering -label "Tiles In X" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 1 -maxValue 200 -v $tilesInX -changeCommand SavePersistentDeadlineOptions -annotation "The number of tiles in the X direction" frw_tilesInX;
								setParent ..;
								
								rowLayout -numberOfColumns 1 -cw 1 (320 + $labelWidth) -ct1 "right";
									intSliderGrp -enable $regionRendering -label "Tiles In Y" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 1 -maxValue 200 -v $tilesInY -changeCommand SavePersistentDeadlineOptions -annotation "The number of tiles in the Y direction" frw_tilesInY;
								setParent ..;
								
								string $tileRenderingSingleJob = `checkBox -en $regionRendering -align "left" -label "Submit All Tiles As A Single Job" -v $tileSingleJob -changeCommand SavePersistentDeadlineOptions -annotation "Check this to combine all tiles into a single job." frw_submitTileSingleJob`;
								
								rowLayout -numberOfColumns 1 -cw 1 (320 + $labelWidth) -ct1 "right";
									intSliderGrp -enable $regionRendering -label "Single Job Frame" -cal 1 "left" -cw 1 $labelWidth -field true -minValue -100000 -maxValue 100000 -v $currTime -changeCommand SavePersistentDeadlineOptions -annotation "The single frame to render." frw_tileSingleFrame;
								setParent ..;
								
								rowLayout -numberOfColumns 2 -cw2 240 160 -ct2 "left" "right";
									checkBox -en $regionRendering -align "left" -label "Submit Dependent Assembly Job" -v $tileDependentJob -changeCommand SavePersistentDeadlineOptions -annotation "Check this submit an assembly job that is dependent on the first job." frw_submitTileDependentJob;
									checkBox -en $regionRendering -align "left" -label "Cleanup Tiles After Assembly" -v $tileCleanupJob -changeCommand SavePersistentDeadlineOptions -annotation "Check this to delete the tile jobs after the assembly job completes." frw_submitTileCleanupJob;
								setParent ..;
								rowLayout -numberOfColumns 2 -cw2 203 160 -ct2 "left" "right";
									checkBox -en $regionRendering -align "left" -label "Assemble Using Draft" -v $tileUseDraft -changeCommand SavePersistentDeadlineOptions -annotation "Check this to assemble tiles using draft" frw_submitTileUseDraft;
									checkBox -en ($tileUseDraft && $regionRendering) -align "left" -label "Error on Missing Tiles" -v $tileErrorOnMissing -changeCommand SavePersistentDeadlineOptions -annotation "Check this force the render to fail on a missing tile" frw_submitTileErrorOnMissing;
								setParent ..;
							setParent ..;
						setParent ..;
						
						string $MentalRayExportRollout = `frameLayout -label "Mental Ray Export Job" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -visible false`;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
								rowLayout -numberOfColumns 1 -cw 1 400 -ct1 "left";
									text -align "left" -label "Uses Mental Ray to export mi files instead of rendering." frw_tileLabel;
								setParent ..;
								
								rowLayout -numberOfColumns 2 -cw2 $labelWidth 320 -ct2 "left" "right";
									$MentalRayFilenameGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Output File" -buttonLabel "..." -text $mentalRayFilename -changeCommand SavePersistentDeadlineOptions -annotation "The full filename of the Mental Ray files that will be exported (padding is handled automatically by the exporter)" frw_mentalRayFilePath`;
									textFieldButtonGrp -e -bc SetMentalRayFilename $MentalRayFilenameGrp;
								setParent ..;
								
								rowLayout -numberOfColumns 2 -cw2 110 290 -ct2 "left" "left";
									button -label "Export Settings..." -width 100 -c OpenExportSettings -height 26 -annotation "Opens the Export Settings dialog";
									text -label "(This dialog must be open when submitting the job)";
								setParent ..;
							setParent ..;
						setParent ..;
						
						string $MentalRayExportRenderJobRollout = `frameLayout -label "Mental Ray Render Job" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -visible false`;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
								checkBox -label "Submit Dependent Mental Ray Standalone Render Job" -align "left" -v $submitMentalRayJob -changeCommand SavePersistentDeadlineOptions -annotation "If this option is set to true, a Mental Ray Standalone job that is dependent on the export job will also be submitted" frw_submitMentalRayJob;
								
								intSliderGrp -label "Threads" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 16 -v $mentalRayThreads -changeCommand SavePersistentDeadlineOptions -annotation  "The number of threads to use during rendering (specify 0 to use all processors available)" frw_mentalRayThreads;
								
								intSliderGrp -label "Frame Offset" -cal 1 "left" -cw 1 $labelWidth -field true -minValue -10000 -maxValue 10000 -v $mentalRayOffset -changeCommand SavePersistentDeadlineOptions -annotation  "The value to offset the frame numbers by when rendering separate mi files per frame" frw_mentalRayOffset;
								
								rowLayout -numberOfColumns 2 -cw2 (160 + $labelWidth) 160 -ct2 "left" "left";
									string $mentalRayBuildBox = `optionMenuGrp -label "Mental Ray Build" -cl2 "left" "left" -cw2 $labelWidth 160 -changeCommand SavePersistentDeadlineOptions -annotation "Force Deadline to render using the specified build of Maya" frw_mentalRayBuild`;
									menuItem -label "None";
									menuItem -label "32bit";
									menuItem -label "64bit";
									if( $mayaBuildEnabled )
									{
										if( `about -is64` )
											optionMenuGrp -e -select (3) $mentalRayBuildBox;
										else
											optionMenuGrp -e -select (2) $mentalRayBuildBox;
									}
									else
										optionMenuGrp -e -select (1) $mentalRayBuildBox;
									
									checkBox -label "Enable Local Rendering" -v $mentalRayLocalRendering -changeCommand SavePersistentDeadlineOptions -annotation "If this option is set to true, the slaves will render locally, and then copy the images to the network output directory on completion" frw_mentalRayLocalRendering;
								setParent ..;
								
								textFieldGrp -label "Command Line Args" -cl2 "left" "left" -cw2 $labelWidth 320 -text $mentalRayArgs -changeCommand SavePersistentDeadlineOptions -annotation "Additional command line options to pass to mental ray" frw_mentalRayArgs;
							setParent ..;
						setParent ..;
						
						string $VrayExportRollout = `frameLayout -label "VRay Export Job" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -visible false`;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
								rowLayout -numberOfColumns 1 -cw 1 400 -ct1 "left";
									text -align "left" -label "Uses VRay to export vrscene files instead of rendering." frw_tileLabel;
								setParent ..;
								
								rowLayout -numberOfColumns 2 -cw2 $labelWidth 320 -ct2 "left" "right";
									$VRayFilenameGrp = `textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Output File" -buttonLabel "..." -text $vrayFilename -changeCommand SavePersistentDeadlineOptions -annotation "The full filename of the VRay files that will be exported (padding is handled automatically by the exporter)" frw_vrayFilePath`;
									textFieldButtonGrp -e -bc SetVRayFilename $VRayFilenameGrp;
								setParent ..;
							setParent ..;
						setParent ..;
							
						string $VrayExportRenderJobRollout = `frameLayout -label "VRay Render Job" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -visible false`;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
								checkBox -label "Submit Dependent VRay Standalone Render Job" -align "left" -v $submitVRayJob -changeCommand SavePersistentDeadlineOptions -annotation "If this option is set to true, a VRay Standalone job that is dependent on the export job will also be submitted" frw_submitVRayJob;
								
								intSliderGrp -label "Threads" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 16 -v $vrayThreads -changeCommand SavePersistentDeadlineOptions -annotation  "The number of threads to use during rendering (specify 0 to use all processors available)" frw_vrayThreads;
								
							setParent ..;
						setParent ..;
						
						int $vrimg2ExrEnabled = true;
						string $VrayExportVrimgJobRollout = `frameLayout -label "Vrimg2Exr Conversion Job" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -visible false`;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
								checkBox -enable $vrimg2ExrEnabled -label "Convert vrimg Files To exr With Dependent Job" -align "left" -v $submitVrimg2ExrJob -changeCommand SavePersistentDeadlineOptions -annotation "Enable this option to submit a dependent job that converts the vrimg output files to exr files" frw_submitVrimg2ExrJob;
								checkBox -enable $vrimg2ExrEnabled -label "Delete Input vrimg Files After Conversion" -align "left" -v $deleteVrimgFiles -changeCommand SavePersistentDeadlineOptions -annotation "Enable this option to delete the input vrimg file after the conversion has finished." frw_deleteVrimgFiles;
							setParent ..;
						setParent ..;
						
						string $RendermanExportRollout = `frameLayout -label "Renderman Export Job" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -visible false`;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
								rowLayout -numberOfColumns 1 -cw 1 400 -ct1 "left";
									text -align "left" -label "Uses Renderman to export rib files instead of rendering." frw_exportPRManLabel;
								setParent ..;
								
								intSliderGrp -label "Threads" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 16 -v $exportPRManThreads -changeCommand SavePersistentDeadlineOptions -annotation  "The number of threads to use during exporting (specify 0 to use all processors available)" frw_exportPRManThreads;
							setParent ..;
						setParent ..;
						
						string $RendermanExportRenderJobRollout = `frameLayout -label "PRMan Render Job" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -visible false`;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
								checkBox -label "Submit Dependent PRMan Standalone Render Job" -align "left" -v $submitPRManJob -changeCommand SavePersistentDeadlineOptions -annotation "If this option is set to true, a PRMan Standalone job that is dependent on the export job will also be submitted" frw_submitPRManJob;
								
								intSliderGrp -label "Threads" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 16 -v $prmanThreads -changeCommand SavePersistentDeadlineOptions -annotation  "The number of threads to use during rendering (specify 0 to use all processors available)" frw_prmanThreads;
								
								textFieldGrp -label "Command Line Args" -cl2 "left" "left" -cw2 $labelWidth 320 -text $prmanArgs -changeCommand SavePersistentDeadlineOptions -annotation "Additional command line options to pass to PRMan" frw_prmanArgs;
							setParent ..;
						setParent ..;
						
						string $ArnoldExportRollout = `frameLayout -label "Arnold Export Job" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -visible false`;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
								rowLayout -numberOfColumns 1 -cw 1 400 -ct1 "left";
									text -align "left" -label "Uses Arnold to export ass files instead of rendering." frw_exportArnoldLabel;
								setParent ..;
							setParent ..;
						setParent ..;
						
						string $ArnoldExportRenderJobRollout = `frameLayout -label "Arnold Render Job" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -visible false`;
							columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4;
								checkBox -label "Submit Dependent Arnold Standalone Render Job" -align "left" -v $submitArnoldJob -changeCommand SavePersistentDeadlineOptions -annotation "If this option is set to true, an Arnold Standalone job that is dependent on the export job will also be submitted" frw_submitArnoldJob;
								
								intSliderGrp -label "Threads" -cal 1 "left" -cw 1 $labelWidth -field true -minValue 0 -maxValue 16 -v $arnoldThreads -changeCommand SavePersistentDeadlineOptions -annotation  "The number of threads to use during rendering (specify 0 to use all processors available)" frw_arnoldThreads;
								
								textFieldGrp -label "Command Line Args" -cl2 "left" "left" -cw2 $labelWidth 320 -text $arnoldArgs -changeCommand SavePersistentDeadlineOptions -annotation "Additional command line options to pass to Arnold" frw_arnoldArgs;
							setParent ..;
						setParent ..;
					setParent ..;
				setParent ..;
			setParent ..;
			
			
			columnLayout -adj true -columnAttach "both" 4 shotgunTabLayout;
				//=================================================================
				// SHOTGUN
				global string $ShotgunResultsBox;
				
				frameLayout -label "Shotgun" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -collapse false;
					columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4 -columnAlign "left";
						
						rowLayout -numberOfColumns 3 -cw3 $labelWidth 160 160;
							text -label ""; //dummy label
							button -label "Connect to Shotgun..." - width 150 -command ConnectToShotgun;
							
							int $enable = `size $SGInfoKeys` > 0;
							string $UseShotgun = `checkBox -label "Submit Shotgun Info With Job" -value false -enable $enable -annotation "Check to use Shotgun." -changeCommand UseShotgunChanged frw_useShotgun`;
						setParent ..;
						
						textFieldGrp -enable false -label "Version Name" -cl2 "left" "left" -cw2 $labelWidth 325 -text $sgVersionName -annotation "The name of the Version that will be created in Shotgun." -changeCommand SavePersistentDeadlineOptions frw_ShotgunVersion;
						textFieldGrp -enable false -label "Description" -cl2 "left" "left" -cw2 $labelWidth 325 -text $sgDescription -annotation "The description of the Version that will be created in Shotgun." -changeCommand SavePersistentDeadlineOptions frw_ShotgunDescription;
						
						rowLayout -numberOfColumns 2 -cw2 $labelWidth 300;
							text -enable false -label "Selected Entity" -annotation "Details of the selected Shotgun entity to which the created Version will be attached." frw_ShotgunDetailLabel;
							$ShotgunResultsBox = `scrollField -wordWrap false -enable false -text $sgDisplayInfo -editable false -width 325 -height 140`;
						setParent ..;
					setParent ..;
				setParent ..;
				// END SHOTGUN
				//=================================================================
	
				//=================================================================
				// DRAFT
				frameLayout -label "Draft" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -collapse false;
					columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4 -columnAlign "left";
						rowLayout -numberOfColumns 3 -cw3 $labelWidth 180 140;
							text -label ""; //dummy label
							checkBox -label "Submit Draft Job On Completion" -value $submitDraftJob -changeCommand UseDraftChanged -enable true -annotation "Check to submit a Draft job in addition to the Maya job." frw_submitDraftJob;
							checkBox -label "Upload to Shotgun" -value $uploadDraftToShotgun -changeCommand SavePersistentDeadlineOptions -enable false -annotation "Check to upload Draft output to Shotgun." frw_uploadDraftToShotgun;
						setParent ..;
						
						textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Draft Template" -buttonLabel "..." -text $draftTemplate -changeCommand SavePersistentDeadlineOptions -annotation "The path to the Draft Template to use." -bc GetDraftTemplate frw_DraftTemplate;
						textFieldGrp -enable true -label "User" -cl2 "left" "left" -cw2 $labelWidth 325 -text $draftUser -changeCommand SavePersistentDeadlineOptions -annotation "The name of the user (used by Draft templates)." frw_DraftUser;
						textFieldGrp -enable true -label "Entity" -cl2 "left" "left" -cw2 $labelWidth 325 -text $draftEntity -changeCommand SavePersistentDeadlineOptions -annotation "The name of the entity (used by Draft templates)." frw_DraftEntity;
						textFieldGrp -enable true -label "Version" -cl2 "left" "left" -cw2 $labelWidth 325 -text $draftVersion -changeCommand SavePersistentDeadlineOptions -annotation "The version name (used by Draft templates)."  frw_DraftVersion;
						textFieldGrp -enable true -label "Additional Args" -cl2 "left" "left" -cw2 $labelWidth 325 -text $draftExtraArgs -changeCommand SavePersistentDeadlineOptions -annotation "The additional arguments (used by Draft templates)."  frw_DraftExtraArgs;
						
						rowLayout -numberOfColumns 2 -cw2 $labelWidth 325;
							text -label ""; //dummy label
							button -label "Use Shotgun Values" -width 200 -height 26 -annotation "Uses data from Shotgun to fill out the Draft settings." -command UseShotgunValues frw_UseShotgunDataButton;
						setParent ..;
					setParent ..;
				setParent ..;
				
				UseDraftChanged();
				// END DRAFT
				//=================================================================
			
			setParent ..;
			
//=================================================================================================
// NIM UI
			global string $nimIsMod;
			
			columnLayout -adj true -columnAttach "both" 4 nimTabLayout;
				
				int $nim_useNim = `attributeExists nim_useNim defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_useNim` : 0;
				string $nim_jobName = `attributeExists nim_jobName defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_jobName` : "";
				string $nim_showName = `attributeExists nim_showName defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_showName` : "";
				string $nim_class = `attributeExists nim_class defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_class` : "";
				string $nim_taskID = `attributeExists nim_taskID defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_taskID` : "";
				string $nim_shotName = "";
				string $nim_assetName = "";
				string $nim_itemID = "";
				
				string $nim_artist = "No Artist Found";
				if(`attributeExists nim_user defaultRenderGlobals`){
					$nim_artist = `getAttr defaultRenderGlobals.nim_user`;
				}
				else {
					print "NIM No User Found in Globals\n";
					$nim_artist = `getenv "USERNAME"`;
				}
				
				string $pCMD = "python(\"nim.getNimData('getUserFullName', '"+ $nim_artist +"' )\")";
				
				string $nim_user_array[];
				if($nimIsMod == 1){ $nim_user_array = eval($pCMD); }
				$nim_artist = getJsonValue($nim_user_array[0],"first_name")+" "+getJsonValue($nim_user_array[0],"last_name");
				
				
				if ($nim_class == "SHOT")
				{
					$nim_shotName = `attributeExists nim_name defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_name` : "";
					$nim_itemID = `attributeExists nim_shotID defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_shotID` : "";
				}
				else if ($nim_class == "ASSET")
				{
					$nim_assetName = `attributeExists nim_name defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_name` : "";
					$nim_itemID = `attributeExists nim_assetID defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_assetID` : "";
				}
				
				frameLayout -label "NIM v5.1.0" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -collapse false;
					columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4 -columnAlign "left";
						
						rowLayout -numberOfColumns 2 -cw2 $labelWidth 320;
							text -label ""; //dummy label
							
							int $enableNIM = 0;
							if ($nim_class != ""){ $enableNIM = 1;}
							string $useNIM = `checkBox -label "Submit NIM Info With Job" -value $nim_useNim -enable $enableNIM -annotation "Check to use NIM." -changeCommand UseNimChanged useNim_checkBox`;
						setParent ..;
						
						textFieldGrp -enable true -editable false -label "Artist:" -cl2 "left" "left" -cw2 $labelWidth 325 -text $nim_artist -annotation "The name of the artist from NIM." nim_DraftArtist;
						textFieldGrp -enable true -editable false -label "Job:" -cl2 "left" "left" -cw2 $labelWidth 325 -text $nim_jobName -annotation "The name of the current NIM job.";
						textFieldGrp -enable true -editable false -label "Asset:" -cl2 "left" "left" -cw2 $labelWidth 325 -text $nim_assetName -annotation "The name of the current NIM asset.";
						textFieldGrp -enable true -editable false -label "Show:" -cl2 "left" "left" -cw2 $labelWidth 325 -text $nim_showName -annotation "The name of the current NIM show.";
						textFieldGrp -enable true -editable false -label "Shot:" -cl2 "left" "left" -cw2 $labelWidth 325 -text $nim_shotName -annotation "The name of the current NIM shot.";
						
						string $nimTasks_optionMenu = `optionMenuGrp -label "Tasks:" -cl2 "left" "left" -cw2 $labelWidth 320 -enable $enableNIM -cc "SaveNimTaskData" -ann "The list of tasks assigned. " nimTasks_optionMenu`;
						
						//GET TASKS FROM SERVER BASED ON itemID
						$pCMD = "python(\"nim.getNimData('getTaskInfo', '"+ $nim_class +"', '"+ $nim_itemID+"' )\")";
						string $nim_task_array[];
						if($nimIsMod == 1){ $nim_task_array = eval($pCMD);}
						//print "RETURN ARRAY: "; print $nim_task_array; print "\n";
						menuItem -label "Select..." -ann "0" -p ($nimTasks_optionMenu+"|OptionMenu");
						addTaskMenuItemsFromJsonArray(($nimTasks_optionMenu+"|OptionMenu"), $nim_task_array);

					setParent ..;
				setParent ..;
// END NIM UI
//=================================================================================================
	
//=================================================================================================
// NIM DRAFT UI
				
				string $nim_draftTemplate = `attributeExists nim_DraftTemplate defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_DraftTemplate` : "R:/Draft/Templates/NIM_Draft_Dailies.py";
				int $nim_submitDraftJob = `attributeExists nim_UseDraft defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_UseDraft` : false;
				int $nim_uploadDraftToNim = `attributeExists nim_UploadDraft defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_UploadDraft` : false;
				int $nim_encodeSRGB = `attributeExists nim_EncodeSRGB defaultRenderGlobals` ? `getAttr defaultRenderGlobals.nim_EncodeSRGB` : false;
				
				frameLayout -label "Draft" -borderStyle "etchedIn" -labelVisible true -borderVisible true -collapsable true -collapse false;
					columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4 -columnAlign "left";
						rowLayout -numberOfColumns 3 -cw3 $labelWidth 180 140;
							text -label ""; //dummy label
							checkBox -label "Submit Draft Job" -value $nim_submitDraftJob -changeCommand UseNimDraftChanged -enable true -annotation "Check to submit a Draft job in addition to the Maya job." nim_submitDraftJob;
						setParent ..;
						
						textFieldButtonGrp -cal 1 "left" -cw 1 $labelWidth -cw 2 300 -label "Draft Template" -buttonLabel "..." -text $nim_draftTemplate -changeCommand UseNimDraftChanged -annotation "The path to the Draft Template to use." -bc GetNimDraftTemplate nim_DraftTemplate;
						rowLayout -numberOfColumns 3 -cw3 $labelWidth 180 140;
							text -label ""; //dummy label
							checkBox -label "Encode sRGB" -value $nim_encodeSRGB -changeCommand UseNimDraftChanged -enable true -annotation "Encode the draft with sRGB color space for linear sequences." nim_encodeSRGB;
							checkBox -label "Upload Draft to NIM" -value $nim_uploadDraftToNim -changeCommand UseNimDraftChanged -enable true -annotation "Check to upload Draft output to NIM." nim_uploadDraftToNim;
						setParent ..;
					setParent ..;
				setParent ..;
				
				UseNimDraftChanged();
			
			setParent ..;		
// END NIM DRAFT UI
//=================================================================================================

		setParent ..;
	
	setParent ..;
		
	tabLayout -e -tabLabel mayaTabLayout "Maya" $MainTabLayout;
	tabLayout -e -tabLabel shotgunTabLayout "Shotgun/Draft" $MainTabLayout;
	
//=================================================================================================
// NIM DRAFT UI

	tabLayout -e -tabLabel nimTabLayout "NIM/Draft" $MainTabLayout;
	
// END NIM DRAFT UI
//=================================================================================================
	
	columnLayout -adj true -columnAttach "both" 4 -rowSpacing 4 buttonColumnLayout;
		rowLayout -numberOfColumns 5 -cw5 75 105 105 105 105;
			progressBar -width 65 -height 26 -minValue 0 -maxValue 100 -annotation "Deadline Submission Progress" frw_progBar;
			string $B3 = `button -label "Render Globals..." -width 95 -height 26 -c unifiedRenderGlobalsWindow -annotation "Opens the Maya Render Globals Dialog" frw_GlobalsButton`;
			button -label "Edit Project..." -width 95 -height 26 -c ProjectWindow -annotation "Opens the Maya Edit Project Dialog";
			button -label "Online Help..." -width 95 -c OnlineHelp -height 26 -annotation "Opens the Online Help page in the Default Web Browser";
			button -label "Submit Job" -width 95 -height 26 -annotation "Submits this job to Deadline" -c DeadlineSubmitterOnOk;
		setParent ..;
	setParent ..;
	
	formLayout -e
		-af buttonColumnLayout bottom 5
		-af buttonColumnLayout left 5
		-ac mainScrollLayout bottom 5 buttonColumnLayout
		-af mainScrollLayout top 5
		-af mainScrollLayout left 5
	mainFormLayout;
	
	// Show the submission dialog window.
	showWindow DeadlineSubmitWindow;
}
